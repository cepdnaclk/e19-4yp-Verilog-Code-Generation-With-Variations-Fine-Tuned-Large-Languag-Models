- code: |
    module simple_counter (
      input        clk,
      input        rst,
      input        enable,
      output [7:0] count_out
    );

      wire [7:0] count;    

      always @(posedge clk or posedge rst) begin
        if (rst) begin
          count <= 8'h00;
        end else if (enable) begin
          count <= count + 1;
        end
      end

      assign count_out = count;

    endmodule

- code: |
    module advanced_counter (
      input        clk,
      input        rst,
      input        enable,
      output [7:0] count_out
    );

      reg [7:0] count;    

      always @(posedge clk or posedge rst) begin
        if (rst) begin
          count <= 8'h00;
        end else if (enable) begin
          count <= count + 1;
        end
      end

      assign count_out = count;

    endmodule

- code: |
    module simple_shift_reg (
      input        clk,
      input        rst,
      input        data_in,
      output [7:0] data_shifted
    );
      reg [7:0] shift_reg;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          shift_reg <= 8'h00;
        end else begin
          shift_reg <= {shift_reg[6:0], data_in};
        end
      end
      assign data_shifted = shift_reg;
    endmodule

- code: |
    module simple_shift_reg (
      input        clk,
      input        rst,
      input        data_in,
      output [7:0] shift_out
    );
      reg [7:0] shift_reg;
      always @(posedge clk or negedge rst) begin
        if(!rst) begin
          shift_reg <= 8'h00;
        end else begin
          shift_reg <= {shift_reg[6:0], data_in};
        end
      end
      assign shift_out = shift_reg;
    endmodule

- code: |
    module simple_updown_counter (
      input        clk,
      input        rst,
      input        up_down,
      output [7:0] count_out
    );
      reg [15:0] count;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          count <= 8'h00;
        end else if (up_down) begin
          count <= count + 1;
        end else begin
          count <= count - 1;
        end
      end
      assign count_out = count;
    endmodule

- code: |
    module advanced_updown_counter (
      input        clk,
      input        rst,
      input        up_down,
      output [7:0] count_out
    );
      reg [7:0] count;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          count <= 8'h00;
        end else if (up_down) begin
          count <= count + 1;
        end else begin
          count <= count - 1;
        end
      end
      assign count_out = count;
    endmodule

- code: |
    module simple_toggle_ff (
      input  clk,
      input  rst,
      input  enable,
      output toggle_out
    );
      wire toggle_reg;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          toggle_reg <= 1'b0;
        end else if (enable) begin
          toggle_reg <= ~toggle_reg;
        end
      end
      assign toggle_out = toggle_reg;
    endmodule

- code: |
    module simple_toggle_ff (
      input  clk,
      input  rst,
      input  enable,
      output flip_out
    );
      reg toggle_reg;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          toggle_reg <= 1'b0;
        end else if (enable) begin
          toggle_reg <= ~toggle_reg;
        end
      end
      assign flip_out = toggle_reg;
    endmodule

- code: |
    module simple_pulse_gen (
      input  clk,
      input  rst,
      output pulse_out
    );
      reg [1:0] counter;
      reg pulse;
      always @(posedge clk or negedge rst) begin
        if(!rst) begin
          counter <= 2'b00;
          pulse <= 1'b0;
        end else begin
          counter <= counter + 1;
          pulse <= (counter == 2'b11);
        end
      end
      assign pulse_out = pulse;
    endmodule

- code: |
    module advanced_pulse_gen (
      input  clk,
      input  rst,
      output pulse_out
    );
      reg [1:0] counter;
      reg pulse;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          counter <= 2'b00;
          pulse <= 1'b0;
        end else begin
          counter <= counter + 1;
          pulse <= (counter == 2'b11);
        end
      end
      assign pulse_out = pulse;
    endmodule 

- code: |
    module medium_fifo (
      input        clk,
      input        rst,
      input        write_en,
      input        read_en,
      input  [7:0] data_in,
      output [7:0] data_out,
      output       full,
      output       empty
    );
      reg [7:0] [7:0][0:3] mem;
      reg [1:0] wr_ptr, rd_ptr;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          wr_ptr <= 2'b00;
          rd_ptr <= 2'b00;
        end else begin
          if (write_en && !full) begin
            mem[wr_ptr] <= data_in;
            wr_ptr <= wr_ptr + 1;
          end
          if (read_en && !empty) begin
            rd_ptr <= rd_ptr + 1;
          end
        end
      end
      assign data_out = mem[rd_ptr];
      assign full = (wr_ptr == rd_ptr + 4);
      assign empty = (wr_ptr == rd_ptr);
    endmodule

- code: |
    module medium_fifo (
      input        clk,
      input        rst,
      input        write_en,
      input        read_en,
      input  [7:0] data_in,
      output [7:0] data_out,
      output       full,
      output       empty
    );
      reg [7:0] [][] mem;
      reg [1:0] wr_ptr, rd_ptr;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          wr_ptr <= 2'b00;
          rd_ptr <= 2'b00;
        end else begin
          if (write_en && !full) begin
            mem[wr_ptr] <= data_in;
            wr_ptr <= wr_ptr + 1;
          end
          if (read_en && !empty) begin
            rd_ptr <= rd_ptr + 1;
          end
        end
      end
      assign data_out = mem[rd_ptr];
      assign full = (wr_ptr == rd_ptr + 4);
      assign empty = (wr_ptr == rd_ptr);
    endmodule

- code: |
    module medium_array_proc (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] sum_out
    );
      reg [7:0] [$:8] data_array;
      reg [2:0] index;
      reg [7:0] sum;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          index <= 3'b000;
          sum <= 8'h00;
        end else begin
          data_array[index] <= data_in;
          index <= index + 1;
          sum <= sum + data_in;
        end
      end
      assign sum_out = sum;
    endmodule

- code: |
    module medium_array_proc (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] sum_out
    );
      reg [7:0] [int] data_array;
      reg [2:0] index;
      reg [7:0] sum;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          index <= 3'b000;
          sum <= 8'h00;
        end else begin
          data_array[index] <= data_in;
          index <= index + 1;
          sum <= sum + data_in;
        end
      end
      assign sum_out = sum;
    endmodule

- code: |
    module medium_shift_matrix (
      input        clk,
      input        rst,
      input  [3:0] data_in,
      output [3:0] data_out
    );
      reg [3:0] matrix [0:3][0:3];
      reg [1:0] row, col;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          row <= 2'b00;
          col <= 2'b00;
        end else begin
          matrix[row][col] <= data_in;
          col <= col + 1;
          if (col == 2'b11) row <= row + 1;
        end
      end
      assign data_out = matrix[3][3];
    endmodule

- code: |
    module medium_shift_matrix (
      input        clk,
      input        rst,
      input  [3:0] data_in,
      output [3:0] data_out
    );
      reg [3:0] matrix [0:3][0:3];
      reg [1:0] row, col;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          row <= 2'b00;
          col <= 2'b00;
        end else begin
          matrix[row][col] <= data_in;
          col <= col + 1;
          if (col == 2'b11) row <= row + 1;
        end
      end
      assign data_out = matrix[3][3];
    endmodule

- code: |
    module medium_counter_array (
      input        clk,
      input        rst,
      input  [2:0] select,
      output [7:0] count_out
    );
      reg [7:0] counters [0:7];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          counters[0] <= 8'h00;
          counters[1] <= 8'h00;
          counters[2] <= 8'h00;
          counters[3] <= 8'h00;
          counters[4] <= 8'h00;
          counters[5] <= 8'h00;
          counters[6] <= 8'h00;
          counters[7] <= 8'h00;
        end else begin
          counters[select] <= counters[select] + 1;
        end
      end
      assign count_out = counters[select];
    endmodule

- code: |
    module medium_counter_array (
      input        clk,
      input        rst,
      input  [2:0] select,
      output [7:0] count_out
    );
      reg [7:0] counters [0:7];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          counters[0] <= 8'h00;
          counters[1] <= 8'h00;
          counters[2] <= 8'h00;
          counters[3] <= 8'h00;
          counters[4] <= 8'h00;
          counters[5] <= 8'h00;
          counters[6] <= 8'h00;
          counters[7] <= 8'h00;
        end else begin
          counters[select] <= counters[select] + 1;
        end
      end
      assign count_out = counters[select];
    endmodule

- code: |
    module medium_data_buffer (
      input        clk,
      input        rst,
      input        write_en,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] buffer [0:3];
      reg [1:0] ptr;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          ptr <= 2'b00;
        end else if (write_en) begin
          buffer[ptr] <= data_in;
          ptr <= ptr + 1;
        end
      end
      assign data_out = buffer[ptr];
      // Test case for array slice in inside operator
      wire test_result;
      
      // Example test condition: check if part of the array is inside the range
      assign test_result = (buffer[2:0] inside {3'b101, 3'b111});

    endmodule

- code: |
    module medium_data_buffer (
      input        clk,
      input        rst,
      input        write_en,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] buffer [0:3];
      reg [1:0] ptr;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          ptr <= 2'b00;
        end else if (write_en) begin
          buffer[ptr] <= data_in;
          ptr <= ptr + 1;
        end
      end
      assign data_out = buffer[ptr];
      // Test case for inside operator in if statement
      reg [7:0] test_value;
      reg if_result;
      
      // Example if statement using inside operator
      always @(*) begin
        if (test_value inside {8'd0, 8'd10, 8'd20, 8'd30, 8'd40}) begin
          if_result = 1'b1;
        end else begin
          if_result = 1'b0;
        end
      end
      
      // Nested if with inside operator
      always @(*) begin
        if (buffer[0] inside {8'd0, 8'd1}) begin
          if (buffer[1] inside {8'd2, 8'd3}) begin
            // Nested inside operations
          end
        end
      end

    endmodule

- code: |
    module complex_matrix_proc (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] sum_out
    );
      reg [7:0] matrix [0:3][0:3];
      reg [1:0] row, col;
      reg [7:0] sum;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          row <= 2'b00;
          col <= 2'b00;
          sum <= 8'h00;
        end else begin
          matrix[row][col] <= data_in;
          sum <= sum + data_in;
          col <= col + 1;
          if (col == 2'b11) row <= row + 1;
        end
      end
      assign sum_out = sum;
    endmodule

- code: |
    module complex_matrix_proc (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] sum_out
    );
      reg [7:0] matrix [0:3][0:3];
      reg [1:0] row, col;
      reg [7:0] sum;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          row <= 2'b00;
          col <= 2'b00;
          sum <= 8'h00;
        end else begin
          matrix[row][col] <= data_in;
          sum <= sum + data_in;
          col <= col + 1;
          if (col == 2'b11) row <= row + 1;
        end
      end
      assign sum_out = sum;
    endmodule

- code: |
    module complex_data_pipeline (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] pipeline [0:3];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          pipeline[0] <= 8'h00;
          pipeline[1] <= 8'h00;
          pipeline[2] <= 8'h00;
          pipeline[3] <= 8'h00;
        end else begin
          pipeline[0] <= data_in;
          pipeline[1] <= pipeline[0] + 1;
          pipeline[2] <= pipeline[1] + 2;
          pipeline[3] <= pipeline[2] + 3;
        end
      end
      assign data_out = pipeline[3];
    endmodule

- code: |
    module complex_data_pipeline (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] pipeline [0:3];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          pipeline[0] <= 8'h00;
          pipeline[1] <= 8'h00;
          pipeline[2] <= 8'h00;
          pipeline[3] <= 8'h00;
        end else begin
          pipeline[0] <= data_in;
          pipeline[1] <= pipeline[0] + 1;
          pipeline[2] <= pipeline[1] + 2;
          pipeline[3] <= pipeline[2] + 3;
        end
      end
      assign data_out = pipeline[3];
      // Test case for array slice in inside operator
      wire test_result;
      
      // Example test condition: check if part of the array is inside the range
      assign test_result = (pipeline[2:0] inside {3'b101, 3'b111});

    endmodule

- code: |
    module complex_array_sorter (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] [int] array;
      reg [1:0] index;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          array[0] <= 8'h00;
          array[1] <= 8'h00;
          array[2] <= 8'h00;
          array[3] <= 8'h00;
          index <= 2'b00;
        end else begin
          array[index] <= data_in;
          index <= index + 1;
          if (index == 2'b11 && array[0] > array[1]) begin
            array[0] <= array[1];
            array[1] <= array[0];
          end
        end
      end
      assign data_out = array[0];
    endmodule

- code: |
    module complex_array_sorter (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] array [0:3];
      reg [1:0] index;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          array[0] <= 8'h00;
          array[1] <= 8'h00;
          array[2] <= 8'h00;
          array[3] <= 8'h00;
          index <= 2'b00;
        end else begin
          array[index] <= data_in;
          index <= index + 1;
          if (index == 2'b11 && array[0] > array[1]) begin
            array[0] <= array[1];
            array[1] <= array[0];
          end
        end
      end
      assign data_out = array[0];
    endmodule

- code: |
    module complex_queue_controller (
      input        clk,
      input        rst,
      input        enq,
      input        deq,
      input  [7:0] data_in,
      output [7:0] data_out,
      output       full,
      output       empty
    );
      reg [7:0] queue [0:7];
      reg [2:0] head, tail;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          head <= 3'b000;
          tail <= 3'b000;
        end else begin
          if (enq && !full) begin
            queue[tail] <= data_in;
            tail <= tail + 1;
          end
          if (deq && !empty) begin
            head <= head + 1;
          end
        end
      end
      assign data_out = queue[head];
      assign full = (tail == head + 8);
      assign empty = (tail == head);
      // Test case for inside operator in if statement
      reg [7:0] test_value;
      reg if_result;
      
      // Example if statement using inside operator
      always @(*) begin
        if (test_value inside {8'd0, 8'd10, 8'd20, 8'd30, 8'd40}) begin
          if_result = 1'b1;
        end else begin
          if_result = 1'b0;
        end
      end
      
      // Nested if with inside operator
      always @(*) begin
        if (queue[0] inside {8'd0, 8'd1}) begin
          if (queue[1] inside {8'd2, 8'd3}) begin
            // Nested inside operations
          end
        end
      end

    endmodule

- code: |
    module complex_queue_controller (
      input        clk,
      input        rst,
      input        enq,
      input        deq,
      input  [7:0] data_in,
      output [7:0] data_out,
      output       full,
      output       empty
    );
      reg [7:0] queue [0:7];
      reg [2:0] head, tail;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          head <= 3'b000;
          tail <= 3'b000;
        end else begin
          if (enq && !full) begin
            queue[tail] <= data_in;
            tail <= tail + 1;
          end
          if (deq && !empty) begin
            head <= head + 1;
          end
        end
      end
      assign data_out = queue[head];
      assign full = (tail == head + 8);
      assign empty = (tail == head);
      // Test case for inside operator in module scope
      reg [7:0] test_value;
      reg module_scope_result;
      
      // Example use of inside operator within module scope
      always @(*) begin
        module_scope_result = (test_value inside {8'd0, 8'd5, 8'd10});
      end

    endmodule