// =============================================
// Variation 1: Output type changed to `bit`
// =============================================

module RefModule_bit (
  output bit out
);
  assign out = 1'b0;
endmodule

module TopModule_bit (
  output bit out
);
  assign out = 1'b0;
endmodule

module tb_bit();
  bit out_ref, out_dut;
  logic clk = 0;
  initial forever #5 clk = ~clk;

  RefModule_bit ref(.out(out_ref));
  TopModule_bit dut(.out(out_dut));

  always @(posedge clk) begin
    if (out_ref !== out_dut) begin
      $display("Mismatch at %0t: ref = %b, dut = %b", $time, out_ref, out_dut);
    end
  end

  initial begin
    $dumpfile("wave_bit.vcd");
    $dumpvars(0, out_ref, out_dut);
    #100 $finish;
  end
endmodule

// =============================================
// Variation 2: Output wrapped in a packed struct
// =============================================

typedef struct packed {
  logic value;
} wrap_struct_t;

module RefModule_struct (
  output wrap_struct_t out
);
  assign out = '{value: 1'b0};
endmodule

module TopModule_struct (
  output wrap_struct_t out
);
  assign out = '{value: 1'b0};
endmodule

module tb_struct();
  wrap_struct_t out_ref, out_dut;
  logic clk = 0;
  initial forever #5 clk = ~clk;

  RefModule_struct ref(.out(out_ref));
  TopModule_struct dut(.out(out_dut));

  always @(posedge clk) begin
    if (out_ref !== out_dut) begin
      $display("Mismatch at %0t: ref = %b, dut = %b", $time, out_ref.value, out_dut.value);
    end
  end

  initial begin
    $dumpfile("wave_struct.vcd");
    $dumpvars(0, out_ref, out_dut);
    #100 $finish;
  end
endmodule

// Variation 3 to 7 already include testbenches.
// No need to duplicate existing tb_signed, tb_enum, etc.

// Remaining testbenches for union, nested, and vector:

// ===============================================
// TB for Variation 5: Packed Union Output
// ===============================================

module tb_union();
  union_t out_ref, out_dut;
  logic clk = 0;
  initial forever #5 clk = ~clk;

  RefModule_union ref(.out(out_ref));
  TopModule_union dut(.out(out_dut));

  always @(posedge clk) begin
    if (out_ref.as_byte !== out_dut.as_byte) begin
      $display("Mismatch at %0t: ref = %h, dut = %h", $time, out_ref.as_byte, out_dut.as_byte);
    end
  end

  initial begin
    $dumpfile("wave_union.vcd");
    $dumpvars(0, out_ref, out_dut);
    #100 $finish;
  end
endmodule

// ===============================================
// TB for Variation 6: Deep Nested Struct Output
// ===============================================

module tb_nested();
  deep_struct_t zero_ref, zero_dut;
  logic clk = 0;
  initial forever #5 clk = ~clk;

  RefModule_nested ref(.zero(zero_ref));
  TopModule_nested dut(.zero(zero_dut));

  always @(posedge clk) begin
    if (zero_ref.nested.value !== zero_dut.nested.value) begin
      $display("Mismatch at %0t: ref = %b, dut = %b", $time, zero_ref.nested.value, zero_dut.nested.value);
    end
  end

  initial begin
    $dumpfile("wave_nested.vcd");
    $dumpvars(0, zero_ref, zero_dut);
    #100 $finish;
  end
endmodule

// ===============================================
// TB for Variation 7: 8-bit Logic Vector Output
// ===============================================

module tb_vector();
  logic [7:0] out_ref, out_dut;
  logic clk = 0;
  initial forever #5 clk = ~clk;

  RefModule_vector ref(.out(out_ref));
  TopModule_vector dut(.out(out_dut));

  always @(posedge clk) begin
    if (out_ref !== out_dut) begin
      $display("Mismatch at %0t: ref = %h, dut = %h", $time, out_ref, out_dut);
    end
  end

  initial begin
    $dumpfile("wave_vector.vcd");
    $dumpvars(0, out_ref, out_dut);
    #100 $finish;
  end
endmodule
