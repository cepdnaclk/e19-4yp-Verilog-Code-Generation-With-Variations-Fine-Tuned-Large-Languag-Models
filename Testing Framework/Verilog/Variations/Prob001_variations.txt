// =========================================
// Variation 1: Change output type to `bit`
// =========================================

module RefModule (
  output bit zero
);
  assign zero = 1'b0;
endmodule

module TopModule (
  output bit zero
);
  assign zero = 1'b0;
endmodule

module tb_bit();
  bit zero_ref, zero_dut;
  RefModule ref(.zero(zero_ref));
  TopModule dut(.zero(zero_dut));
  initial begin
    #1;
    $display("bit Match: %b", zero_ref === zero_dut);
  end
endmodule

// =============================================
// Variation 2: Use packed struct for the output
// =============================================

typedef struct packed {
  logic valid;
  logic value;
} zero_struct_t;

module RefModule_struct (
  output zero_struct_t zero
);
  assign zero = '{valid: 1'b1, value: 1'b0};
endmodule

module TopModule_struct (
  output zero_struct_t zero
);
  assign zero = '{valid: 1'b1, value: 1'b0};
endmodule

module tb_struct();
  zero_struct_t zero_ref, zero_dut;
  RefModule_struct ref(.zero(zero_ref));
  TopModule_struct dut(.zero(zero_dut));
  initial begin
    #1;
    $display("struct Match: %b", zero_ref === zero_dut);
  end
endmodule

// ==============================================
// Variation 3: Use signed 4-bit logic vector
// ==============================================

module RefModule_signed (
  output logic signed [3:0] zero
);
  assign zero = -4'sd2;
endmodule

module TopModule_signed (
  output logic signed [3:0] zero
);
  assign zero = -4'sd2;
endmodule

module tb_signed();
  logic signed [3:0] zero_ref, zero_dut;
  RefModule_signed ref(.zero(zero_ref));
  TopModule_signed dut(.zero(zero_dut));
  initial begin
    #1;
    $display("signed Match: %b", zero_ref === zero_dut);
  end
endmodule

// ==========================================
// Variation 4: Use Enum type for the output
// ==========================================

typedef enum logic [1:0] {
  ZERO = 2'b00,
  ONE = 2'b01,
  INVALID = 2'b11
} zero_enum_t;

module RefModule_enum (
  output zero_enum_t zero
);
  assign zero = ZERO;
endmodule

module TopModule_enum (
  output zero_enum_t zero
);
  assign zero = ZERO;
endmodule

module tb_enum();
  zero_enum_t zero_ref, zero_dut;
  RefModule_enum ref(.zero(zero_ref));
  TopModule_enum dut(.zero(zero_dut));
  initial begin
    #1;
    $display("enum Match: %b", zero_ref === zero_dut);
  end
endmodule

// ==========================================
// Variation 5: Use Packed Union for output
// ==========================================

typedef union packed {
  logic [7:0] as_byte;
  struct packed {
    logic [3:0] low;
    logic [3:0] high;
  } parts;
} data_u;

module RefModule_union (
  output data_u zero
);
  assign zero.as_byte = 8'hA5;
endmodule

module TopModule_union (
  output data_u zero
);
  assign zero.as_byte = 8'hA5;
endmodule

module tb_union();
  data_u zero_ref, zero_dut;
  RefModule_union ref(.zero(zero_ref));
  TopModule_union dut(.zero(zero_dut));
  initial begin
    #1;
    $display("union Match: %b", zero_ref.as_byte === zero_dut.as_byte);
  end
endmodule

// ===================================================
// Variation 6: Input Clock passed via Packed Struct
// ===================================================

typedef struct packed {
  logic clk;
} ctrl_t;

module stimulus_gen_struct (
  input ctrl_t ctrl,
  output reg[511:0] wavedrom_title,
  output reg wavedrom_enable
);
  task wavedrom_start(input[511:0] title = ""); endtask
  task wavedrom_stop; #1; endtask

  initial begin
    wavedrom_start("Output should 0");
    repeat(20) @(posedge ctrl.clk, negedge ctrl.clk);
    wavedrom_stop();
    #1 $finish;
  end
endmodule

module tb_ctrlstruct();
  ctrl_t ctrl;
  reg clk = 0;
  initial forever #5 clk = ~clk;
  assign ctrl.clk = clk;
  reg [511:0] wavedrom_title;
  reg wavedrom_enable;
  stimulus_gen_struct stim(.ctrl(ctrl), .wavedrom_title(wavedrom_title), .wavedrom_enable(wavedrom_enable));
endmodule

// ===================================================
// Variation 7: Use Nested Unpacked Struct as Output
// ===================================================

typedef struct {
  logic valid;
  struct {
    logic value;
    logic flag;
  } nested;
} deep_struct_t;

module RefModule_nested (
  output deep_struct_t zero
);
  assign zero.valid = 1;
  assign zero.nested.value = 0;
  assign zero.nested.flag = 1;
endmodule

module TopModule_nested (
  output deep_struct_t zero
);
  assign zero.valid = 1;
  assign zero.nested.value = 0;
  assign zero.nested.flag = 1;
endmodule

module tb_nested();
  deep_struct_t zero_ref, zero_dut;
  RefModule_nested ref(.zero(zero_ref));
  TopModule_nested dut(.zero(zero_dut));
  initial begin
    #1;
    $display("nested struct Match: %b", zero_ref.nested.value === zero_dut.nested.value);
  end
endmodule