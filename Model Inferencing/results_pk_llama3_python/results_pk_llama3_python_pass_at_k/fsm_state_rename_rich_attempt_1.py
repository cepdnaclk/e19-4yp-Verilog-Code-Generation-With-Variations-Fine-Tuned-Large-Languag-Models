# Generated by Ollama Llama 3
# Task: fsm_state_rename_rich
# Attempt: 1
# Success: True
# Overall Score: 0.638

import argparse
import os
from pyverilog.ast import *
from pyverilog.vparser.parser import parseFile
import re


class RenameStatesVisitor:

    def __init__(self, old_prefix, new_prefix):
        self.old_prefix = old_prefix
        self.new_prefix = new_prefix

    def visit(self, node):

        if isinstance(node, EnumDecl):
            for item in node.list:
                # Check for old prefix name
                if item.name.startswith(self.old_prefix):
                    # Rename enum member
                    item.rename(item.name.replace(self.old_prefix, self.new_prefix))

        elif isinstance(node, CaseStmt) or isinstance(node, IfElse) \
                or isinstance(node, AssignStmt) or isinstance(node, WhileLoop):

            for case in node.cases:
                if case.expr:
                    for expr in case.expr.list:
                        # Check for old prefix name
                        if expr.value.startswith(self.old_prefix):
                            # Rename enum member
                            expr.value = expr.value.replace(
                                self.old_prefix,
                                self.new_prefix)

        # Visit children
        for c in node.children():
            self.visit(c)


def transform(input_file, output_file, old_prefix, new_prefix):
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    visitor = RenameStatesVisitor(old_prefix, new_prefix)
    visitor.visit(ast)

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    modified_content = re.sub(
        pattern,
        lambda m: m.group(0).replace(self.old_prefix, self.new_prefix),
        content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Systematically rename FSM state names throughout a module"
    )
    parser.add_argument("input_file", help="Input SystemVerilog file")
    parser.add_argument("output_file", help="Output SystemVerilog file")
    parser.add_argument("-old_prefix",
                        default="OLD_PREFIX",
                        help="Old prefix name for states (default: 'OLD_PREFIX')")
    parser.add_argument(
        "-new_prefix",
        default="NEW_PREFIX",
        help="New prefix name for states (default: 'NEW_PREFIX')")

    args = parser.parse_args()

    try:
        transform(args.input_file, args.output_file,
                  args.old_prefix, args.new_prefix)
    except Exception as e:
        print("Error:", str(e))