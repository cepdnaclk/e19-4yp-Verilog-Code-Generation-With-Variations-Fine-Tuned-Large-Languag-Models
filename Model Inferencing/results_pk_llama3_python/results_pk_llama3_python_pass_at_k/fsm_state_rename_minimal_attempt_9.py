# Generated by Ollama Llama 3
# Task: fsm_state_rename_minimal
# Attempt: 9
# Success: False
# Overall Score: 0.468

import pyverilog.ast.utils.visitor as vutil
import re

def rename_fsm_states(old_prefix, new_prefix):
    def visit(self, node):
        if isinstance(node, list):
            for n in node:
                self.visit(n)
        elif isinstance(node, vutil.EnumDecl) and node.name == 'FSM':
            # find all states that match the pattern
            for state in node.values:
                m = re.match(old_prefix + '(\\w+)', state.name)
                if not m: continue
                name = new_prefix + m.group(1)
                print(f'Renaming {state.name} to {name}')
                # update all references
                for ref_node in self.visit(state):
                    if isinstance(ref_node, vutil.Case) and node.name in ref_node:
                        # rename states in case statements
                        old_states = [old_prefix + s for s in ref_node.values]
                        new_states = [new_prefix + s for s in ref_node.values]
                        print(f'Updating {ref_node} to match {old_states} -> {new_states}')
                        ref_node.values = new_states

                    elif isinstance(ref_node, vutil.Assign) and node.name in ref_node:
                        # update state assignments
                        old_state_name = old_prefix + ref_node.rhs[0].name
                        new_state_name = new_prefix + ref_node.rhs[0].name
                        print(f'Updating {ref_node} to match {old_state_name} -> {new_state_name}')
                        ref_node.rhs[0].name = new_state_name

                    elif isinstance(ref_node, vutil.If) and node.name in ref_node:
                        # update state comparisons
                        old_state_name = old_prefix + ref_node.condition[0]
                        new_state_name = new_prefix + ref_node.condition[0]
                        print(f'Updating {ref_node} to match {old_state_name} -> {new_state_name}')
                        ref_node.condition[0] = new_state_name

                self.visit(state)
            return True
        elif isinstance(node, vutil.Assign):
            if node.lhs.name == 'FSM':
                # find all states that match the pattern in assignments
                for state in node.rhs:
                    m = re.match(old_prefix + '(\\w+)', state.name)
                    if not m: continue
                    name = new_prefix + m.group(1)
                    print(f'Renaming {state.name} to {name}')
                    # update all references
                    ref_node = self.visit(node)
                    if isinstance(ref_node, vutil.Case) and node.lhs.name in ref_node:
                        # rename states in case statements
                        old_states = [old_prefix + s for s in ref_node.values]
                        new_states = [new_prefix + s for s in ref_node.values]
                        print(f'Updating {ref_node} to match {old_states} -> {new_states}')
                        ref_node.values = new_states

                    elif isinstance(ref_node, vutil.Assign) and node.lhs.name in ref_node:
                        # update state assignments
                        old_state_name = old_prefix + ref_node.rhs[0].name
                        new_state_name = new_prefix + ref_node.rhs[0].name
                        print(f'Updating {ref_node} to match {old_state_name} -> {new_state_name}')
                        ref_node.rhs[0].name = new_state_name

                    elif isinstance(ref_node, vutil.If) and node.lhs.name in ref_node:
                        # update state comparisons
                        old_state_name = old_prefix + ref_node.condition[0]
                        new_state_name = new_prefix + ref_node.condition[0]
                        print(f'Updating {ref_node} to match {old_state_name} -> {new_state_name}')
                        ref_node.condition[0] = new_state_name

                    return True
        else:
            for child in node.children:
                self.visit(child)
    visitor = vutil.Visitor(visit)
    module = pyverilog.frontend.main.parse(sys.argv[1])
    if not isinstance(module, list):
        module = [module]
    result = [visitor.visit(m) for m in module]

def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('old_prefix', help='Old prefix to rename')
    parser.add_argument('new_prefix', help='New prefix to rename to')
    args = parser.parse_args()

    if not rename_fsm_states(args.old_prefix, args.new_prefix):
        print("Transformation failed")

if __name__ == '__main__':
    main()