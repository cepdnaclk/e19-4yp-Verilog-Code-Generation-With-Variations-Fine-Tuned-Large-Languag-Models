# Generated by Ollama Llama 3
# Task: inside_op_coverage_minimal
# Attempt: 7
# Success: True
# Overall Score: 0.618

"""Generate coverage test cases for inside operator with random values.
"""

import re
from pyverilog.ast import *
from xforms.xform_visitor import XFormVisitor


class InsideCoverageTest(XFormVisitor):
    """This class generates coverage test cases for 'inside' operator."""

    def __init__(self, *args, **kwargs) -> None:
        super().__init__(*args, **kwargs)

    @staticmethod
    def transform_ast(node: AST) -> bool:
        # Generate random value arrays for testing.
        rand_values = [list(map(lambda x: randint(0, 100), range(randint(1, 10)))) for _ in range(5)]

        # Add coverage points for different scenarios.
        inside_coverage_points = [
            {"inputs": [[1, 2], [3, 4]], "outputs": [[1, 3]]},
            {"inputs": [[0, 1], []], "outputs": [[]]},
            {"inputs": [], "outputs": []},
            # Edge cases like empty arrays and boundary values.
            {"inputs": [[-1, -2], [-3, -4]], "outputs": [[-1, -3]]},
            {"inputs": [[100, 101], [102, 103]], "outputs": [[100, 102]]}
        ]

        # Generate both positive and negative test cases.
        for case in inside_coverage_points:
            inputs = case["inputs"]
            outputs = case["outputs"]

            if len(inputs) == 0 or len(outputs) == 0:
                continue

            rand_input1 = inputs[0]
            rand_input2 = inputs[1]

            # Generate random values for the first input.
            rand_values1 = [rand_value * randint(1, 10) for rand_value in rand_input1]

            # Generate random values for the second input.
            rand_values2 = [rand_value * randint(1, 10) for rand_value in rand_input2]

            # Create the 'inside' operator expression.
            inside_expression = AstBinary(AstID('inside'), rand_values1, rand_values2)

            # Get the AST for the expression.
            ast_inside_expression = re.search(r"\b(ast_binary)\(", str(inside_expression)).group()

            # Replace the existing AST with the new one.
            node.ast = re.sub(ast_inside_expression, str(inside_expression), str(node))

        return True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", type=str, required=True)
    args = parser.parse_args()

    input_file = args.input

    # Parse the input file.
    with open(input_file) as file:
        content = file.read()

    ast = parse(content)

    # Create an instance of the visitor class.
    transform = InsideCoverageTest(ast)

    # Transform the AST and generate coverage test cases.
    success = transform.transform_ast()

    if not success:
        print("Failed to generate coverage test cases.")

    else:
        with open(input_file, 'w') as file:
            file.write(str(ast))


if __name__ == '__main__':
    main()