# Generated by Ollama Llama 3
# Task: mixed_mda_conversion_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.432

from pyverilog.ast import *
import re


def parse_mda_spec(spec):
    # Parse MDA specification
    # Return dict of dimension types and array names 
    dim_types = {}
    array_names = []
    
    for line in spec.split('\n'):
        if not line.strip():
            continue
        
        tokens = line.split()
        if len(tokens) == 0:
            continue
    
        if tokens[0] == 'dim':
            dim_types[tokens[1]] = tokens[2]
        elif tokens[0] == 'arr':
            array_names.append(tokens[1])
    
    return {'dim_types': dim_types, 
            'array_names': array_names}
    

def get_array_type(dim_spec):
    # Get mixed dimension type
    # Return string of mixed dimension syntax

    dim_type = ''
    for key in sorted(dim_spec.keys()):
        if not dim_type:
            dim_type += key + '('
        else:
            dim_type += ',' + key + '('
    
    return dim_type


def mda_transform(ast):
    # Identify and transform arrays with MDA types 
    # Return transformed AST

    array_names = []
    for node in ast.traverse():
        if isinstance(node, ArrayDecl) or isinstance(node, ArrayRef):
            name = node.get('name')
            if name:
                array_names.append(name)
    
    dim_specs = {}
    for name in array_names: 
        spec = get_mda_spec_from_file(name+'.mda')
        dim_specs[name] = parse_mda_spec(spec)

    for node in ast.traverse():
        if isinstance(node, ArrayDecl) or isinstance(node, ArrayRef):
            name = node.get('name')
            if name:
                dim_type = get_array_type(dim_specs[name]['dim_types'])
                mixed_dim_type = 'mixed_dim_' + dim_type
                new_node = change_mda_type(node, mixed_dim_type)
                ast.replace(node, new_node)

    return ast


def get_mda_spec_from_file(name):
    # Get MDA specification from file 
    # Return string of specification

    with open(name) as f:
        spec = f.read()
    
    return spec
    

def change_mda_type(node, mixed_dim_type):
    # Change MDA type of array declaration
    # Replace old type with new mixed dimension syntax 

    dim_type = node.get('type')
    new_node = copy.deepcopy(node)
    new_node.type = mixed_dim_type

    return new_node


if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', 
                        help='path to input file')
    
    args = parser.parse_args()

    if not args.input:
        print('Usage: python3 mda_transform.py -i <input-file>')
        exit(1)

    with open(args.input) as f:
        ast = AST.fromfile(f)
        transformed_ast = mda_transform(ast)
        out_file = args.input.split('.')[0] + '_transformed.v'
        with open(out_file, 'w') as f:
            print(transformed_ast.toverilog(), file=f)

    exit(0)