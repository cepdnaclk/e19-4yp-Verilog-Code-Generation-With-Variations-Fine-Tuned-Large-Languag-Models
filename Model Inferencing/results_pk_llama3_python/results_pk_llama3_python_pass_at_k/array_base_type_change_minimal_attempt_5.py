# Generated by Ollama Llama 3
# Task: array_base_type_change_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.495

"""Transform base type of array declaration"""

from pyverilog.ast import *
import re


def transform_array_declaration(base_type, ast):
    """Transform base type of an array declaration."""

    def _transform_array_declaration(node):
        if isinstance(node, ArrayDecl):
            # Handle width specifications
            if node.width is not None:
                new_width = ""
                for token in str(node.width).split():
                    match = re.match(r'(\d+)', token)
                    if match:
                        width = int(match.group(0))
                        new_width += base_type(width)
                    else:
                        new_width += " ".join(token)
            else:
                new_width = ""

            # Generate new AST
            node.width = new_width
            node.type_node = base_type(node.type_node)

        return node

    # Find all ArrayDecl nodes and transform them
    for decl in ast.findall(ArrayDecl):
        decl.transform(_transform_array_declaration)


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('ast')
    args = parser.parse_args()

    with open(args.ast, 'r') as f:
        ast = parse(f.read())

    # Transform AST
    transform_array_declaration(base_type=LogicValue(), ast=ast)

    # Print transformed AST
    print(ast)