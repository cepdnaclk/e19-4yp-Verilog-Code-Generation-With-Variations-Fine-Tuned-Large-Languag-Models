# Generated by Ollama Llama 3
# Task: add_enable_signal_minimal
# Attempt: 1
# Success: False
# Overall Score: 0.335

import pyverilog.parser as parser
from pyverilog.ast import *

import re
import argparse

# Parse and analyze Verilog AST using PyVerilog
def parse_verilog(verilog_file):
    ast = parser.parseFile(verilog_file)
    return ast

def add_enable_counter(ast):
    # Find all counter increment statements and wrap them with enable condition
    for stmt in ast.getStatements():
        if isinstance(stmt, AssignmentStatement):
            for assign in stmt.assignments:
                if re.match(r'^(\w+)\s*<=\s*(\w+)\s*\+1$', str(assign)):
                    # Wrap counter increments with enable condition
                    new_stmt = IfThenElseStatement()
                    new_stmt.then = AssignStatement()
                    new_stmt.else_ = None

                    new_stmt.then.assignments.append(Assignment())
                    new_stmt.then.assignments[0].lhs = assign.lhs
                    new_stmt.then.assignments[0].rhs = BinaryExpression()
                    new_stmt.then.assignments[0].rhs.left = assign.rhs.left
                    new_stmt.then.assignments[0].rhs.right = IntConstant(1)
                    new_stmt.then.assignments[0].operator = '+='

                    # Add enable signal as new input port
                    new_port = InputPort()
                    new_port.name = 'enable'
                    new_stmt.then.assignments[0].lhs.append(new_port)

                    # Wrap with if statement and add sensitivity list
                    old_sensitivity_list = stmt.getSensitivityList()
                    new_stmt.conds.append(IfCondition())
                    new_stmt.conds[-1].expression = BinaryExpression()
                    new_stmt.conds[-1].expression.left = VariableReferenceStatement()
                    new_stmt.conds[-1].expression.right = IntConstant(0)
                    new_stmt.conds[-1].operator = '!='
                    if old_sensitivity_list:
                        new_stmt.conds.append(SensitivityList())
                        new_stmt.conds[-1].sensitivity_list.append(old_sensitivity_list)

                    # Preserve existing reset logic
                    new_stmt.conds.append(IfCondition())
                    new_stmt.conds[-1].expression = BinaryExpression()
                    new_stmt.conds[-1].expression.left = VariableReferenceStatement()
                    new_stmt.conds[-1].expression.right = IntConstant(0)
                    new_stmt.conds[-1].operator = '!='
                    if stmt.getReset():
                        new_stmt.conds.append(IfCondition())
                        new_stmt.conds[-1].expression = BinaryExpression()
                        new_stmt.conds[-1].expression.left = VariableReferenceStatement()
                        new_stmt.conds[-1].expression.right = IntConstant(0)
                        new_stmt.conds[-1].operator = '!='
                        if stmt.getReset().statements:
                            new_stmt.conds.append(stmt.getReset().statements)

                    # Add the modified statement to the top-level statements
                    ast.addStatement(new_stmt)