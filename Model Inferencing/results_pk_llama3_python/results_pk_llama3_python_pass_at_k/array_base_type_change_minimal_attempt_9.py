# Generated by Ollama Llama 3
# Task: array_base_type_change_minimal
# Attempt: 9
# Success: False
# Overall Score: 0.445

import pyverilog.ast.utils.asttools as asttools

class ArrayTypeTransformer(asttools.Visitor):
    def __init__(self, old_type, new_type):
        self.old_type = old_type
        self.new_type = new_type
    
    def visit_Declaration(self, node):
        if isinstance(node.base_type, asttools.DeclBaseType) and \
           (node.base_type.type == self.old_type or 
            isinstance(node.base_type.type, list) and 
            any(x == self.old_type for x in node.base_type.type)):
                new_base_type = asttools.DeclBaseType(
                    type=[x if x != self.old_type else self.new_type for x in node.base_type.type],
                    size=node.base_type.size,
                    dimension=node.base_type.dimension
                )
                return asttools.Declaration(base_type=new_base_type, 
                                            name=node.name,
                                            array_dimensions=node.array_dimensions,
                                            initial_value=node.initial_value)
        return super().visit_Declaration(node)

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help='input Verilog file')
    args = parser.parse_args()

    with open(args.filename) as f:
        ast = asttools.parse(f.read())
    
    transformer = ArrayTypeTransformer(old_type='bit', new_type='logic')
    transformed_ast = transformer.visit(ast)

    print(transformed_ast.to_string())