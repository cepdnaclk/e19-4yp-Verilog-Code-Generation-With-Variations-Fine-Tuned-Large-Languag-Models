# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 10
# Success: False
# Overall Score: 0.518

```python
import pyverilog.parser as parser
from pyverilog.ast import *

from xform import BaseVisitor

class ResetTransform(BaseVisitor):
    def __init__(self, direction):
        self.direction = direction
    
    def transform_reset(self, node, reset_name):
        if isinstance(node, If) and \
           hasattr(node.cond, 'atom') and \
           isinstance(node.cond.atom, Atom) and \
           node.cond.atom.name == reset_name:
            # Convert active-high to active-low
            if self.direction == "low":
                node.cond = Not(node.cond)
            
            # Update sensitivity list
            if len(node.sensitivity_list.posedge) > 0:
                node.sensitivity_list.negedge.append(reset_name)

        return node

    def transform_reset_reg(self, node, reset_name):
        if isinstance(node, Reg) and \
           hasattr(node.init_val, 'atom') and \
           isinstance(node.init_val.atom, Atom) and \
           node.init_val.atom.name == reset_name:
            # Convert active-high to active-low
            if self.direction == "low":
                node.init_val = Not(node.init_val)
        
        return node

    def visit(self, node):
        # Check for target declarations
        if isinstance(node, Node):
            # Find reset declaration
            if hasattr(node, 'decl') and isinstance(node.decl[0], Decl):
                decl_list = node.decl[0].list
                for item in decl_list:
                    if hasattr(item, "name") and item.name == self.direction:
                        reset_name = item.name

        # Apply transformations
        # If statements
        if isinstance(node, If) or isinstance(node, Case):
            new_node = self.transform_reset(node, reset_name)
            
        elif isinstance(node, Reg):
            new_node = self.transform_reset_reg(node, reset_name)

        else:
            for c in node.children():
                new_node = self.visit(c)
        
        return new_node


def transform(input_file, output_file, direction):
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    visitor = ResetTransform(direction)
    visitor.visit(ast)

    # Write output
    with open(output_file, "w") as f:
        print(ast.to_verilog(), file=f)

    return True


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("input_file", help="Input Verilog file")
    parser.add_argument(
        "-o",
        "--output-file",
        help="Output Verilog file (default: input_file_transformed)",
        default=None
    )
    parser.add_argument(
        "direction",
        choices=["high","low"],
        help="Reset direction (active-high or active-low)"
    )

    args = parser.parse_args()

    if not args.output_file:
        output_file = "{}_transformed".format(args.input_file)

    transform(args.input_file, output_file, args.direction)
```