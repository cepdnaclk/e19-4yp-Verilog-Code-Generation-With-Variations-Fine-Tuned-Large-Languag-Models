# Generated by Ollama Llama 3
# Task: inside_op_context_scenarios_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.465

import pyverilog.ast.tools as vtools
from pyverilog.ast import *
from xform import XForm
from re import findall, sub

class InsideOperator(XForm):
    '''Generate inside operator usage in if statements'''

    def __init__(self):
        super().__init__()
        
    @staticmethod
    def parse_options():
        parser = argparse.ArgumentParser()
        return parser.parse_args()

    def transform(self, ast):
        self.ast = ast
        self.check_ast(ast)
        return self._transform(ast)

    def _transform(self, ast):
        '''
        Transform AST here
        '''
        # check if 'if' statement exists in ast
        inside_operators = findall(r'\s*(\+|&|~)\s*inside\s*\(\w+\)', str(ast))
        
        if len(inside_operators) > 0:
            for operator in inside_operators:
                exprs = findall('\S+', operator)
                # check if inside operator is used within 'if' statement
                if len(exprs) == 3 and exprs[0] in ['+','&', '~'] and exprs[-1].strip() == 'if':
                    self.log('Found inside operator inside "if" statement')
                    new_stmt = IfElse()
                    
                    for i, arg in enumerate(exprs):
                        if i != 2:
                            new_stmt.args.append(vtools.parse(arg))
                        
                    # create new 'then' and 'else' statements
                    then_stmt = Expr()
                    else_stmt = IfElse()
                    then_stmt.append(Expr('1'))
                    else_stmt.append(Expr())
                    
                    new_stmt.ifs.append(IfCond())
                    new_stmt.ifs[0].if_cond.append(vtools.parse(exprs[2]))
                    new_stmt.ifs[0].then.append(new_stmt)
                    new_stmt.ifs[0].elsestmt.append(else_stmt)
                    
                    # replace old 'if' statement with newly created one
                    new_ast = sub(re.compile(r'\s*(\+|&|~)\s*inside\s*\(\w+\)'), str(new_stmt), str(ast))
                    
        return vtools.parse(new_ast)

    def check_ast(self, ast):
        # verify if the AST is valid
        if not isinstance(ast, AstNode):
            raise ValueError("AST must be an instance of 'AstNode'")
