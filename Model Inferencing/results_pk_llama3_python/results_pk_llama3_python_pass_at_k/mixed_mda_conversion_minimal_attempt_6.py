# Generated by Ollama Llama 3
# Task: mixed_mda_conversion_minimal
# Attempt: 6
# Success: False
# Overall Score: 0.522

import sys
sys.path.append('../')
from veriloggen import *

import pyverilog.vparser.parser as parser
import re

def _is_list(name):
    match = re.match(r'\w*\[\d+\]\s*(\w*)', name)
    if match is not None:
        return True
    else:
        return False

def _is_assoc_array(name):
    match = re.match(r'assoc\s*([\w]+)\[\]', name)
    if match is not None:
        return True
    else:
        return False

def convert_arrays(m, args):

    print('convert_arrays')

    # Parse the AST
    vfile = m.vfile
    ast = parser.parse(vfile.read())
    root = ast.node
    visitor = ArrayVisitor()

    def visit(node):
        if _is_list(node.name) or _is_assoc_array(node.name):
            node.accept(visitor)
        for child in node.children:
            visit(child)

    visit(root)

def convert_arrays_to_mixed_mdas(vfile, args):

    # Parse the AST
    ast = parser.parse(vfile.read())
    root = ast.node

    visitor = ArrayVisitor()
    vfile.write(visit(root))

class ArrayVisitor:

    def __init__(self):
        self.m = None

    def visit(self, node):
        if isinstance(node, parser.AssignmentStatement):
            # print('ASSIGNMENT', node)
            pass
        elif isinstance(node, parser.Declaration):
            # print('DECLARATION', node)
            pass
        elif isinstance(node, parser.ModuleInstance):
            # print('MODULE_INSTANCE', node)
            pass
        elif isinstance(node, parser.PortList):
            # print('PORT_LIST', node)
            pass
        elif isinstance(node, parser.FunctionStatement):
            # print('FUNCTION_STATEMENT', node)
            pass
        else:
            if _is_list(node.name) or _is_assoc_array(node.name):
                # print('VAR', node)
                self.visit_var(node)

    def visit_var(self, node):

        if not self.m.args.var2mdu:
            return

        name = node.name.strip()

        is_list = _is_list(name)
        is_assoc_array = _is_assoc_array(name)
        
        if is_assoc_array and not is_list: # assoc array to mixed multi dimensional array
            # print('ASSOC ARRAY TO MIXED MDA', name)

            # Remove the keyword 'assoc'
            name = re.sub(r'assoc\s*', '', name)

            # Add fixed dimension syntax
            name += '[0:0]'

        if is_list and not is_assoc_array: # list to mixed multi dimensional array
            # print('LIST TO MIXED MDA', name)
            
            # Remove the last number
            match = re.match(r'\w*\[\d+\]\s*(\w*)', name)
            if match:
                name = match.group(1)

        if self.m.args.var2mdu == True and (is_list or is_assoc_array):
            vfile.write(name + '\n')