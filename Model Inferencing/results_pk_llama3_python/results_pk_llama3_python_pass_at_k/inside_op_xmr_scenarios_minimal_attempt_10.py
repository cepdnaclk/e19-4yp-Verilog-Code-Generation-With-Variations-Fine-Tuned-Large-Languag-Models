# Generated by Ollama Llama 3
# Task: inside_op_xmr_scenarios_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.432

import pyverilog.ast as ast
from pyverilog.parser import parse
from pyverilog.gen import generate
import re

def xform_ast(ast_node):
    if isinstance(ast_node, ast.NodeVisitor):
        return False
    elif isinstance(ast_node, ast.Module):
        for decl in ast_node.decl:
            if isinstance(decl, (ast.Interface, ast.Class)):
                xform_interface_class(decl)
        generate(ast_node)

def xform_interface_class(interface_or_class_node):
    if isinstance(interface_or_class_node, ast.Interface):
        for port_decl in interface_or_class_node.portlist:
            xform_port(port_decl)
    elif isinstance(interface_or_class_node, ast.Class):
        for port_list in interface_or_class_node.portlists:
            xform_port(port_list)

def xform_port(port_decl):
    if isinstance(port_decl, (ast.Port, ast.Parameter)):
        decl_type = 'port'
    else: 
        raise ValueError('Port declaration is not valid')
    port_name = port_decl.name
    if isinstance(port_decl, ast.Port):
        port_direction = 'in' if port_decl.direction == 'input' else 'out'
    elif isinstance(port_decl, ast.Parameter):
        port_direction = 'parameter'
    else:
        raise ValueError('Port declaration is not valid')
    
    # handle cross-module references
    if re.search(r'\s+interface\s+\w+\.', port_name):
        port_name = f'<{port_name}>'

    print(f'{decl_type} {port_name}: {port_direction}')

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help='Verilog file to analyze')
    args = parser.parse_args()

    with open(args.filename) as f:
        text = f.read()

    ast_node = parse(text)
    xform_ast(ast_node)

if __name__ == '__main__':
    main()