# Generated by Ollama Llama 3
# Task: inside_op_array_usage_minimal
# Attempt: 1
# Success: False
# Overall Score: 0.558

import sys 
sys.path.append('../') # add parent directory to path
from pyverilog.ast_tools import  ast_helper, pattern

# import required modules
import re
import argparse

# create parser object
parser = argparse.ArgumentParser()
parser.add_argument(
    'input_file', help='Input file')
args = parser.parse_args()

# set input and output files
input_file = args.input_file

with open(input_file) as f:
  ast_string = f.read()

ast = ast_helper.loads(ast_string)

class ArrayInVisitor(pattern.Visitor):
 
  def __init__(self, array_name): 
    self.array_name = array_name
  
  def visit_Assignment(self, node):  
    # check for assignment of index
    if isinstance(node.rvalue, pattern.ArrayIndex) and \
      node.lhs.name == self.array_name:
        print('Found array in inside operator!') 

class ArrayOutVisitor(pattern.Visitor):
 
  def __init__(self, array_name): 
    self.array_name = array_name
  
  def visit_Assignment(self, node):  
    # check for assignment of index
    if isinstance(node.lhs, pattern.ArrayIndex) and \
      node.lhs.name == self.array_name:
        print('Found array in inside operator!') 

if __name__ == '__main__':
  try: 
    ArrayInVisitor('my_array')(ast)
    ArrayOutVisitor('my_array')(ast)
  except Exception as e:
    sys.exit(e)