# Generated by Ollama Llama 3
# Task: module_name_change_minimal
# Attempt: 9
# Success: False
# Overall Score: 0.555

import pyverilog.ast.tools as vtools
import re
import argparse


class RenameModuleVisitor(vtools.Visitors):
    def __init__(self, old_name, new_name):
        super().__init__()
        self.old_name = old_name
        self.new_name = new_name

    def visit_module(self, node):
        if node.name == self.old_name:
            node.name = self.new_name
            vtools.replace_all(node, self.old_name, self.new_name)
            endmodule = vtools.find_endmodule_comments(node)
            for comment in endmodule:
                if self.new_name in comment.content:
                    comment.content = re.sub(
                        r'(\s{2})'+self.old_name+r'(\s{1}|\n|$)',
                        r'\g<1>'+self.new_name+r'\g<3>',
                        comment.content
                    )
            return True

    def visit_comment(self, node):
        if self.visit_module(node.parent) == False:
            return False


def transform(old_name, new_name, filename):
    visitor = RenameModuleVisitor(old_name, new_name)
    parser = vtools.parse_file(filename)
    success = vtools.apply_visitor(parser.ast, visitor)

    if not success:
        print("Transformation failed")

if __name__ == "__main__":
    # Parse the command line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help='Input file path')
    parser.add_argument('old_name', help="Old module name")
    parser.add_argument(
        'new_name',
        help="New module name"
    )
    args = parser.parse_args()

    transform(args.old_name, args.new_name, args.filename)