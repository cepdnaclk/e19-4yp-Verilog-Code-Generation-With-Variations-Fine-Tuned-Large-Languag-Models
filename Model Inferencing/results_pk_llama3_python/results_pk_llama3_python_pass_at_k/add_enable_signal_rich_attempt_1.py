# Generated by Ollama Llama 3
# Task: add_enable_signal_rich
# Attempt: 1
# Success: True
# Overall Score: 0.682

import argparse
import re
from pyverilog.ast import *

class AddEnableSignalVisitor(NodeVisitor):

    def __init__(self, signal_name):
        self.signal_name = signal_name
        self.changes_made = []
        self.signal_found = False

    def visit(self, node):
        if isinstance(node, Node):
            # Check for target declarations
            if isinstance(node, Decl):
                for item in node.list:
                    if hasattr(item, "name") and item.name == self.signal_name:
                        self.signal_found = True
                        self.changes_made.append(f"Found {self.signal_name}")

            # Visit children
            for c in node.children():
                self.visit(c)

def transform_add_enable_signal(input_file, output_file, signal_name):
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    visitor = AddEnableSignalVisitor(signal_name)
    visitor.visit(ast)

    if not visitor.signal_found:
        print(f"{signal_name} not found.")
        return False

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    pattern = r"(?s)(?:(\n\s*assign|(\s)?)\n)+?\bcounter\b\s*(<=\s*)?\b(counter\s*\+\s+1)\b"
    replacement = r"\g<1>\n\n\tif (enable == 1) {\n\t\tcounter <= counter + 1;\n\t}"

    # Apply changes...
    modified_content = re.sub(pattern, replacement, content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Add enable signal to control a counter"
    )
    parser.add_argument("input", help="Verilog file")
    parser.add_argument("output", help="Output Verilog file")

    args = parser.parse_args()

    if transform_add_enable_signal(args.input, args.output, "enable"):
        print(f"Transformation successful for {args.input}.")

    else:
        print(f"Error occurred during transformation of {args.input}")