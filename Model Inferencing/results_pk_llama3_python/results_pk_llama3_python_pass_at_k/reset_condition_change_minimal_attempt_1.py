# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 1
# Success: False
# Overall Score: 0.452

import pyverilog.ast.utils.visitor as vutils
from pyverilog.ast import *
from re import sub, MULTILINE

def reset_high_to_low(root):
    visitor = ResetHighToLowVisitor()
    root.accept(visitor)
    return visitor.results

class ResetHighToLowVisitor(vutils.BaseVisitor):
    def __init__(self):
        self.results = True
        super(ResetHighToLowVisitor,self).__init__()

    # Handle if statements
    def visit_if(self, node):
        if isinstance(node.expr, Constant) and node.expr.value == "1":
            if not self.visit(node.ifpart): return False
            if isinstance(node.elsepart, IfPart):
                if not self.visit(node.elsepart): return False

        elif isinstance(node.expr, Constant) and node.expr.value == "0":
            if not self.visit(node.elsepart): return False
            if isinstance(node.ifpart, IfPart):
                if not self.visit(node.ifpart): return False
        
        return True

    # Handle sensitivity lists    
    def visit_posedge(self, node):
        if not self.visit(node.node): return False
        new_node = NegEdge(node.node)
        return self.replace_node_in_parent(new_node)

    def visit_negedge(self, node):
        if not self.visit(node.node): return False
        new_node = PosEdge(node.node)
        return self.replace_node_in_parent(new_node)


def replace_node_in_parent(old_node, new_node):
    def replace_node(parent, old_node, new_node):
        # Base case: If the parent is a Node (e.g. module), then 
        # do nothing
        if isinstance(parent, Node): pass

        # Recursive case: Replace each child node with its transformed equivalent
        elif isinstance(parent, Module) or \
             isinstance(parent, Always) or \
             isinstance(parent, Initial):
            for i in range(len(parent.nodes)):
                replace_node(parent.nodes[i], old_node, new_node)

        elif isinstance(parent, IfPart) or isinstance(parent, Elsepart):
            replace_node(parent.cond, old_node, new_node)
            replace_node(parent.body, old_node, new_node)

        else:
            print("Error: Unhandled parent type:", parent.__class__)

    # Replace all occurrences of the old node with its transformed equivalent
    return True