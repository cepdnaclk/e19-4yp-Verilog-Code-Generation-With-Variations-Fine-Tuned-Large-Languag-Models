# Generated by Ollama Llama 3
# Task: module_name_change_minimal
# Attempt: 3
# Success: False
# Overall Score: 0.525

import argparse

from pyverilog.ast import *

class FindModuleNameTransformer(ASTVisitor):
    def __init__(self, old_name, new_name, file_path):
        self.old_name = old_name
        self.new_name = new_name
        self.file_path = file_path
    
    def visit_Module(self, node):
        if node.name == self.old_name:
            self.replace_module_name(node)
    
    # Replace the module name in the declaration
    def replace_module_name(self, node): 
        old_declaration = f'{node.name} '
        new_declaration = f'{self.new_name}'
        
        node.name = self.new_name
        node.portlist = [AstPort(port.name) for port in node.portlist]
        
        # Update endmodule comment if it references the module name    
        comments = node.comments
        
        if any(comment.value == old_declaration for comment in comments):
            new_comment = f'// {new_declaration} \n'
            
            if comments[0].value != new_comment:
                comments.insert(0, AstComment(new_comment))
        
    def visit_File(self, node):    
        self.visit(node.module)

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-f', '--file_path', required=True)
    parser.add_argument('-n1', '--old_name')
    parser.add_argument('-n2', '--new_name')

    args = parser.parse_args()

    file_path = args.file_path
    old_name = args.old_name
    new_name = args.new_name

    if old_name is None or new_name is None:
        raise ValueError('Missing arguments -n1 and -n2')
    
    try: 
        ast_node = parse(file_path)
        transformer = FindModuleNameTransformer(old_name, new_name, file_path)
        
        result = transformer.visit(ast_node) 

        if result == True:
            print(f'{old_name} has been replaced with {new_name}')
            
    except PyVerilogError as e: 
        print(e)

if __name__ == '__main__':
    main()