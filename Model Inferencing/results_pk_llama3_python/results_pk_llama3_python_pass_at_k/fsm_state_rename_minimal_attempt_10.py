# Generated by Ollama Llama 3
# Task: fsm_state_rename_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.572

import pyverilog.ast as ast
import re

class RenameFSMStates(ast.Visitor):
    def __init__(self, old_prefix, new_prefix): 
        self.old_prefix = old_prefix
        self.new_prefix = new_prefix
        
    def visit_Param(self, node):
        if 'prefix' in dir(node) and \
            node.prefix == self.old_prefix:
                return ast.Param(old=ast.Identifier(name=new_prefix), **node.__dict__)
        else: 
            return super().visit(node)

    def visit_EnumConstantList(self, node): 
        for enum_const in node.enumeration.constant_list:
            if enum_const.name == old_prefix:
                name = new_prefix
            else: 
                name = enum_const.name
            enum_const.name = ast.Identifier(name=name)
        return node
    
    def visit_CaseStatement(self, node):
        for c in node.cases:
            if c.cond is not None and isinstance(c.cond.left, ast.EnumConstantRef) and c.cond.right == old_prefix:
                c.cond.left.enum_id = new_prefix
        return super().visit(node)
    
    def visit_AssignmentStatement(self, node): 
        if isinstance(node.lhs, ast.EnumConstantRef):
            if node.lhs.constant_name == old_prefix:
                node.lhs.constant_name = new_prefix
        return super().visit(node)

    def visit_CompExpr(self, node):
        for c in node.compares:  
            if isinstance(c.left, ast.EnumConstantRef) and c.left.constant_name == old_prefix:
                c.left.constant_name = new_prefix  
        return super().visit(node)
    
def transform(old_prefix, new_prefix): 
    try:
        visitor = RenameFSMStates(old_prefix, new_prefix)
        ast_file = pyverilog.parse(open("example.v").read())
        transformed_ast = ast_file.accept(visitor) 
        out_str = str(transformed_ast)
        
        # Validate transformation
        if old_prefix not in out_str and new_prefix not in out_str:
            print('Transformation failed')
            return False

        # Write output to a file
        with open("transformed.v", 'w') as f: 
            f.write(out_str)

        # Return True for success
        return True
        
    except Exception as e:
        # Print error and return False on failure
        print(e)
        return False
    
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("-o", "--old_prefix", help="Old FSM state name prefix")
    parser.add_argument("-n", "--new_prefix", help="New FSM state name prefix")
    args = parser.parse_args()

    if not (args.old_prefix and args.new_prefix):
        print("Usage: python transform_fsm_states.py -o <old_prefix> -n <new_prefix>")
        exit()
    
    success = transform(args.old_prefix, args.new_prefix)
    exit(success)