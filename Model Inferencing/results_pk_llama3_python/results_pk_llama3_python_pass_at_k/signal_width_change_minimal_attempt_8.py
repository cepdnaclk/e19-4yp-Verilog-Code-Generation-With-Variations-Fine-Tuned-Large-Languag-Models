# Generated by Ollama Llama 3
# Task: signal_width_change_minimal
# Attempt: 8
# Success: False
# Overall Score: 0.398

import pyverilog.vparser.ast as ast
from pyverilog.vparser import parse
from pyverilog.vparser.formatter import Formatter


def replace_bitwidth(filename, old_width, new_width):
    """Replace bit width of a signal."""

    # Parse Verilog file
    vfile = open(filename)
    content = vfile.read()
    ast_tree = parse(content)

    # Find all declarations with existing width
    decl_list = []
    for node in ast_tree.traverse():
        if isinstance(node, ast.Declaration):
            decl_list.append(node)

    # Replace bit widths 
    for decl_node in decl_list:
        if decl_node.width == old_width:
            new_decl_node = decl_node.clone()
            new_decl_node.width = new_width
            decl_node.replace(new_decl_node)
            print("Successfully replaced bit width of '{}' from {} to {}".format(
                decl_node.name, old_width, new_width))

    # Write output file
    formatter = Formatter(indent_level=4)
    output_file = open('output.v', 'w')
    formatted_output = formatter.visit(ast_tree)
    output_file.write(formatted_output)
    print("Output written to output.v")


def main():
    """Command-line interface."""
    import argparse

    parser = argparse.ArgumentParser(
        description='Replace bit width of a signal.')
    parser.add_argument('filename', help='input file')
    parser.add_argument('-w1', '--old_width',
                        default=8, type=int,
                        help='Old signal width (default: 8)')
    parser.add_argument('-w2', '--new_width',
                        default=32, type=int,
                        help='New signal width (default: 32)')

    args = vars(parser.parse_args())

    replace_bitwidth(args['filename'], args['old_width'],
                     args['new_width'])


if __name__ == '__main__':
    main()