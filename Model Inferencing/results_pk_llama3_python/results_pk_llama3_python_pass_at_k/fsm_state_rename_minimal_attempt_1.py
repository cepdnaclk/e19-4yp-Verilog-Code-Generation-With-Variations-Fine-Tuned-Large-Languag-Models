# Generated by Ollama Llama 3
# Task: fsm_state_rename_minimal
# Attempt: 1
# Success: False
# Overall Score: 0.525

import sys 
sys.path.append('../') # add parent directory to path

from pyverilog.ast.utils.visitor import *
from pyverilog.parser import parse
from pyverilog.ast import *

def rename_fsm_states(ast, old_prefix, new_prefix):
    '''Rename all states that match the prefix pattern'''
    
    class FSMStatesRenamer(ASTVisitor):

        def __init__(self):
            self.states = []

        def visit_Assignment(self, node):
            # Find assignments to state variables
            if node.lhs.value and type(node.lhs.value) is str and node.lhs.value.startswith(old_prefix):
                self.states.append((node.lhs.value, new_prefix + node.lhs.value[len(old_prefix):]))
                
            ASTVisitor.visit_Assignment(self, node)
        
        def visit_IfStmt(self, node):
            # Find case statements
            if len(node.else_case) == 0 and type(node.cases[0].expr) is EnumConst:
                self.states.append((node.cases[0].expr.value.value, new_prefix + node.cases[0].expr.value.value[len(old_prefix):]))

            ASTVisitor.visit_IfStmt(self, node)
        
        def visit_CaseStatement(self, node):
            # Find case statements
            if type(node.expr) is EnumConst:
                self.states.append((node.expr.value.value, new_prefix + node.expr.value.value[len(old_prefix):]))
                
            ASTVisitor.visit_CaseStatement(self, node)

    renamer = FSMStatesRenamer()

    for state in ast.traverse(renamer):
        pass
    
    return True

def main():
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('file')
    args = parser.parse_args()

    with open(args.file) as f:
        verilog_ast = parse(f.read())

    if not rename_fsm_states(verilog_ast, 'old_state', 'new_state'):
        print("Transformation failed.")
    else:
        print("Successfully transformed.")

if __name__ == '__main__':
    main()