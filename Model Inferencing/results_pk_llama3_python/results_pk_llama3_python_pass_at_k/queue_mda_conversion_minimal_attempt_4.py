# Generated by Ollama Llama 3
# Task: queue_mda_conversion_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.378

import re
from pyverilog.ast import *
from pyverilog.utils import *
from pyverilog.vltypes.utils import *

def find_fixed_arrays(ast, result):
    if isinstance(ast, ASTNode): 
        for child in ast.children:
            find_fixed_arrays(child, result)
    
    elif isinstance(ast, FixedArrayDeclaration) or isinstance(ast, VariableDeclaration) or isinstance(ast, ParameterDeclaration):
        # We only care about variable declarations
        if (isinstance(ast, VariableDeclaration)):
            fixed_array_declaration = ast
            
            if (fixed_array_declaration.declaration_type == 'constant'):
                # Don't transform constants as they are unchangeable 
                return

        if (ast.fixed_array_dimensions != []):
            result.append(ast)

    elif isinstance(ast, ASTNode): 
        for child in ast.children:
            find_fixed_arrays(child, result)


def xform_fixed_array_to_queue(ast):
    """
    FixedArrayDeclaration -> QueueDeclaration
    VariableDeclaration  -> QueueDeclaration
    ParameterDeclaration -> QueueDeclaration
    """

    # Find all fixed arrays and their dimensions
    dimensions = []
    results = []
    find_fixed_arrays(ast, results)

    for result in results:
        if isinstance(result, VariableDeclaration):
            # We only care about variable declarations 
            continue

        if (result.fixed_array_dimensions != []):
            dimensions.append(result.fixed_array_dimensions[0])

    # Find the most common dimension size
    max_dimension = 8
    if dimensions != []:
        max_dimension = max(dimensions)

    for result in results:
        if isinstance(result, VariableDeclaration):
            # We only care about variable declarations 
            continue

        if (result.fixed_array_dimensions != []):
            
            # Check if the dimension is unbounded and make it bounded
            if (result.fixed_array_dimensions[0].unbounded == True):
                result.fixed_array_dimensions[0].bound = max_dimension
            
            else:
                
                # Add $ for queue syntax 
                # Make sure to keep the original size 
                new_size = '[$]'
                if (max_dimension > 8):
                    new_size += ':{}'.format(max_dimension)

                temp = VariableDeclaration(name=result.name, dimension=new_size, declaration_type=result.declaration_type)
                results.append(temp) 

    return results

def xform_fixed_array_to_queue_cli():
    
    # Get arguments
    parser = argparse.ArgumentParser(description='Converts fixed arrays to queue-based multi-dimensional arrays.')
    parser.add_argument('-i', '--input', type=str, help='Input Verilog file')
    args = parser.parse_args()

    if (args.input == None):
        print("Usage: python xform_fixed_array_to_queue.py -i [INPUT FILE] ")
        exit()
    
    # Parse and analyze the AST
    data = parse_file(args.input)
    ast = data.ast

    # Perform transformation
    results = xform_fixed_array_to_queue(ast)

    if (results != []):
        print("Converted fixed arrays to queue-based multi-dimensional arrays:")
        for result in results:
            print(result)
    
    else:
        print("No fixed arrays found")

if __name__ == "__main__":
    xform_fixed_array_to_queue_cli()