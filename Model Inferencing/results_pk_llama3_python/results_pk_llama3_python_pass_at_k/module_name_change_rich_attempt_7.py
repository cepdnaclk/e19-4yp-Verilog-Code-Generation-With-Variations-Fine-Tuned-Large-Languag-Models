# Generated by Ollama Llama 3
# Task: module_name_change_rich
# Attempt: 7
# Success: False
# Overall Score: 0.462

"""Transform module name for a given file.

Example usage: python3 transform.py --file=example.v --name=new_name

"""

import argparse
from pyverilog.ast import *

# Parser to find all declarations of old_name.
def find_declaration(ast, old_name):
    for node in ast.children():
        if isinstance(node, Decl) and node.name == old_name:
            return node
        else:
            # Recursively call children.
            decl = find_declaration(node, old_name)
            if decl is not None:
                return decl

# Regex to replace all occurrences of old_name with new_name.
def replace_regex(content, old_name, new_name):
    pattern = r'\b' + old_name
    replacement = new_name
    modified_content = re.sub(pattern, replacement, content)
    return modified_content

# Main function to perform transformation and write output.
def transform(input_file, output_file, old_name, new_name):
    # Parse AST and find declaration of module with old name.
    ast, directives = parse([input_file])
    decl = find_declaration(ast, old_name)

    # Modify port list.
    ports_list = decl.portlist
    for i in range(len(ports_list)):
        if isinstance(ports_list[i], Port):
            ports_list[i].name = new_name + "_" + ports_list[i].name

    # Replace module name with new one and update endmodule comments.
    modified_content = replace_regex(content, old_name, new_name)

    # Write output file.
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--file', type=str,
                        help='File to be transformed')
    parser.add_argument('--old_name', type=str,
                        help='Old module name to be replaced')
    parser.add_argument('--new_name', type=str,
                        help='New module name to replace old one with')

    args = parser.parse_args()

    input_file = args.file
    output_file = input_file + "_modified.v"
    old_name = args.old_name
    new_name = args.new_name

    transform(input_file, output_file, old_name, new_name)