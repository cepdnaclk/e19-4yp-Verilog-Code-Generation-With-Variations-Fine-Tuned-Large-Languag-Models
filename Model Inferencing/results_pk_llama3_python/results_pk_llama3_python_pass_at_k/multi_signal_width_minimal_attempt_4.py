# Generated by Ollama Llama 3
# Task: multi_signal_width_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.462

import sys
import re
from pyverilog.ast import *
from pyverilog.vexpr.regex import _REGEX

class BitWidthXformVisitor(ASTVisitor):
    def __init__(self, signal_names, new_widths):
        self.signal_names = signal_names
        self.new_widths = new_widths
    
    def visit_port(self, node):
        for port in node.port_list:
            if port.name in self.signal_names:
                self.update_bitwidth(port)
    
    def update_bitwidth(self, port):
        if isinstance(port.width_spec, AstWidthSpecUnpacked) or \
           isinstance(port.width_spec, AstWidthSpecPacked):
            port.width_spec = AstWidthSpecUnpacked(port.width_spec.bits + 
                                                   len(self.new_widths[port.name]) -
                                                   1)
        elif isinstance(port.width_spec, AstWidthSpecArray): 
            # Handle unpacked arrays
            index = self.signal_names.index(port.name)
            old_width_bits = port.width_spec.bits
            new_width_bits = int('0b' + ''.join(self.new_widths[port.name]), 
                                 2) - 1

            if old_width_bits != new_width_bits:
                port.width_spec = AstWidthSpecUnpacked(new_width_bits)

        elif isinstance(port.width_spec, WidthSpec): # Handle packed arrays
            index = self.signal_names.index(port.name)
            old_width_bits = port.width_spec.bits
            new_width_bits = int('0b' + ''.join(self.new_widths[port.name]), 
                                 2) - 1

            if old_width_bits != new_width_bits:
                port.width_spec = WidthSpec(new_width_bits)

def bitwidth_xform(input, signal_names, new_widths):
    visitor = BitWidthXformVisitor(signal_names, new_widths)
    return visitor.visit(AST.parse(input))

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Generate a transformation module for the xforms framework')
    parser.add_argument('input', type=str, help='Input Verilog file')
    parser.add_argument('--signals', nargs='+', required=True,
                        metavar=('signal_name'), 
                        help='List of signal names to modify')
    parser.add_argument('--new_widths', nargs='+', required=True,
                        metavar=('width'), 
                        help='New bit width for each signal')

    args = parser.parse_args()

    print(bitwidth_xform(open(args.input).read(), 
                          args.signals, args.new_widths))