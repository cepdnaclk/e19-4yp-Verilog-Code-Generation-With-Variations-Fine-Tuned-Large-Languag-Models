# Generated by Ollama Llama 3
# Task: signal_width_change_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.488

"""Transforms a signal's bit width specification."""
import pyverilog.ast as ast
from pyverilog.vparser.parser import parseFile
from xforms.visitor import Visitor

# Replace bitwidth of signals in Verilog file
def transform(file, old_width, new_width):
    # Parse the input verilog code
    root = parseFile(file)
    
    visitor = TransformVisitor(old_width, new_width) 
    # Find all signals with specified width and change it to a new one 
    visitor.visit(root)

    # Create transformed Verilog AST object from parsed source code
    transform_ast = root.transform(visitor.ast_transform)
    
    # Write the modified code back to file
    transform_ast.write(file)


class TransformVisitor(Visitor):
    def __init__(self, old_width, new_width):
        self.old_width = old_width
        self.new_width = new_width

    def ast_transform(self, node): 
        """Transform a signal's bit width specification."""
        # Identify signals with the specified width
        if isinstance(node, ast.Declaration):
            for sig in node.decls:
                if isinstance(sig, ast.Wire) or isinstance(sig, ast.Reg) or isinstance(sig, ast.Input):
                    if sig.width == self.old_width and sig.name.value not in ['clk', 'rst']:
                        # Change the width of signal
                        print('Changing bitwidth of: ', sig.name)
                        sig.width = self.new_width

        return node