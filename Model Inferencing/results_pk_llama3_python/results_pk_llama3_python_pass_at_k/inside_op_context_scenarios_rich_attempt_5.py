# Generated by Ollama Llama 3
# Task: inside_op_context_scenarios_rich
# Attempt: 5
# Success: False
# Overall Score: 0.525

from pyverilog.ast import *
import re


def inside_visitor(signal_name):
    def visit(self, node):
        if isinstance(node, Node):
            # Check for target declarations
            if isinstance(node, Decl):
                for item in node.list:
                    if hasattr(item, "name") and item.name == signal_name:
                        self.signal_found = True
                        self.changes_made.append(f"Found {signal_name}")
                    
            # Visit children
            for c in node.children():
                self.visit(c)

    return visit


def transform_inside(input_file, output_file, signal_name):
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    visitor = ExampleVisitor(signal_name)
    visitor.visit(ast)

    # Perform regex transformations

    with open(input_file, "r") as f:
        content = f.read()
    
    inside_regex = r"(if\(\s*([\w\.]+)\s*(inside\s*\(([\w\.]*))\))"  # If <signal> (inside (<block>))
    case_inside_regex = r"(case\s*\(((.+)\s*)\s*(inside\s*\(([\w\.]*))\))"  # Case ((<expression>) inside (<block>))
    
    def replace_inside(match):
        group1 = match.group(1)
        group2 = match.group(2)
        block_name = group2.split("(")[0]
        
        if "always_comb" in content:
            case_block = f"{block_name} always_comb"
        else:
            case_block = f"case ({group2})"

        return f"{group1} {case_block}"

    def replace_case_inside(match):
        group1 = match.group(1)
        group2 = match.group(2)  # Expression
        block_name = match.group(3)  # Block name
        
        if "always_comb" in content:
            case_block = f"{block_name} always_comb"
        else:
            case_block = f"case ({group2})"

        return f"{group1} {case_block}"

    modified_content = re.sub(pattern=inside_regex, repl=replace_inside, string=content)
    modified_content = re.sub(pattern=case_inside_regex, repl=replace_case_inside, string=modified_content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("input", help="Input file")
    parser.add_argument("output", help="Output file")
    args = parser.parse_args()

    transform_inside(args.input, args.output, "inside")

if __name__ == "__main__":
    main()