# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 1
# Success: False
# Overall Score: 0.572

import re

def transform(input_file, output_file):
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    class ResetVisitor:
        def __init__(self, reset_type):
            self.reset_type = reset_type
            self.changes_made = []

        def visit(self, node):
            if isinstance(node, Node):
                for c in node.children():
                    self.visit(c)

                # Check for target declarations
                if isinstance(node, If):
                    condition = node.condition
                    if isinstance(condition, Condition) and 'rst' in [i.name for i in condition.list]:
                        # Change reset condition from active-high to active-low or vice versa 
                        if self.reset_type == "low":
                            change_to_low = re.sub(r'\(\!rst\)', '(rst)', str(condition))
                            modified_condition = If(change_to_low)
                        elif self.reset_type == "high":
                            change_to_high = re.sub(r'\(rst\)', '\(!rst\)', str(condition))
                            modified_condition = If(change_to_high)

                        # Update sensitivity lists (posedge to negedge)
                        if 'posedge' in [i.type for i in node.list]:
                            if self.reset_type == "low":
                                change_list = re.sub(r'\(posedge rst\)', '(negedge rst)', str(node))
                            elif self.reset_type == "high":
                                change_list = re.sub(r'\(negedge rst\)', '(posedge rst)', str(node))
                        else:
                            if self.reset_type == "low":
                                change_list = re.sub(r'\(negedge rst\)', '(posedge rst)', str(node))
                            elif self.reset_type == "high":
                                change_list = re.sub(r'\(posedge rst\)', '(negedge rst)', str(node))

                        # Update code
                        modified_code = re.sub(re.compile(str(condition)), str(modified_condition), str(node))

                    else:
                        continue

                return modified_code

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    visitor = ResetVisitor(reset_type="low")
    modified_content = visitor.visit(ast)

    with open(output_file, "w") as f:
        f.write(modified_content)
    
    return True