# Generated by Ollama Llama 3
# Task: signal_rename_minimal
# Attempt: 3
# Success: False
# Overall Score: 0.475

import argparse

from pyverilog.ast import *

from pyverilog.ast.utils.visitor import ASTVisitor


class RenameSignals(ASTVisitor):
    def __init__(self, old_name, new_name):
        self.old_name = old_name
        self.new_name = new_name
    
    def visit_declaration(self, node):        
        if 'signal' in str(node.type) and node.id == self.old_name:
            return Declaration(type=ASTType(id=self.new_name), *node.args)
        else:
            return super().visit_declaration(node)
    
    def visit_assignment(self, node):
        if node.lhs.id == self.old_name:
            new_node = Assignment(lhs=Node(id=self.new_name), *node.args) 
            return new_node
        else:            
            return super().visit_assignment(node)
    
    def visit_reference(self, node):        
        if str(node.ref) == self.old_name:
            return Reference(Node(id=self.new_name))
        else:                        
            return super().visit_reference(node)
        

def main(old_name, new_name):
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help='the verilog file to transform')
    
    args = parser.parse_args()    

    with open(args.filename) as f:
        module = parse(f.read())
        
    transformer = RenameSignals(old_name, new_name)
    transformed_module = transformer.visit(module)

    with open(args.filename+'.new', 'w') as f: 
        print(transformed_module.to_string(), file=f)