# Generated by Ollama Llama 3
# Task: module_name_change_minimal
# Attempt: 7
# Success: False
# Overall Score: 0.432

"""
This is a script to transform module names throughout the file.

Usage: 
    python <script> --input <file_name> --output <output_file>

Arguments:
    -i, --input      Input file name
    -o, --output     Output file name

"""

import argparse
from pyverilog.ast import *

def find_module(module_list, module_name):
    for m in module_list:
        if(m.name == module_name):
            return m

def replace_module_names(module_list, old_name, new_name):
    for m in module_list:
        if(m.name == old_name):
            m.name = new_name
    # Update endmodule comments if they reference the module name
    for c in module_list: 
        if isinstance(c, Comment) and (c.text == "endmodule" or 
                c.text == "endmodule //"):
            comment = c
            break

    old_text = str(comment)
    new_text = old_text.replace(old_name, new_name)

    # Update endmodule comments with the new module name
    if(new_text != old_text):
        comment.text = new_text

def main():
    parser = argparse.ArgumentParser(description='Module name transformer')
    parser.add_argument('-i', '--input', type=str, required=True)
    parser.add_argument('-o', '--output', type=str, required=True)

    args = parser.parse_args()

    # Parse the input file
    with open(args.input) as f:
        tree = AST.from_file(f)

    # Find the module declaration and replace its name 
    module_list = tree.find_all(ASTModule)
    old_name = "old_module"
    new_name = "new_module"

    find_module(module_list, old_name).name = new_name

    # Update endmodule comments if they reference the module name
    for c in tree:
        if isinstance(c, Comment) and (c.text == "endmodule" or 
                c.text == "endmodule //"):
            comment = c
            break

    old_text = str(comment)
    new_text = old_text.replace(old_name, new_name)

    # Update endmodule comments with the new module name
    if(new_text != old_text):
        comment.text = new_text

    # Write the output file
    with open(args.output, 'w') as f:
        tree.write(f)

if __name__ == '__main__':
    main()