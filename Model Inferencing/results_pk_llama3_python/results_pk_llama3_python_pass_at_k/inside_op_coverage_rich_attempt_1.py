# Generated by Ollama Llama 3
# Task: inside_op_coverage_rich
# Attempt: 1
# Success: True
# Overall Score: 0.622

import argparse
import pyverilog.ast as ast
from re import sub, search
import random
import logging


class CoverageVisitor(ast.NodeVisitor):
    def __init__(self, signal_name):
        self.signal_found = False
        self.changes_made = []
        self.signal_name = signal_name

    def visit_inside(self, node):
        if node.operator != 'inside':
            return
        
        # Check for target declarations
        if isinstance(node.left_decl, ast.Decl) and isinstance(node.right_decl, ast.Decl):
            left_item = [i for i in node.left_decl.list if hasattr(i, "name") and i.name == self.signal_name]
            right_item = [i for i in node.right_decl.list if hasattr(i, "name") and i.name == self.signal_name]

        # Check if inside is used
        if len(left_item) + len(right_item):
            self.changes_made.append(f"Found {self.signal_name}")

    def visit(self, node):
        if isinstance(node, ast.Node):
            for c in node.children():
                self.visit(c)
        elif isinstance(node, list):
            for child in node:
                self.visit(child)


def transform_coverage(input_file, output_file, signal_name):
    logging.info("Transforming coverage test cases...")
    
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    visitor = CoverageVisitor(signal_name)
    visitor.visit(ast)

    if not visitor.changes_made:
        return False

    modified_content = sub(r'inside \(.*?\)', r'inside \{random_value\}', input_file.read())

    with open(output_file, "w") as f:
        f.write(modified_content)

    logging.info("Coverage test cases generated successfully")
    
    return True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('input_file')
    parser.add_argument('output_file')
    args = parser.parse_args()

    if transform_coverage(args.input_file, args.output_file):
        print("Transformation successful")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    main()