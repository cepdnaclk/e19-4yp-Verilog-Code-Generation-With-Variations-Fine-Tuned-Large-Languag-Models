# Generated by Ollama Llama 3
# Task: array_base_type_change_minimal
# Attempt: 2
# Success: True
# Overall Score: 0.602

"""

""" 
TODO: Import pyverilog and related libraries
"""
import pyverilog
from pyverilog.parser import parse, ParserError
import re


class ArrayTypeChangeVisitor(pyverilog.ast.NodeVisitor):
    """ A visitor class that changes array base type """
    
    def __init__(self):
        self.base_type = ''
        self.new_base_type = ''

    @staticmethod
    def _match_regex(pattern, string):
        regex = re.compile(pattern)
        if not regex.search(string):
            return False
        else:
            return True

    # Visit array declarations and change the base type
    def visit_Decl(self, node): 
        if (self._match_regex('wire\s*\(.*\)\s*(.+)', str(node)) or 
                self._match_regex('reg\s*\(.*\)\s*(.+)', str(node))):
            # Find array declaration with current base type
            match = re.search('\((\w+)\s*,\s*(\d+)', node)
            if not match:
                print(f'Could not find dimensions for {node}')
                return False

            array_name = match.group(1).lower()
            dim_1 = int(match.group(2))
            dim_2 = 0
            base_type = match.group(3)

            # Replace base type (e.g., bit to logic, int to byte)
            if self.new_base_type == 'byte':
                base_type = 'byte'
            elif self.new_base_type == 'logic':
                base_type = 'logic'

            # Handle width specifications appropriately for new type
            dim_2_specified = False
            if base_type == 'byte' and not dim_2:
                match = re.search('\((\w+)\s*,\s*(\d+),(\d+)', str(node))
                if match:
                    dim_2 = int(match.group(3)) 
                    dim_2_specified = True
            elif base_type == 'logic' and not dim_2:
                match = re.search('\((\w+)\s*,\s*(\d+),(\d+)', str(node))
                if match:
                    dim_2 = int(match.group(3)) 
                    dim_2_specified = True

            # Preserve array dimensions and signal name
            new_node = pyverilog.ast.Decl(pyverilog.ast.Modifier(base_type, 
                                                                dim_1, dim_2), 
                                          array_name)

            return new_node

    def visit(self, node):
        self.generic_visit(node)
        return node


def main():
    # Parse command-line arguments
    parser = argparse.ArgumentParser(description='Array base type change xform')
    parser.add_argument('filename', help='input verilog file')
    parser.add_argument('--base_type', 
                        dest='base_type',
                        default='bit',
                        required=True,
                        help='current array base type (e.g., bit, int)')
    parser.add_argument('--new_base_type', 
                        dest='new_base_type',
                        default='logic',
                        required=True,
                        help='desired new array base type')

    args = parser.parse_args()

    # Open file and parse AST
    try:
        with open(args.filename) as f:
            file_contents = f.read()
        ast = parse(file_contents)
    except ParserError:
        print('Failed to parse file')
        return

    visitor = ArrayTypeChangeVisitor()
    visitor.base_type = args.base_type
    visitor.new_base_type = args.new_base_type
    transformed_ast = visitor.visit(ast)

    # Generate new verilog code and write it out
    new_code = pyverilog.codegen.CodeGenerator().generate(transformed_ast)
    with open(args.filename, 'w') as f:
        f.write(new_code)


if __name__ == '__main__':
    main()