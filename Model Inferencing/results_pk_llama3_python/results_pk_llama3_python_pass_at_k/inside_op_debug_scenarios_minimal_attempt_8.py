# Generated by Ollama Llama 3
# Task: inside_op_debug_scenarios_minimal
# Attempt: 8
# Success: False
# Overall Score: 0.575

import pyverlog as pvl
from re import findall
import argparse
import os


def create_test_cases(visitor, root, args):
    # Create a list of elements to be tested from the AST
    visitor.visit(root)

    for element in visitor.list:
        if isinstance(element, pvl.Node) and \
                not (isinstance(element, pvl.InterfacePort) or 
                     isinstance(element, pvl.Port)):

            print(f"Testing {element.name}:")

            # Generate a list of all possible value annotations
            test_cases = []
            for i in range(0, 2**len(element.nodes)):
                annotation = ""
                for bit in element.nodes:
                    if (i >> (len(element.nodes) - 1 - 
                             findall('\d+', str(bit))[0])) & 1 == 1:
                        annotation += "1"
                    else:
                        annotation += "x"

                test_cases.append((annotation, i))

            print(f"Value annotations: {test_cases}")

            # Generate a load trace
            load_trace = ""
            for bit in element.nodes:
                if isinstance(bit.value, pvl.Constant):
                    load_trace += f"{bit.value.val} "
                else:
                    load_trace += "x "

            print(f"Load trace: {load_trace}")

            # Generate a scountdriver
            scd_output = ""
            for bit in element.nodes:
                if (i >> 
                        (len(element.nodes) - 1 -
                         findall('\d+', str(bit))[0])) & 1 == 1:
                    scd_output += "1 "
                else:
                    scd_output += "x "

            print(f"Signal count driver output: {scd_output}")

            # Generate a SHDL XMR force test case
            xmr_test_case = ""
            for bit in element.nodes:
                if isinstance(bit.value, pvl.Constant):
                    xmr_test_case += f"{bit.value.val} "
                else:
                    xmr_test_case += "x "

            print(f"SHDL XMR force test case: {xmr_test_case}")

            # Generate a UCLI trace
            ucli_trace = ""
            for bit in element.nodes:
                if isinstance(bit.value, pvl.Constant):
                    ucli_trace += f"{bit.value.val} "
                else:
                    ucli_trace += "x "

            print(f"UCLI trace: {ucli_trace}")

            # Generate a VPI walker test case
            vpi_test_case = ""
            for bit in element.nodes:
                if isinstance(bit.value, pvl.Constant):
                    vpi_test_case += f"{bit.value.val} "
                else:
                    vpi_test_case += "x "

            print(f"VPI walker test case: {vpi_test_case}")
        elif isinstance(element, pvl.InterfacePort) or \
             isinstance(element, pvl.Port):

            print(f"Testing {element.name}:")

            # Generate a list of all possible value annotations
            test_cases = []
            for i in range(0, 2**len(element.nodes)):
                annotation = ""
                for bit in element.nodes:
                    if (i >> 
                            (len(element.nodes) - 1 -
                             findall('\d+', str(bit))[0])) & 1 == 1:
                        annotation += "1"
                    else:
                        annotation += "x"

                test_cases.append((annotation, i))

            print(f"Value annotations: {test_cases}")

            # Generate a load trace
            load_trace = ""
            for bit in element.nodes:
                if isinstance(bit.value, pvl.Constant):
                    load_trace += f"{bit.value.val} "
                else:
                    load_trace += "x "

            print(f"Load trace: {load_trace}")

            # Generate a scountdriver
            scd_output = ""
            for bit in element.nodes:
                if (i >> 
                        (len(element.nodes) - 1 -
                         findall('\d+', str(bit))[0])) & 1 == 1:
                    scd_output += "1 "
                else:
                    scd_output += "x "

            print(f"Signal count driver output: {scd_output}")

            # Generate a SHDL XMR force test case
            xmr_test_case = ""
            for bit in element.nodes:
                if isinstance(bit.value, pvl.Constant):
                    xmr_test_case += f"{bit.value.val} "
                else:
                    xmr_test_case += "x "

            print(f"SHDL XMR force test case: {xmr_test_case}")

            # Generate a UCLI trace
            ucli_trace = ""
            for bit in element.nodes:
                if isinstance(bit.value, pvl.Constant):
                    ucli_trace += f"{bit.value.val} "
                else:
                    ucli_trace += "x "

            print(f"UCLI trace: {ucli_trace}")

            # Generate a VPI walker test case
            vpi_test_case = ""
            for bit in element.nodes:
                if isinstance(bit.value, pvl.Constant):
                    vpi_test_case += f"{bit.value.val} "
                else:
                    vpi_test_case += "x "

            print(f"VPI walker test case: {vpi_test_case}")

class ValueAnnotationTestCases(pvl.Visitor):
    def __init__(self):
        self.list = []

    def visit_Node(self, node):
        if isinstance(node, pvl.Node) and not (isinstance(node, 
                                                      pvl.InterfacePort) or
                                                isinstance(node, pvl.Port)):
            for subnode in node.nodes:
                self.visit(subnode)
                if isinstance(subnode, pvl.Node) and \
                        not (isinstance(subnode, pvl.InterfacePort) or 
                             isinstance(subnode, pvl.Port)):
                    self.list.append(subnode)

    def visit_InterfacePort(self, port):
        if isinstance(port, pvl.InterfacePort) or \
            isinstance(port, pvl.Port):
            for subport in port.nodes:
                self.visit(subport)
                if isinstance(subport, pvl.Node) and not (isinstance(subport,
                                                                    pvl.InterfacePort) or
                                                          isinstance(subport,
                                                                     pvl.Port)):
                    self.list.append(subport)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="the Verilog file to analyze")
    args = parser.parse_args()

    if not os.path.exists(args.file):
        print(f"{args.file} does not exist.")
        return

    with open(args.file, "r") as f:
        verilog = f.read()

    ast = pvl.parse(verilog)
    ValueAnnotationTestCases().visit(ast)

    create_test_cases(ValueAnnotationTestCases(), ast, args)


if __name__ == "__main__":
    main()