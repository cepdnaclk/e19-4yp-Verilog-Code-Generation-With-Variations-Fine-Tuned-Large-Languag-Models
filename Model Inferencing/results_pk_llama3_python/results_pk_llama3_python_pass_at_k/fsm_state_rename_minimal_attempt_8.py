# Generated by Ollama Llama 3
# Task: fsm_state_rename_minimal
# Attempt: 8
# Success: False
# Overall Score: 0.462

import pyverilog.vparser.ast as ast
from pyverilog.ast_tools.expr import Const, UnaryExpr
from pyverilog.ast_tools.builder import make
import re

def transform(old_prefix, new_prefix):
    visited = set()
    
    def visit(node):
        if node is None or (isinstance(node, ast.Declaration) and isinstance(node.name, ast.Identifier)):
            return 
        else:
            for child in node.children:
                if child not in visited:
                    visit(child)
                    visited.add(child)

        if isinstance(node, ast.Module):  # top level module
            for case in node.body:  # find all cases
                if isinstance(case, ast.Case):
                    for const in case.const_list:  # find each constant value
                        if isinstance(const, UnaryExpr) and isinstance(const.expr, Const):  # only handle constants with prefix
                            old_value = int(const.expr.value)
                            new_value = int(re.sub(old_prefix+'(.*)', lambda m: new_prefix + m.group(1), const.expr.value))
                            
                            case.const_list.append(make.UnaryExpr(make.Const(str(new_value)), make.ID('==')))
                            case.const_list.insert(case.const_list.index(const) - 1, make.CaseItem(make.ID('else'), [make.Assign(node.name.name,
                                                                                                                      make.ID(old_prefix + old_value), make.Const(str(new_value)))], []))
        elif isinstance(node, ast.FunctionCall):  # find all function calls
            for arg in node.arg_list:
                if isinstance(arg, UnaryExpr) and isinstance(arg.expr, Const):
                    old_value = int(arg.expr.value)
                    new_value = int(re.sub(old_prefix+'(.*)', lambda m: new_prefix + m.group(1), arg.expr.value))
                    
                    node.arg_list.insert(node.arg_list.index(arg) - 1, make.ID(new_prefix + str(new_value)))
        return True

    def main():
        parser = argparse.ArgumentParser()
        parser.add_argument('-o', '--old-prefix', type=str, required=True)
        parser.add_argument('-n', '--new-prefix', type=str, required=True)

        args = parser.parse_args()

        with open('example_module.v') as f:
            ast_root = pyverilog.parser.parse(f.read())
        
        success = transform(args.old_prefix, args.new_prefix)

        if not success:  # print any errors
            print('Transformation failed.')
        else:  
            print('Transformation successful.') 
    
    main()
