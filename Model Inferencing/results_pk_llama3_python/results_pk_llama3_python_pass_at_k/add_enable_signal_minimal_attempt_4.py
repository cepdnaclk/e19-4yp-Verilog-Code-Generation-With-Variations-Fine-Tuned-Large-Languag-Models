# Generated by Ollama Llama 3
# Task: add_enable_signal_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.492

import pyverilog.ast as ast
from pyverilog.parser import parse_file
from pyverilog.ast.utils.visitor import Visitor

def add_enable_counter_transform(filename):
    # parse the file and get AST
    ast_tree = parse_file(filename)

    class EnableCounterVisitor(Visitor):

        def __init__(self, *args, **kwargs):
            self.enable_signal_name = 'enable'

        def visit(self, node, *args, **kwargs):
            if isinstance(node, ast.Assign) and node.lhs.name == 'counter':
                for assign_node in node.rhs.nodes:
                    # add enable condition to counter increment
                    if isinstance(assign_node, ast.BinOp) \
                            and isinstance(assign_node.op, ast.Add) \
                            and isinstance(assign_node.left, ast.Identifier):
                        new_assign_node = ast.IfElse(
                            cond=[ast.RelOp(op=ast.Equal, left=self.enable_signal_name,
                                            right=ast.Literal(value=1))],
                            # add enable condition to counter increment
                            then=assign_node,
                            else_=ast.Pass()
                        )
                        node.rhs.nodes.insert(0, new_assign_node)
            return True

    # create a visitor object and traverse the AST
    v = EnableCounterVisitor()
    if not ast_tree.visit(v):
        print('Error: Transformation failed!')
    else:
        print('Transformation successful!')

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Add enable signal to control counter.')
    parser.add_argument('-f', '--filename', help='the Verilog file')
    args = parser.parse_args()
    add_enable_counter_transform(args.filename)