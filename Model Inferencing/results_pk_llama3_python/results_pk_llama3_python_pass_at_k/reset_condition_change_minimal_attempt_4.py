# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.528

import pyverilog.ast as ast
from pyverilog.parser import parse_file
from pyverilog.ast.utils.visitor import Visitor

def transform_rst(file_path):
    v = parse_file(file_path)
    visitor = ResetVisitor()
    visitor.visit(v)
    return visitor.transform()

class ResetVisitor(Visitor):

    def __init__(self, **kwargs):
        super().__init__()
        self.error_msg = ''
        self.changed_files = []

    def transform(self):
        for changed_file in self.changed_files:
            with open(changed_file) as f_in, \
                open('{}.trans'.format(changed_file), 'w') as f_out:

                line_no = 0
                for line in f_in.readlines():
                    line_no += 1

                    # find if statement with reset signal usage
                    match = re.search(r'\bif\s*\(\s*rst\b', line)
                    if match:
                        # change if(!rst) to if(rst)
                        if '!' in line and not '$' in line:
                            new_line = line.replace('!', '')
                        else: # Change if(rst) to if(!rst)
                            new_line = line.replace('(', '!')
                        self.changed_files.append(changed_file)

                    # change sensitivity lists (posedge to negedge)
                    match_negedge = re.search(r'\bposedge\s*\(\s*rst\b', line)
                    if match_negedge:
                        new_line = line.replace('posedge', 'negedge')
                        self.changed_files.append(changed_file)

                    # handle both synchronous and asynchronous reset patterns
                    match_async_rst = re.search(r'\basync\s*\(\s*rst\b', line)
                    if match_async_rst:
                        new_line = line.replace('async', '')
                        self.changed_files.append(changed_file)

                    # write transformed file
                    f_out.write(new_line + '\n')

        return True

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser()
    parser.add_argument("files", nargs="+")
    args = parser.parse_args()

    for file_path in args.files:
        if transform_rst(file_path):
            print('File transformed successfully')
        else:
            print('Error occurred during transformation')