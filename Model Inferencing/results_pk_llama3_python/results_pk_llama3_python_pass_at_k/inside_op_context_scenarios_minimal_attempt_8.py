# Generated by Ollama Llama 3
# Task: inside_op_context_scenarios_minimal
# Attempt: 8
# Success: False
# Overall Score: 0.468

import pyverlog as pv
from pyverlog.parser import parse_file, ASTVisitor
from re import sub
from argparse import ArgumentParser
from typing import List


class InsideOperatorContextTransformation(ASTVisitor):
    def __init__(self) -> None:
        super().__init__()
        self.visited = set()

    def leave_node(self, node: pv.ASTNode) -> bool:
        if isinstance(node, pv.ast.IfStmt):
            for child in node.children:
                if isinstance(child, pv.ast.Expr) and \
                    child.op == "inside":
                        self.transform_inside_if_stmt(
                            node,
                            child
                        )
        elif isinstance(node, pv.ast.CaseStmt):
            for case when_stmt in node.cases:
                if isinstance(when_stmt.condition, pv.ast.Expr) and \
                    when_stmt.condition.op == "inside":
                        self.transform_inside_case_stmt(
                            node,
                            when_stmt
                        )

        return True

    def transform_inside_if_stmt(self, stmt: 'pv.ast.IfStmt', child: 'pv.ast.Expr') -> bool:
        if not isinstance(child.left, pv.ast.Identifier):
            return False
        else:
            left_id = child.left.name
            right_ids = [right_id.name for right_id in child.right]
            condition_text = f"{left_id} inside {right_ids}"

            new_if_stmt = stmt.copy()
            new_if_stmt.elifs.append(pv.ast.ElseIfStmt(condition_text))
            return True

    def transform_inside_case_stmt(self, case: 'pv.ast.CaseStmt', when_stmt: 'pv.ast.WhenStmt') -> bool:
        if not isinstance(when_stmt.condition, pv.ast.Expr) or \
                when_stmt.condition.op != "inside":
            return False
        else:
            left_id = when_stmt.condition.left.name
            right_ids = [right_id.name for right_id in when_stmt.condition.right]
            condition_text = f"{left_id} inside {right_ids}"

            new_case_stmt = case.copy()
            new_case_stmt.cases.append(when_stmt.copy(condition_text))
            return True


if __name__ == "__main__":
    parser = ArgumentParser(description="Generate test cases for inside operator in different contexts")
    args = parser.parse_args()

    try:
        file_path = "testbench.v"
        ast_tree = parse_file(file_path)
        transformation_visitor = InsideOperatorContextTransformation()
        success = transformation_visitor.visit(ast_tree)

        if success:
            print("Transformation successful!")
        else:
            print("Transformation failed :(")

    except Exception as e:
        print(f"Error: {e}")