# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 4
# Success: False
# Overall Score: 0.452

```python
import pyverilog.ast as ast
from re import sub, findall
from argparse import ArgumentParser

# Find reset signal usage in if statements
def visitIf(self, node):
    if isinstance(node, If):
        for condition in node.cond_list:
            # Change if(rst) to if(!rst)
            if hasattr(condition, "expr") and hasattr(condition.expr, "operand"):
                expr = condition.expr
                operand = expr.operand
                if operand.name == 'RST':
                    self.changes_made.append(f"Changed {operand.name} from active-high to active-low")

# Update sensitivity lists (posedge to negedge)
def visitFork(self, node):
    if isinstance(node, Fork):
        for signal in node.signal_list:
            # Change posedge to negedge
            if hasattr(signal, "event") and signal.event == 'POSEDGE':
                self.changes_made.append(f"Changed {signal.name} from active-high to active-low")

# Handle both synchronous and asynchronous reset patterns
def visitReset(self, node):
    if isinstance(node, Reset):
        # Change if(rst) to if(!rst)
        if hasattr(node.cond, "expr") and hasattr(node.cond.expr, "operand"):
            expr = node.cond.expr
            operand = expr.operand
            if operand.name == 'RST':
                self.changes_made.append(f"Changed {operand.name} from active-high to active-low")

# Update sensitivity lists (posedge to negedge)
def visitNegedge(self, node):
    if isinstance(node, Negedge):
        # Change posedge to negedge
        if hasattr(node.signal, "event") and node.event == 'POSEDGE':
            self.changes_made.append(f"Changed {node.name} from active-high to active-low")


class ResetVisitor:
    def __init__(self, signal_name):
        self.signal_name = signal_name
        self.changes_made = []

    # Find reset signal usage in if statements
    def visitIf(self, node):
        pass

    # Update sensitivity lists (posedge to negedge)
    def visitFork(self, node):
        pass

    # Handle both synchronous and asynchronous reset patterns
    def visitReset(self, node):
        pass


def transform_reset(input_file, output_file, signal_name):
    ast, directives = parse([input_file])

    visitor = ResetVisitor(signal_name)
    visitor.visit(ast)

    with open(input_file, "r") as f:
        content = f.read()

    # Apply changes...
    modified_content = sub(pattern, replacement, content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True


def main():
    parser = ArgumentParser()
    parser.add_argument("-i", "--input-file", type=str, help="Input file path")
    parser.add_argument("-o", "--output-file", type=str, help="Output file path")
    parser.add_argument("-s", "--signal-name", type=str, help="Reset signal name")

    args = vars(parser.parse_args())

    if not all([args["input_file"], args["output_file"], args["signal_name"]]):
        print("Error: Missing arguments.")
        return False

    input_file = args["input_file"]
    output_file = args["output_file"]
    signal_name = args["signal_name"]

    result = transform_reset(input_file, output_file, signal_name)

    if not result:
        print(f"Failed to convert {input_file}")
    else:
        print(f"{input_file} successfully converted")


if __name__ == "__main__":
    main()
```