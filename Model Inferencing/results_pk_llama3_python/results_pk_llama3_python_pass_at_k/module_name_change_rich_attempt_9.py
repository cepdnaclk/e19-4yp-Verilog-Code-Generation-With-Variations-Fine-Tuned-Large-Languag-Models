# Generated by Ollama Llama 3
# Task: module_name_change_rich
# Attempt: 9
# Success: False
# Overall Score: 0.445

```python
import re
from pyverilog.ast import *

# Import required modules and classes
from xform import *
from pyverilog.vparser.parser import VerilogParser


class ModuleNameTransformer(XForm):
    def __init__(self, old_name, new_name):
        self.old_name = old_name
        self.new_name = new_name

    def find_module(self, node):
        if isinstance(node, Decl) and len(node.list) > 0:
            for item in node.list:
                if hasattr(item, "name") and item.name == self.old_name:
                    return True
        elif isinstance(node, PortItem):
            # Found port list
            return False

    def transform(self, input_file, output_file):
        with open(input_file) as f:
            content = f.read()

        pattern = re.compile(rf"(?i)(\s*)(module\s+{self.old_name})([\s\S]+?)endmodule")
        replacement = rf"\1module {self.new_name}\2endmodule"

        modified_content = re.sub(pattern, replacement, content)

        with open(output_file, "w") as f:
            f.write(modified_content)


def transform(input_file, output_file, old_name, new_name):
    transformer = ModuleNameTransformer(old_name, new_name)
    return transformer.transform(input_file, output_file)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("input", help="Input file")
    parser.add_argument("output", help="Output file")
    args = parser.parse_args()

    # Parse and transform
    transformed = transform(args.input, args.output, "old_name", "new_name")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", type=str, default="", help="Input file")
    parser.add_argument("-o", "--output", type=str, default="", help="Output file")
    args = parser.parse_args()

    # Parse and transform
    transformed = transform(args.input, args.output)

# EOF