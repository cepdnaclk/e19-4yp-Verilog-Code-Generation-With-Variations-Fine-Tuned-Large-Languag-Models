# Generated by Ollama Llama 3
# Task: signal_rename_minimal
# Attempt: 9
# Success: False
# Overall Score: 0.458

import pyverilog.ast.utils.visitor as vutil
import re

def rename(old_name, new_name):
    # Use PyVerilog to parse and analyze the AST
    ast = vutil.parse_file('sample.v')

    # Create a visitor class to identify target elements  
    class RenameVisitor(vutil.ASTVisitor):

        def __init__(self, old_name, new_name):
            self.old_name = old_name
            self.new_name = new_name

        def visit(self, node):
            if isinstance(node, vutil.Definition):
                # Find all occurrences of the signal in declarations
                if node.name == self.old_name:
                    node.name = self.new_name

                for child in node.children:
                    self.visit(child)

            elif isinstance(node, vutil.AssignmentStatement):
                # Find all assignments and replace with new name
                if node.target.name == self.old_name:
                    node.target.name = self.new_name
                else:
                    # Check that the assignment matches old name exactly (not partial)
                    match = re.match(r'\b' + self.old_name + r'\b', node.target.name)
                    if match is not None:
                        node.target.name = self.new_name

            elif isinstance(node, vutil.Reference):
                # Find all references and replace with new name
                if node.name == self.old_name:
                    node.name = self.new_name

            else:
                for child in node.children:
                    self.visit(child)

    visitor = RenameVisitor(old_name, new_name)
    visitor.visit(ast)

    # Return True/False for success/failure
    return visitor.result