# Generated by Ollama Llama 3
# Task: inside_op_xmr_scenarios_minimal
# Attempt: 8
# Success: True
# Overall Score: 0.618

import pyverilog.ast as ast
from pyverilog.parser import parse, parseFile
import re
from argparse import ArgumentParser
from xform_base import XFormBase


class TestInsideXMR(XFormBase):
    '''
    This class is used to transform the inside xmr module for test cases.
    '''

    def __init__(self):
        super().__init__()

    # Parse arguments from command line
    def parse_args(self, args=None):
        parser = ArgumentParser()
        parser.add_argument("-f", "--filename", dest="filename",
                            help="The Verilog file to be transformed")
        parser.add_argument("-o", "--output_file", dest="output_file",
                            default="./transformed_inside_xmr.v",
                            help="Specify the output filename")
        return parser.parse_args(args)

    # Perform the transformation
    def transform(self, ast):
        '''
        This function performs the xform for the test cases.
        :param ast: The AST of the Verilog file
        '''
        # Get all the modules in the design and check if they have inside XMR references
        # For each module with an inside XMR reference, create a new instance of that module
        # with different names, which will be used as the test case
        for mod in ast.modules:
            if any(ref.type == 'inside' and ref.module_name != '' for ref in mod.references):
                # Get all the references of type 'inside'
                inside_refs = [ref for ref in mod.references if ref.type == 'inside']

                # Create a new instance of each module with different names
                new_module_names = []
                for ref in inside_refs:
                    new_mod_name = re.sub(r'\d+$', '', ref.module_name)
                    new_module_names.append(new_mod_name + '_test_case_' + str(len(new_module_names) + 1))

                # Create a new instance of each module with different names
                mod_new_instances = []
                for new_module_name in new_module_names:
                    new_inst = ast.Module(
                        name=new_module_name,
                        ports=mod.ports,
                        logic=mod.logic,
                        references=[
                            ast.Reference(name=ref.module_name, type='inside', target=new_module_name)
                            if ref.type == 'inside' else
                            ref
                            for ref in mod.references],
                    )
                    mod_new_instances.append(new_inst)

                # Replace the original module with the new instances
                ast.modules[ast.modules.index(mod)] = mod_new_instances

        return True

    def main(self, args=None):
        '''
        This function is used to call the parse_args and transform functions.
        :param args: The command line arguments
        '''

        # Parse the command line arguments
        arg_dict = self.parse_args(args)

        # Get the input file name from the command line
        filename = arg_dict.filename

        # Parse the Verilog file with pyverilog
        ast = parseFile(filename)
        if not ast:
            return False

        success = True
        try:
            # Perform the transformation
            success = self.transform(ast)
        except Exception as e:
            print(e)

        # Output the transformed AST to a new file
        with open(arg_dict.output_file, 'w') as f_out:
            f_out.write(ast.toVerilog())

        return True