# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 7
# Success: True
# Overall Score: 0.608

"""Transform reset condition.

This transformation module finds if statements using a reset signal as 
condition, and changes it to its opposite (active-high to active-low or vice versa).

Example:
    before: if(rst) begin
            $display("reset");
        end

    after:  if(!rst) begin
            $display("reset");
        end
"""

import pyverilog.parser as parser
import re

from xforms_framework import Xform, transform_file


class ResetConditionXform(Xform):
    """Transform reset condition."""

    def __init__(self, signal_name):
        super().__init__()
        self.signal_name = signal_name

    @staticmethod
    def check_ast(ast, signal_name):
        if not isinstance(ast, parser.ASTNode) or ast.name != "module":
            return False
        for child in ast.children:
            if (isinstance(child, parser.ASTNode) and 
                child.name == "always" and 
                any(x.name == "if" for x in child.children)):
                # Check the reset condition
                for clause in child.children:
                    if isinstance(clause, parser.ASTNode) and clause.name == "if":
                        for cond in clause.children:
                            if isinstance(cond, parser.ASTNode) and cond.name == "condition":
                                if signal_name in cond.children[0].children:
                                    return True
        return False

    @staticmethod
    def transform_ast(ast, signal_name):
        # Transform the AST
        for child in ast.children:
            if (isinstance(child, parser.ASTNode) and 
                child.name == "always" and 
                any(x.name == "if" for x in child.children)):
                # Check the reset condition
                for clause in child.children:
                    if isinstance(clause, parser.ASTNode) and clause.name == "if":
                        for cond in clause.children:
                            if isinstance(cond, parser.ASTNode) and cond.name == "condition":
                                if signal_name in cond.children[0].children:
                                    # Change the condition
                                    for i, item in enumerate(cond.children):
                                        if isinstance(item, parser.ASTNode) and item.name == "op":
                                            cond.children[i] = '!'+cond.children[i]
        return ast

    def transform_file(self, input_file, output_file=None):
        """Transform a file."""
        # Parse the AST
        ast, directives = parser.parse(input_file)

        # Check if it is a valid AST
        if self.check_ast(ast, self.signal_name) == False:
            raise ValueError("Invalid AST")

        # Perform transformation
        transformed_ast = self.transform_ast(ast, self.signal_name)

        # Write the output file
        with open(output_file or input_file, "w") as f:
            ast.write(f)
        return True

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Transform reset condition.")
    parser.add_argument("input", help="Input Verilog file")
    parser.add_argument("--output", "-o", default=None, 
                        help="Output Verilog file (default: input file)")
    parser.add_argument("signal_name", help="Reset signal name")
    args = parser.parse_args()

    transform_file(args.input, args.output, ResetConditionXform(args.signal_name))