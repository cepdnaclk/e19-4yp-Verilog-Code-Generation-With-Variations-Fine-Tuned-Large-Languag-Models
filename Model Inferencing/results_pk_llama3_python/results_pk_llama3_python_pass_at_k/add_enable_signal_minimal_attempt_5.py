# Generated by Ollama Llama 3
# Task: add_enable_signal_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.462

from pyverilog.ast import *
import re


def add_enable_counter(args):
    # Find counter increment statements (counter <= counter + 1)
    find_increment = "counter <= counter + 1"

    # Add enable signal as new input port
    find_input_port = "input enable"

    # Wrap counter increments with enable condition
    wrap_condition = "(enable == 1)"

    # Preserve existing sensitivity lists and reset logic
    preserve_logic = "else: counter <= 0" 

    visitor_class = add_enable_counterVisitor()
    pyv = PyVerilog(args.input_file)
    
    if args.search:
        result = visitor_class.visit(pyv.ast, find_increment, wrap_condition) 
    else:
        result = visitor_class.visit(pyv.ast)

    if result:
        print("Transformation successful!")
    else: 
        print("No matches found.")


class add_enable_counterVisitor(ASTVisitor):
    def visit_Ast(self, node, *args):
        # Search for input port
        search_input_port = re.search(find_input_port, str(node))
        # Search for counter increment statements
        search_increment_stmt = re.search(find_increment, str(node))
        
        if search_input_port and search_increment_stmt:
            # Wrap the statement with condition
            wrap_condition = node.find_all(StmtIf)
            if wrap_condition:
                for s in wrap_condition:
                    if "else" not in str(s):
                        s.add_else()
                new_stmt = StmtIf(s.condition, *s.stmts, [node])
                new_node = Ast(*new_node.children[:-1], new_stmt)
                # Add preserve logic
                if node.find_all(Always):

                    preserve_logic = node.find_all(Always)[0].find_all(StmtSeq)

                    if preserve_logic:
                        for p in preserve_logic:
                            if "else" not in str(p):
                                p.add_else()
                            new_p = StmtSeq(p.condition, *p.stmts, [preserve_logic[0]])
                            new_node1 = Always(new_node.children[:-2] + [new_p])
                return new_node
        else:
            return None

def main():
    parser = argparse.ArgumentParser(description='Add enable signal to a counter')
    parser.add_argument('input_file', help="Input Verilog file")
    parser.add_argument('-s', '--search', action='store_true', help="Search only for matches")

    args = parser.parse_args()
    add_enable_counter(args)

if __name__ == '__main__':
    main()