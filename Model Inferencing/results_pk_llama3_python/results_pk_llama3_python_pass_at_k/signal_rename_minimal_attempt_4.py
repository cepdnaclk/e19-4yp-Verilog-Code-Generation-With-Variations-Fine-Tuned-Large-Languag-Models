# Generated by Ollama Llama 3
# Task: signal_rename_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.495

import sys
import re
from pyverilog.ast import *

class RenameSignalVisitor(ASTVisitor):
  def __init__(self, old_name, new_name):
    self.old_name = old_name
    self.new_name = new_name

  # Find all instances of the signal in declarations and assignments
  def visit_Declaration(self, node):
    if node.portlist:
      for port in node.portlist.portlist:
        if port.name == self.old_name:
          port.name = self.new_name
  
  # Find all instances of the signal in references
  def visit_Reference(self, node):
    if isinstance(node.lhsref, NameRef) and node.lhsref.name == self.old_name:
      node.lhsref.name = self.new_name

def transform(module_ast, old_name, new_name):
  visitor = RenameSignalVisitor(old_name, new_name)
  module_ast.accept(visitor)

# Example usage
if __name__ == "__main__":
  parser = argparse.ArgumentParser()
  parser.add_argument("filename", help="Verilog source file")
  args = parser.parse_args()

  with open(args.filename) as f:
    txt = f.read()
  
  ast = parse(txt)
  
  transform(ast, "old_name", "new_name")