# Generated by Ollama Llama 3
# Task: multi_signal_width_minimal
# Attempt: 9
# Success: True
# Overall Score: 0.615

import pyverilog.ast.utils as utils
from pyverilog.vparser.ast import *
from pyverilog.parser import parse
import re


def transform_bit_width(bitwidth_dict, filename):
    """
    Transform bit width of signals in a Verilog file

    :param bitwidth_dict: A dictionary containing signal names and new bit widths
    :type bitwidth_dict: dict[str, int]
    :param filename: The name of the Verilog file to transform
    :type filename: str

    Returns True on successful transformation, False otherwise
    """
    # Parse AST from file
    ast = parse(filename)

    # Create a visitor class that inherits from the pattern found in existing xforms
    class BitWidthVisitor(pyverilog.ast.utils.visitor.Visitor):
        def __init__(self):
            self.bitwidth_dict = bitwidth_dict

        def visit_declaration(self, node):
            if isinstance(node.decl, SignalDeclaration) and \
                    node.decl.name in self.bitwidth_dict:
                # Update the bit width specification
                new_width = self.bitwidth_dict[node.decl.name]
                old_width = node.decl.width
                if node.decl.packed is True:  # Packed array
                    # Use regex to perform text transformation
                    node.decl.width = re.sub(r'\[' + str(old_width) + r'\]',
                                              '[' + str(new_width) + ']',
                                              node.decl.width)
                else:
                    node.decl.width = new_width

            elif isinstance(node.decl, ArrayDeclaration):
                # Handle packed and unpacked arrays
                for decl in node.decl.decls:  # Iterate over declarations
                    if isinstance(decl, SignalDeclaration) and \
                            decl.name in self.bitwidth_dict:
                        new_width = self.bitwidth_dict[decl.name]
                        old_width = decl.width
                        if decl.packed is True:  # Packed array
                            # Use regex to perform text transformation
                            decl.width = re.sub(r'\[' + str(old_width) + r'\]',
                                                '[' + str(new_width) + ']',
                                                decl.width)
                        else:
                            decl.width = new_width

            self.generic_visit(node)

    visitor = BitWidthVisitor()
    success = visitor.visit(ast)
    
    # Write transformed AST to file
    with open(filename, 'w') as f:
        f.write(pyverilog.ast.utils.codegen.generate_ast_node(visitor.ast))
    
    return success


if __name__ == '__main__':
    # Create a dictionary containing signal names and new bit widths
    bitwidth_dict = {
        'signal1': 4,
        'signal2': 8,
        'signal3[7:0]': 12
    }

    # Provide the name of the Verilog file to transform
    filename = 'test.v'

    success = transform_bit_width(bitwidth_dict, filename)
    
    if not success:
        print('Transformation failed.')