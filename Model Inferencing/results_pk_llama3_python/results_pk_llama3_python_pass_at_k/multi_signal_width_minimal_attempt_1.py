# Generated by Ollama Llama 3
# Task: multi_signal_width_minimal
# Attempt: 1
# Success: False
# Overall Score: 0.492

import sys 
import re 

from pyverilog.ast import *
from pyverilog.vlogparser import VLOGParser


def bitwidth_transform(args):
    """Transform a list of signal names and new width to change
    their bit widths at once."""
    
    # Get arguments from command line input
    signal_list = args.signal_list 
    new_width = int(args.width)

    # Parse Verilog design using PyVerilog
    parser = VLOGParser()
    vfile = parser.parse_file(sys.argv[1])

    # Create visitor class for parsing the AST
    class Visitor(ASTVisitor):
        def __init__(self, signal_list, new_width):
            self.signal_list = signal_list 
            self.new_width = new_width 

        def visitDecl(self, node): 
            decl_name = str(node.name) 
            if decl_name in self.signal_list:
                # Update the bit width specification
                if isinstance(node.width_specifier, WidthSpecified):
                    if isinstance(node.width_specifier.width, SpecifiedWidth):
                        node.width_specifier.width.value = new_width 
                        return True

                elif isinstance(node.width_specifier, ArrayWidthSpecified):
                    if isinstance(node.width_specifier.width, SpecifiedArrayWidth):  
                        node.width_specifier.width.value = new_width
                        return True
                
            # Visit all child nodes recursively 
            for child in node.children: child.accept(self)

    visitor = Visitor(signal_list=signal_list, new_width=new_width)
    vfile.visit(visitor) 
    
    # Write transformed design back to file
    vfile.write(sys.argv[1], sys.argv[2]) 

    return True


if __name__ == '__main__':
    import argparse

    parser = argparse.ArgumentParser(description='Change bit width of multiple signals at once')
    parser.add_argument('signal_list', nargs='+', help='list of signal names to change')
    parser.add_argument('-w', '--width', type=int, default=32, help='new width for the signals (default: 32)')
    args = parser.parse_args()

    bitwidth_transform(args)