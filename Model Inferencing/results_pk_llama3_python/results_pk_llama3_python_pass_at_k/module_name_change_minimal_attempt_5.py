# Generated by Ollama Llama 3
# Task: module_name_change_minimal
# Attempt: 5
# Success: True
# Overall Score: 0.682

"""Transforms a module name throughout a design.

This xform will search for an old module name in a Verilog or SystemVerilog 
design and replace it with a new module name. It will also update any endmodule
comments that reference the old module name.

The transformation should follow this pattern:

1. Use PyVerilog to parse and analyze the AST.
2. Create a visitor class to identify target elements.
3. Use regex to perform the actual text transformations.
4. Include proper error handling and validation.
5. Return True/False for success/failure.

This xform is generated using Python 3.8.10, PyVerilog 0.9.17, and Astunparse
1.2.2."""

import re

from pyverilog.ast import *


class ModuleRenameVisitor(Visitor):
    """A visitor class to rename modules in a design."""

    def __init__(self, old_name, new_name):
        self.old_name = old_name
        self.new_name = new_name

    def visit_Module(self, node):
        if node.name == self.old_name:
            # Rename the module declaration
            node.name = self.new_name
            endmodule_comments = node.endmodulecomments

            for comment in endmodule_comments:
                if self.old_name in comment.text:
                    comment.text = re.sub(
                        rf"{self.old_name}\b", self.new_name, comment.text)

        # Recursively visit the children of this AST node
        Visitor.visit(self, node)


def transform_module_rename(args):
    """Transform a module name throughout a design.

    Arguments:
        args: A Namespace object with arguments for xform.
            old_name: The original module name to be replaced.
            new_name: The new module name.
            filename: The path of the design file to be transformed.
            output_filename: Optional argument for specifying an output
                filename. If not specified, the default behavior is to write
                the transformed code back into the same input file.

    Returns:
        A boolean indicating success or failure.

    Raises:
        ValueError: If invalid arguments are passed.
        FileNotFoundError: If the input design file cannot be found.
        IOError: If there is an issue writing output to disk.
        SyntaxError: If there is a problem parsing the Verilog code."""

    # Validate and parse args
    if not isinstance(args, Namespace):
        raise ValueError("Invalid arguments. Arguments should be passed as a "
                         "Namespace object.")

    old_name = args.old_name
    new_name = args.new_name
    filename = args.filename

    output_filename = None
    if args.output_filename:
        output_filename = args.output_filename

    if not isinstance(filename, str):
        raise ValueError("Invalid arguments. The input file should be passed "
                         "as a string path.")

    if not filename.endswith((".v", ".sv")):
        raise ValueError(
            f"Invalid arguments. The input file must have a .v or .sv extension")

    try:
        with open(filename, 'r') as input_file:
            code = input_file.read()
    except FileNotFoundError as e:
        raise FileNotFoundError(f"{filename} not found.") from e

    # Parse the AST
    ast = parse(code)

    visitor = ModuleRenameVisitor(old_name, new_name)
    visitor.visit(ast)

    if output_filename is None:
        with open(filename, 'w') as output_file:
            code = pretty_print(ast)
            output_file.write(code)
    else:
        try:
            with open(output_filename, 'w') as output_file:
                code = pretty_print(ast)
                output_file.write(code)
        except IOError as e:
            raise IOError(f"Error writing {output_filename}.") from e

    return True


def main():
    """Generate a command-line interface for this xform."""

    import argparse
    parser = argparse.ArgumentParser(description="Transform module names")
    parser.add_argument(
        "-o", "--old-name", help="The original module name to be replaced",
        required=True)
    parser.add_argument(
        "-n", "--new-name", help="The new module name",
        required=True)
    parser.add_argument("-f", "--filename", help="Path of the design file to "
                         "be transformed", required=True)

    # Optional argument for specifying an output filename
    parser.add_argument(
        "-F", "--output-filename", help="Optional argument for specifying an "
                         "output filename. If not specified, the default behavior "
                         "is to write the transformed code back into the same input "
                         "file")

    args = parser.parse_args()

    transform_module_rename(args)


if __name__ == '__main__':
    main()
