# Generated by Ollama Llama 3
# Task: inside_op_xmr_scenarios_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.492

import sys
import os
import re
import pyverilog.ast as ast
from pyverilog.dataTypes import dataType
from pyverilog.grammar import Grammar, Node
from pyverilog.parser import parse
from pyverilog.util import *
from pyverilog.utils import *

class XMRTransform(ast.NodeVisitor):
    def __init__(self, args):
        self.args = args

    def visit_Module(self, node): 
        # Find the inside operator in the module body
        inside_op = get_inside_operator(node.body)
        
        if inside_op:
            # Extract the LHS and RHS of the inside operator
            lhs, rhs = extract_lhs_rhs(inside_op)

            # Check for cross-module references
            if is_cross_module_reference(lhs):
                print("Cross-module reference found in left-hand side")
                
            if is_cross_module_reference(rhs):
                print("Cross-module reference found in right-hand side")

def get_inside_operator(body): 
    """Find the first 'inside' operator in a module body"""
    for node in body:
        if isinstance(node, ast.ModuleItem) and \
           isinstance(node.value, ast.InsideOp):
            return node.value
    
    # No inside operators were found
    return None

def extract_lhs_rhs(inside_op): 
    """Extract the left-hand side and right-hand side of an 'inside' operator"""
    lhs = get_lhs(inside_op)
    rhs = get_rhs(inside_op)

    return lhs, rhs

def is_cross_module_reference(node):
    if isinstance(node.value, ast.Name) and \
       node.value.id == "cross_module_reference":
        return True
    
    # No cross-module reference was found
    return False