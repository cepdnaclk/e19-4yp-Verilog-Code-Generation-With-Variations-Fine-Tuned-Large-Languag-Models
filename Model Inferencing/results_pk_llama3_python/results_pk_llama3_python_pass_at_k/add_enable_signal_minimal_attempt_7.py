# Generated by Ollama Llama 3
# Task: add_enable_signal_minimal
# Attempt: 7
# Success: False
# Overall Score: 0.525

"""Add enable signal to control counter"""

import pyverilog.ast as ast
from pyverilog.parser import parse, ParserError
from pyverilog.ast.utils import get_all_nodes
from pyverilog.utils.regex import match_all
import re

def add_enable_counter(parser):
    # Find all counter increments
    counters = [n for n in get_all_nodes(ast.Assign) if n.lhs == ast.Name('counter', scope=ast.LocalScope()) and n.rhs == ast.BinaryOp('+', lhs=ast.Name('1'), rhs=None)]
    
    if not counters:
        return False
    
    # Add enable signal as new input port
    ports = [n for n in get_all_nodes(ast.Port) if n.direction == 'input' and n.name=='enable']
    if len(ports) > 0:
        print("ERROR: Port already exists.")
        return False
    ast_port = ast.Port(name='enable', direction='input')
    parser.add_node(ast_port)
    
    # Wrap counter increments with enable condition
    for c in counters:
        if 'else' in str(c):
            continue
        ast.assign = ast.Assign(targets=[c.lhs], value=ast.IfExp(test=c.rhs, then_expr=c.value, else_=None))
        parser.add_node(ast.assign)
    
    # Preserve existing sensitivity lists and reset logic
    for n in get_all_nodes(ast.SensitivityList):
        parser.add_node(n)
        
    for n in get_all_nodes(ast.Initial):
        parser.add_node(n)
    
    return True


if __name__ == '__main__':
    import argparse

    ap = argparse.ArgumentParser()
    ap.add_argument("filename", help="Input Verilog file")
    args = ap.parse_args()

    with open(args.filename, 'r') as f:
        try:
            v = parse(f.read())
        except ParserError as e:
            print(e)
            exit(1)

    if add_enable_counter(v):
        print("Transformation successful.")
    else:
        print("ERROR: Transformation failed.")