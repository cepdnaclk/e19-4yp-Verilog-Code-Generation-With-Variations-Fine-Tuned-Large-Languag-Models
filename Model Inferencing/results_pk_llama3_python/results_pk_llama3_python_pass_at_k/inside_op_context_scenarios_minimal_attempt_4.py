# Generated by Ollama Llama 3
# Task: inside_op_context_scenarios_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.548

import sys
import os
import re
import pyverilog.ast as ast
from pyverilog.frontend.parser import ParseError, parse_file
from pyverilog.ast_tools.expr import *
from pyverilog.ast_tools.ast_utils import find_node, find_nodes, get_attribute, set_attribute
from pyverilog.ast_tools.builder import builder
from pyverilog.vexpr.translator import VExprTranslator
import argparse

# Import xform framework classes
from pyxform.util import xform_util
from pyxform.xform import XFormVisitor, XForm


def get_ast(filename):
    ast = parse_file(filename)
    if not isinstance(ast, ast.Module):
        raise ParseError("AST is not a module object")
    return ast

class XformInsideOperator(XForm):

    def __init__(self, name="xform-inside-op"):
        super().__init__(name)

    @staticmethod
    def usage():
        print('usage: python3 xform_inside_op.py <filename> [-h]')

    def run(self):
        parser = argparse.ArgumentParser(description='Transform Verilog file with inside operator')
        parser.add_argument('filename', help='file name to transform')
        args = parser.parse_args()
        self.filename = args.filename
        if not os.path.isfile(self.filename):
            raise ValueError("File does not exist")
    
        ast_tree = get_ast(self.filename)
        vexpr_translator = VExprTranslator(ast_tree)

        # Find inside operator in if statement
        def find_inside_if(node, xform):
            for child in node.children:
                if isinstance(child, IfElse):
                    for expr in child.cond:
                        if isinstance(expr, InsideOp) and str(expr.left) == "a" and str(expr.right) == "b":
                            set_attribute(child, 'inside', True)
                            return True
            return False

        # Find inside operator in case statement
        def find_inside_case(node, xform):
            for child in node.children:
                if isinstance(child, CaseZ):
                    for cstmt in child.c_stmts:
                        if isinstance(cstmt, ExprCase) and str(cstmt.expr) == "c":
                            for expr in cstmt.exprs:
                                if isinstance(expr, InsideOp) and str(expr.left) == "a" and str(expr.right) == "b":
                                    set_attribute(cstmt, 'inside', True)
                                    return True
            return False

        # Find inside operator in loop
        def find_inside_loop(node, xform):
            for child in node.children:
                if isinstance(child, Always):
                    for expr in child.always:
                        if isinstance(expr, InsideOp) and str(expr.left) == "a" and str(expr.right) == "b":
                            set_attribute(expr, 'inside', True)
                            return True
                elif isinstance(child, Initial):
                    for expr in child.exprs:
                        if isinstance(expr, InsideOp) and str(expr.left) == "a" and str(expr.right) == "b":
                            set_attribute(expr, 'inside', True)
                            return True
            return False

        # Find inside operator in continuous assign
        def find_inside_cont_assign(node, xform):
            for child in node.children:
                if isinstance(child, ContinuousAssign):
                    for expr in child.assigns:
                        if isinstance(expr, InsideOp) and str(expr.left) == "a" and str(expr.right) == "b":
                            set_attribute(expr, 'inside', True)
                            return True
            return False

        # Find inside operator in procedural block
        def find_inside_proc_block(node, xform):
            for child in node.children:
                if isinstance(child, ProceduralBlock):
                    for expr in child.expressions:
                        if isinstance(expr, InsideOp) and str(expr.left) == "a" and str(expr.right) == "b":
                            set_attribute(expr, 'inside', True)
                            return True
            return False

        # Find inside operator in initial/final block
        def find_inside_init_final_block(node, xform):
            for child in node.children:
                if isinstance(child, InitialFinalBlock):
                    for expr in child.expressions:
                        if isinstance(expr, InsideOp) and str(expr.left) == "a" and str(expr.right) == "b":
                            set_attribute(expr, 'inside', True)
                            return True
            return False

        xform_util.run_xform(ast_tree, XFormInsideOperator(), find_inside_if, find_inside_case, find_inside_loop,
                             find_inside_cont_assign, find_inside_proc_block, find_inside_init_final_block)

if __name__ == '__main__':
    try:
        xform_inside_op = XformInsideOperator()
        xform_inside_op.run()
    except Exception as e:
        print(e)