# Generated by Ollama Llama 3
# Task: fsm_state_rename_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.442

import sys
import os
from pyverilog.ast import *
from pyverilog.parser import parse
import re 

def find_fsm_states(ast):
    """
    Find all states in a FSM

    Parameters
    ----------
    ast : AST node
        The root of the AST to be parsed
    
    Returns
    -------
    list
        A list containing all state names
    """

    states = []
    
    for child in ast.children:
        if isinstance(child, Enum):
            states.append(child.name)
        elif isinstance(child, ASTNode):
            children_states = find_fsm_states(child)
            states.extend(children_states)

    return states

def rename_states(ast, old_prefix, new_prefix):
    """
    Rename all states with the given prefix in a FSM.

    Parameters
    ----------
    ast : AST node
        The root of the AST to be parsed
    old_prefix: str
        The original state name prefix to be renamed
    new_prefix: str
        The new prefix for the states

    Returns
    -------
    list
        A list containing all changed state names
    """

    changed_states = []
    
    def get_state_name(node):
        if isinstance(node, Enum) and node.name.startswith(old_prefix):
            return (old_prefix + node.name[len(old_prefix):], new_prefix + node.name[len(old_prefix):])
        elif isinstance(node, Enum):
            return (node.name, node.name)
        else:
            for child in node.children:
                state = get_state_name(child)
                if state[0] != state[1]:
                    changed_states.append(state)
        
    get_state_name(ast)

    return changed_states

def change_fsm_state_names(ast, old_prefix, new_prefix):
    """
    Rename all states with the given prefix in a FSM.

    Parameters
    ----------
    ast : AST node
        The root of the AST to be parsed
    old_prefix: str
        The original state name prefix to be renamed
    new_prefix: str
        The new prefix for the states

    Returns
    -------
    list
        A list containing all changed state names
    """

    def replace_state_names(node):
        if isinstance(node, Enum) and node.name.startswith(old_prefix):
            return AstNode(enum = Enum(name=new_prefix + node.name[len(old_prefix):]))
        elif isinstance(node, Enum):
            return node
        else:
            for child in node.children:
                result = replace_state_names(child)
                if result == None:
                    continue
                elif isinstance(result, list):
                    for i in result:
                        node.children.append(i)
                else:
                    node.children.append(result)

    changed_states = rename_states(ast, old_prefix, new_prefix) 
    for state in changed_states:   
        replace_state_names(state[0])

def find_fsm_case_statements(ast):
    """
    Find all case statements in a FSM

    Parameters
    ----------
    ast : AST node
        The root of the AST to be parsed
    
    Returns
    -------
    list
        A list containing all case statement nodes
    """

    cases = []
    
    for child in ast.children:
        if isinstance(child, Case):
            cases.append(child)
        elif isinstance(child, ASTNode):
            children_cases = find_fsm_case_statements(child)
            cases.extend(children_cases)

    return cases

def replace_state_names_in_cases(ast, states_dict):
    """
    Replace state names with their new counterparts in a case statement.

    Parameters
    ----------
    ast : AST node
        The root of the AST to be parsed
    states_dict: dict
        A dictionary mapping old state name to its new counterpart

    Returns
    -------
    list
        A list containing all changed nodes
    """

    def replace_state_names_in_case_statement(node):
        if isinstance(node, Case):
            for child in node.children:
                result = replace_state_names_in_case_statement(child)
                if result == None:
                    continue
                elif isinstance(result, list):
                    for i in result:
                        node.children.append(i)
                else:
                    node.children.append(result)

    changed_nodes = []
    
    def get_state_name(node):
        if isinstance(node, Enum) and node.name in states_dict:
            return (node.name, states_dict[node.name])
        elif isinstance(node, Enum):
            return (node.name, node.name)
        else:
            for child in node.children:
                state = get_state_name(child)
                if state[0] != state[1]:
                    changed_nodes.append(state)

    get_state_name(ast)

    def replace_state_names_in_node(node):
        if isinstance(node, Enum) and node.name in states_dict:
            return AstNode(enum = Enum(name=states_dict[node.name]))
        elif isinstance(node, Enum):
            return node
        else:
            for child in node.children:
                result = replace_state_names_in_node(child)
                if result == None:
                    continue
                elif isinstance(result, list):
                    for i in result:
                        node.children.append(i)
                else:
                    node.children.append(result)

    change_fsm_state_names(ast, old_prefix, new_prefix) 
    changed_nodes = rename_states(ast, old_prefix, new_prefix) 

    for state in changed_nodes:   
        replace_state_names_in_case_statement(state[0])

def find_assignments_and_comparisons(ast):
    """
    Find all assignments and comparisons.

    Parameters
    ----------
    ast : AST node
        The root of the AST to be parsed
    
    Returns
    -------
    list
        A list containing all assignment and comparison nodes
    """

    assignments = []
    comparisons = []

    for child in ast.children:
        if isinstance(child, Assign) or isinstance(child, IfEq):
            assignments.append(child)
        elif isinstance(child, AstNode):
            children_assignments = find_assignments_and_comparisons(child)
            assignments.extend(children_assignments)

    return assignments

def replace_state_names_in_assignments(ast, states_dict):
    """
    Replace state names with their new counterparts in an assignment.

    Parameters
    ----------
    ast : AST node
        The root of the AST to be parsed
    states_dict: dict
        A dictionary mapping old state name to its new counterpart

    Returns
    -------
    list
        A list containing all changed nodes
    """

    def replace_state_names_in_assignment(node):
        if isinstance(node, Assign) or isinstance(node, IfEq):
            for child in node.children:
                result = replace_state_names_in_assignment(child)
                if result == None:
                    continue
                elif isinstance(result, list):
                    for i in result:
                        node.children.append(i)
                else:
                    node.children.append(result)

    changed_nodes = []
    
    def get_state_name(node):
        if isinstance(node, Enum) and node.name in states_dict:
            return (node.name, states_dict[node.name])
        elif isinstance(node, Enum):
            return (node.name, node.name)
        else:
            for child in node.children:
                state = get_state_name(child)
                if state[0] != state[1]:
                    changed_nodes.append(state)

    get_state_name(ast)

    def replace_state_names_in_node(node):
        if isinstance(node, Enum) and node.name in states_dict:
            return AstNode(enum = Enum(name=states_dict[node.name]))
        elif isinstance(node, Enum):
            return node
        else:
            for child in node.children:
                result = replace_state_names_in_node(child)
                if result == None:
                    continue
                elif isinstance(result, list):
                    for i in result:
                        node.children.append(i)
                else:
                    node.children.append(result)

    change_fsm_state_names(ast, old_prefix, new_prefix) 
    changed_nodes = rename_states(ast, old_prefix, new_prefix) 

    for state in changed_nodes:   
        replace_state_names_in_assignment(state[0])

def transform_fsm(ast):
    """
    Transform a FSM by renaming all states.

    Parameters
    ----------
    ast : AST node
        The root of the AST to be parsed
    
    Returns
    -------
    list
        A list containing all changed nodes
    """

    # Find all state names
    states = find_fsm_states(ast)

    # Create a dictionary mapping old state name to its new counterpart
    states_dict = {}
    for i, state in enumerate(states):
        states_dict[state] = state + "_new" + str(i)
    
    # Replace state names with their new counterparts in a case statement.
    replace_state_names_in_cases(ast, states_dict)

    # Replace state names with their new counterparts in an assignment
    replace_state_names_in_assignments(ast, states_dict)

def transform_fsm_file(filename):
    """
    Transform a FSM file by renaming all states.

    Parameters
    ----------
    filename : str
        The name of the file to be transformed
    
    Returns
    -------
    list
        A list containing all changed nodes
    """

    # Parse the AST from the file
    ast = parse(filename).children[0]

    transform_fsm(ast)

def main():
    import argparse

    parser = argparse.ArgumentParser(description='Transform a FSM by renaming all states')
    
    parser.add_argument('filename', type=str, help='The name of the file to be transformed')

    args = parser.parse_args()
    
    transform_fsm_file(args.filename)

if __name__ == '__main__':
    main()