# Generated by Ollama Llama 3
# Task: add_enable_signal_rich
# Attempt: 5
# Success: False
# Overall Score: 0.368

from pyverilog.ast_tools.grammar import Grammar
import re

def transform(input_file, output_file):
    ast = parse([input_file])

    # Find all counter increment statements
    counters = [c for c in ast if isinstance(c, Node) and c.name == 'counter']

    # Add enable signal as new input port
    enable_port = Port('enable', Dir.INPUT)

    # Wrap counter increments with enable condition
    for counter in counters:
        enable_condition = []
        sensitivity_list = []
        reset_logic = []

        if isinstance(counter, Decl):
            # Replace existing sensitivity list and reset logic with 
            # new ports
            sensitivity_list = [s for s in counter.sensitivity]
            for s in sensitivity_list:
                if isinstance(s, Port) and s.name == 'clock':
                    enable_condition.append(s)
                elif isinstance(s, Port) and s.name == 'reset':
                    reset_logic = [s for s in counter.reset]

        # Add new port to existing list
        ports = [p for p in counter.ports]
        ports.append(enable_port)

        # Create a new sensitivity list with the enable condition added
        if len(sensitivity_list) > 0:
            new_sensitivity_list = []
            new_sensitivity_list.append(EnableCondition([enable_condition]))
            new_sensitivity_list.extend(sensitivity_list)
            counter.sensitivity = new_sensitivity_list

        # Wrap existing reset logic around new port
        if len(reset_logic) > 0:
            new_reset_logic = [Reset(enable_port, *reset_logic[1:])]
            counter.reset = new_reset_logic

    ast.write(output_file)


def parse(files):
    grammar = Grammar()
    parser = grammar.parser()
    return parser.parse_files(files)

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser(description='Add an enable signal to control a counter')
    parser.add_argument('input', help='Input Verilog file')
    parser.add_argument('output', help='Output transformed Verilog file')
    args = parser.parse_args()

    transform(args.input, args.output)