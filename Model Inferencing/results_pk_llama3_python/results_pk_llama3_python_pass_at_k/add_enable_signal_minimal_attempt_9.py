# Generated by Ollama Llama 3
# Task: add_enable_signal_minimal
# Attempt: 9
# Success: False
# Overall Score: 0.495

import pyverilog.ast.utils.visitor as vutil
import re

def add_enable_counter_transform(ast, enable_name):
    # Find counter increment statements
    counters = ast.find_all(lambda n: isinstance(n, vutil.Assignment) and 
                            (n.lhs.expr.name == 'counter' or n.lhs.expr.base.name == 'counter') and
                            isinstance(n.rhs, vutil.BinaryOp) and n.rhs.op == '+')

    # Add enable signal as new input port
    ports = ast.find_all(vutil.Port)
    for p in ports:
        if p.type == 'in' and p.name == enable_name:
            return False

    def add_enable_expr(expr):
        if expr.op != '=':
            raise Exception("Expression does not match expected format")
        # Wrap counter increments with enable condition
        lhs = expr.lhs
        rhs = vutil.BinaryOp(lhs.expr, '+', vutil.Constant(1))
        rhs = vutil.IfElse(vutil.Compare(rhs, '==', vutil.Constant(0)), 
                            vutil.Assign(lhs, rhs),
                            expr.rhs)
        return expr.__class__(lhs, '=', rhs)

    # Preserve existing sensitivity lists and reset logic
    ast.find_all(lambda n: isinstance(n, vutil.Initial) and 
                isinstance(n.statement.expr, vutil.BinaryOp) and
                (n.statement.expr.op == '+' or n.statement.expr.op == '-'))

    for c in counters:
        new_expr = add_enable_expr(c)
        if not ast.replace_node(new_expr):
            return False

    def add_port(port):
        if port.type == 'in' and port.name == enable_name:
            return True
        ports.append(port)

    # Add enable signal as input port
    ports = []
    ast.find_all(add_port)
    if len(ports) != 1 or ports[0].type != 'in':
        raise Exception('Invalid number of input ports')
    ports[0] = vutil.Port(ports[0].name, 'in', [vutil.TypeSpec(ports[0].spec)])
    
    ast.find_all(lambda n: isinstance(n, vutil.Always) and 
                len(n.sensitivity) == 1 and
                (n.sensitivity[0].expr.name == enable_name or 
                 n.sensitivity[0].base.name == 'enable'))
   
    return True

# Example usage:
from xform import xform

if __name__ == '__main__':
    try:
        with open('example.v', 'r') as f:
            ast = pyverilog.parse(f.read())
    except IOError:
        print("File not found")
        sys.exit(1)

    result = xform(ast, add_enable_counter_transform, enable_name='enable')

    if result is False or len(result) == 0:
        raise Exception('Transformation failed')

    with open('example.v', 'w') as f:
        f.write(result.to_string())