# Generated by Ollama Llama 3
# Task: queue_mda_conversion_minimal
# Attempt: 9
# Success: False
# Overall Score: 0.472

import pyverilog.ast.tools as asttools
import pyverilog.ast.utils.regex_tools as retools
from collections import deque


def fixed_array_to_queue(ast):
    for node in ast.traverse():
        if isinstance(node, asttools.Declaration) and node.type == 'array':
            # print(node)
            # print(' '.join([str(c.value) for c in node.dimensions]))
            dims = [c.value for c in node.dimensions]
            qdims = []
            for dim in dims:
                bound = False
                if '[' in str(dim):
                    bound = True
                    dim = retools.sub(r'\[.*\]', '', dim)
                qdim = '[${0}]' if not bound else '[$:{0}]'.format(dim)
                qdims.append(qdim)
            # print(' '.join(qdims))
            node.dimensions = [asttools.Dimension(value=qdim) for qdim in qdims]
        elif isinstance(node, asttools.Declaration):
            pass
    return True


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("file", help="Input Verilog file")
    args = parser.parse_args()

    with open(args.file) as f:
        contents = f.read()

    # Parse and transform the AST
    ast = asttools.parse(contents)
    if fixed_array_to_queue(ast):
        print(asttools.gen_ast_repr(ast))


if __name__ == '__main__':
    main()
