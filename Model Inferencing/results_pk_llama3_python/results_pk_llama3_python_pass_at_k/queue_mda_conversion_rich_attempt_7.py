# Generated by Ollama Llama 3
# Task: queue_mda_conversion_rich
# Attempt: 7
# Success: False
# Overall Score: 0.518

"""Convert fixed arrays to queue-based multi-dimensional arrays"""
# Imports
import re, pyverilog.ast as ast, pyverilog.lir as lir
from xforms import *

class ConvertFixedArrayToQueue(XForm):
    """Converts fixed array declarations into queues"""

    def __init__(self):
        self.name = 'convert_fixed_array_to_queue'
        super().__init__()

    def visit(self, node):
        if isinstance(node, ast.Decl) and len(node.list)>0:
            for decl in node.list:
                # Match the signal name
                if re.match(r'\$.*',decl.name):
                    # Get the dimensions of the array
                    dim=decl.type.dim

                    # Check if the dimensions are a range or not
                    if isinstance(dim[0], ast.Range):
                        # Convert to Queue syntax
                        decl.type.dim=[ast.Queue(lir.Dimension(i, '[$]', False) for i in dim)]
                        self.changes_made.append(f'Converted array {decl.name} to queue')
                    else:
                        self.changes_made.append(f'Found array declaration {decl.name}')

        # Visit children
        for c in node.children():
            self.visit(c)

def convert_fixed_array_to_queue(input_file, output_file):
    """Converts fixed arrays into queues"""
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    ConvertFixedArrayToQueue().visit(ast)

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    # Apply changes...
    modified_content = re.sub(r'queue.*', r'\1 [$]', content)
    modified_content = re.sub(r'declare .*; (\n|\t)', r'declare \1 [$:128];\2', modified_content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

if __name__ == '__main__':
    convert_fixed_array_to_queue('input.v', 'output.v')