# Generated by Ollama Llama 3
# Task: inside_op_xmr_scenarios_minimal
# Attempt: 6
# Success: False
# Overall Score: 0.485

import sys
sys.path.append('../')
from verilog_parser import *
from re import findall, compile, sub


class XformVisitor(PyVerilogVisitor):
  def __init__(self, tree):
    super().__init__(tree)

    self.pattern = compile(r'(\w+)\s+inside\s+(\w+)')

  def visit_Declaration(self, node):
    self.declarations.append(node)
    
  def visit_ModuleInstance(self, node): 
    match = findall(self.pattern, str(node).split('\n')[0])
    if len(match) > 0:
      name, inner_name = match[0]
      self.add_xmr_declaration(name, inner_name)

  def add_xmr_declaration(self, parent, child):
    declarations = [d for d in self.declarations if parent == d.name]
    if not declarations: 
      print(f'Warning: {parent} is not declared')  
    else:
      declarations[0].xmr.append(child)


class XformVisitorFactory:
  def __init__(self, tree):
    self.tree = tree

  def get_visitor(self): 
    return XformVisitor(self.tree) 

def main(args): 
  parser = argparse.ArgumentParser()
  parser.add_argument('filename', help='input file')
  
  args = parser.parse_args()

  with open(args.filename) as f:
    code = f.read()

  tree = parse(code)

  visitor_factory = XformVisitorFactory(tree)
  visitor = visitor_factory.get_visitor() 
  success = visitor.transform()
  if not success: 
    print('Failed to create test cases')
    
if __name__ == '__main__':
  main(sys.argv[1:])