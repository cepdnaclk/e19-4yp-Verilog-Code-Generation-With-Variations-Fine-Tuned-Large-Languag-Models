# Generated by Ollama Llama 3
# Task: fsm_state_rename_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.442

from pyverilog.ast import *
import re
from argparse import ArgumentParser

class RenameFsmStatesVisitor(ASTVisitor):
    """Rename FSM states throughout a module.

    Given old_prefix and new_prefix as parameters, rename all states that match 
    the prefix pattern. Update all references in case statements, assignments 
    and comparisons.
    
    Parameters:
        old_prefix: str
            The prefix of the states to be renamed
        new_prefix: str
            The prefix for the newly named states
    
    Returns:
        True if successful, False otherwise
    """
    
    def __init__(self, old_prefix, new_prefix):
        self.old_prefix = old_prefix
        self.new_prefix = new_prefix

    def visitEnum(self, enum_node):
        # Identify FSM state enums
        for member in enum_node.members:
            if re.match(r"{}\d+".format(self.old_prefix), member.name):
                member.name = self.new_prefix + "_" + member.name[1:]
    
    def visitCaseItem(self, case_item_node):
        # Update all references in case statements
        for condition in case_item_node.condition.children:
            if isinstance(condition, ASTAtom) and \
                    re.match(r"{}\d+".format(self.old_prefix), condition.value):
                condition.value = self.new_prefix + "_" + condition.value[1:]
    
    def visitAssign(self, assign_node):
        # Update assignments
        for lvalue in assign_node.lvalues:
            if isinstance(lvalue, ASTAtom) and \
                    re.match(r"{}\d+".format(self.old_prefix), lvalue.value):
                lvalue.value = self.new_prefix + "_" + lvalue.value[1:]
    
    def visitExpr(self, expr_node):
        # Update comparisons
        for condition in expr_node.children:
            if isinstance(condition, ASTAtom) and \
                    re.match(r"{}\d+".format(self.old_prefix), condition.value):
                condition.value = self.new_prefix + "_" + condition.value[1:]

def fsm_state_renamer(args):
    """Main transformation function.

    Given a Verilog module as input, traverse the AST and perform the desired 
    transformations.

    Parameters:
        args: argparse.Namespace
            The arguments passed in from the command-line interface
    
    Returns:
        True if successful, False otherwise
    """
    
    # Parse the Verilog file and create an AST
    verilog_ast = parse(args.filename)
    
    rename_fsm_states_visitor = RenameFsmStatesVisitor(
        args.old_prefix, args.new_prefix
    )
    
    # Traverse the AST using a visitor class
    success = traverse(verilog_ast, rename_fsm_states_visitor)
    
    return success

def main():
    """Command-line interface.

    Provide a command-line interface for users to interact with the 
    transformation.
    """
    
    parser = ArgumentParser(
        description="Systematically rename FSM state names throughout a module"
    )
    parser.add_argument("filename", type=str, help="The input Verilog file")
    parser.add_argument("-p1", "--old-prefix", type=str,
                        default="", help="Prefix of the states to be renamed")
    parser.add_argument("-p2", "--new-prefix", type=str,
                        default="", help="Prefix for the newly named states")
    
    args = parser.parse_args()
    
    success = fsm_state_renamer(args)
    
    if success:
        print("Success!")
    else:
        print("Failure :(")

if __name__ == "__main__":
    main()