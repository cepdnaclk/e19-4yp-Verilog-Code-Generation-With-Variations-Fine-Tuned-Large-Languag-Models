# Generated by Ollama Llama 3
# Task: signal_rename_rich
# Attempt: 7
# Success: False
# Overall Score: 0.542

"""Transforms a verilog module by renaming any signal in it."""

import re

from pyverilog.ast import *

from xform import XForm


class RenameSignal(XForm):
    """Renames signals within a Verilog module"""

    def __init__(self, old_name: str, new_name: str) -> None:
        self.old_name = old_name
        self.new_name = new_name

    def apply(self, ast: AST) -> bool:
        # Find all instances of the signal in the source
        pattern = re.compile(rf"\b{self.old_name}\b")
        matches = re.findall(pattern, str(ast))

        # Replace all occurrences with the new name
        for match in matches:
            replacement = match.replace(self.old_name, self.new_name)

        return True


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Transform a Verilog module by renaming any signal."
    )
    parser.add_argument("input_file", help="The input file to transform.")
    parser.add_argument("output_file", help="The output file name.")
    parser.add_argument(
        "signal_name",
        type=str,
        help="Old signal name that should be replaced with a new one.",
    )

    args = parser.parse_args()

    # Parse the AST
    ast, directives = parse(args.input_file)

    # Apply the transformation
    xform = RenameSignal(old_name=args.signal_name, new_name="")
    if not xform.apply(ast):
        raise ValueError("Transformation failed.")

    # Write output
    with open(args.output_file, "w") as f:
        f.write(str(ast))