# Generated by Ollama Llama 3
# Task: inside_op_array_usage_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.515

import re
from pyverilog.ast import *
from pyverilog.ast.utils import *
from pyverilog.utils.parser_visitor import ParserVisitor
from pyverilog.utils.regex_patterns import *


class TestArrayInside(ParserVisitor):
    def __init__(self, ast, pattern):
        super().__init__()
        self.pattern = pattern

    @classmethod
    def parse(cls, string):
        """Parses the given string and returns an AST.

        Args:
            string (str): A Verilog code snippet to be parsed.
        """
        return parse(string)

    @classmethod
    def build_ast(cls, ast):
        """Builds an AST from the given Verilog code snippet."""
        if not isinstance(ast, AstNode):
            raise ValueError("Expected 'AstNode' type but got '{}'.".format(type(ast)))
        return cls.buildVisitor().visit(ast)

    def visit_Assignment(self, assignment):
        if self.pattern == "whole" or self.pattern == "slice":
            index = self.get_array_index(assignment.lvalue)
            array_slice = self.is_array_slice(index)
            part_select = self.is_part_selection(index)

            if array_slice and not part_select:
                # generate test case for whole array
                return True

            elif array_slice and part_select:
                # generate test cases for sliced arrays with part select
                return False

        else:
            raise ValueError("Invalid pattern '{}'".format(self.pattern))

    def get_array_index(self, index):
        """
        Returns the AST node of an expression containing a variable or constant.
        For example: `A[5]` would return '5'
        """
        if isinstance(index, AstNode) and isinstance(index, IndexExpr):
            return self.visit(index.index)

    @staticmethod
    def is_array_slice(index):
        """
        Returns True/False for array slice expression
        For example: `A[0:4]`
        """
        index_list = re.findall('[0-9]+', str(index))

        if len(index_list) == 2:
            return True

        else:
            return False

    @staticmethod
    def is_part_selection(index):
        """
        Returns True/False for part selection expression
        For example: `A[4+:1]`
        """
        index_list = re.findall('[0-9]+', str(index))

        if len(index_list) == 2:
            return True

        else:
            return False


if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='Generate test cases for using arrays in inside operator')
    parser.add_argument('--pattern', '-p', type=str, required=True,
                        help="Specify the pattern to generate test cases")
    args = parser.parse_args()

    ast = TestArrayInside.parse('A[5]')

    visitor = TestArrayInside(ast, args.pattern)
    if not visitor.visit(Assignment()):
        print("No matching AST found.")
