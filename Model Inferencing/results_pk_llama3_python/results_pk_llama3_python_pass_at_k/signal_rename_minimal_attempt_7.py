# Generated by Ollama Llama 3
# Task: signal_rename_minimal
# Attempt: 7
# Success: False
# Overall Score: 0.552

"""
This is a script to rename signals in a verilog module.

Usage: 
    python signal_renaming.py -i <input_file> -o <output_file>

Arguments:
    -i/--input : Path to input file
    -o/--output : Path to output file
    
"""

import pyverilog.vparser.ast as ast
import re

class SignalRenamer(ast.NodeVisitor):
    
    def __init__(self, old_name, new_name):
        self.old_name = old_name 
        self.new_name = new_name 

    def visit(self, node):        
        if isinstance(node, ast.DeclarationNode):
            for decl in node.decls:
                if isinstance(decl, (ast.PortDeclNode, ast.InputDeclNode)):
                    # find all references of the signal and rename them
                    refs = re.findall('\b' + self.old_name + '\s*=', decl.expr)
                    for ref in refs:
                        expr = ref.replace(self.old_name, self.new_name) 
                        decl.expr = expr

        return node
    
def main(args):
    # parse input file
    parser = ast.parse_file(args.input)

    renamer = SignalRenamer(old_name=args.old_signal, new_name=args.new_signal)
    
    for block in parser.blocks:
        for node in block.nodes:
            result = renamer.visit(node)
            if not result:
                print("Failed to visit", node)
                return False
    
    # write output file
    ast.write_file(parser, args.output)

if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', help='Path to input file')
    parser.add_argument('-o', '--output', help='Path to output file')
    parser.add_argument('--old_signal', help='Old signal name')
    parser.add_argument('--new_signal', help='New signal name')

    args = parser.parse_args()
    
    if not args.input or not args.output:
        print("Error: Please provide input and output files")
        exit(1)

    main(args)