# Generated by Ollama Llama 3
# Task: dynamic_mda_conversion_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.502

import re
from pyverilog.ast import *
from pyverilog.util import *
from pyverilog.v5parser.printing import ASTPrinter
from argparse import ArgumentParser

# This is a visitor class that inherits from an abstract base class in order to implement 
# the transformation algorithm.
class ArrayTransformer(Visitor):

    def __init__(self):
        self.success = False # Set success flag as false by default

    def visit(self, node): 

        if isinstance(node, ASTNodeList): 
            for child in node.children: 
                self.visit(child)
        
        elif isinstance(node, AstDecl) and node.isarray: 
            ast_array = node
            array_name = ast_array.name
            dimensions = ast_array.dimensions

            # Regular expression to find the name of the array with its dimensions.
            regex_find = re.findall("\w+\[[\d\s]*?\]", str(ast_array))

            if len(regex_find) > 0: 
                for reg in regex_find:
                    if re.search(reg, str(ast_array)):
                        new_dimensions = re.sub('\d+', '', reg)
                        # Generate dynamic array syntax with [] dimensions
                        transformed_dim = "[" + new_dimensions + "]"
                        # Replace the original dimension of the fixed array with the generated one.
                        old_dimension = '[' + ast_array.dimensions + ']'
                        ast_array.dimensions = transformed_dim

                        # Validate the base signal type and width by comparing the 
                        # original ASTNodeList and the modified one.
                        if (ast_array.dimensions == transformed_dim) and \
                            (ast_array.signal_type == node.children[0].signal_type):

                            print("Transformation Successful!")
                            self.success = True
                            return

            else:
                print('No array found.')

        elif isinstance(node, AstDecl) and not node.isarray: 
            print("Not a valid ASTNodeList")

def main(args):
    parser = ArgumentParser()
    parser.add_argument('-f', action='store_true')
    args = parser.parse_args()

    if args.f:
        file = open('example.v', 'r')
        data = file.read() # Read contents of the file
        ast = parse(data) # Parse the contents using PyVerilog

        transformer = ArrayTransformer()
        result = transformer.visit(ast)

        if (transformer.success): 
            print("Success!")
            output_file = "example_transformed.v"
            ast_printer = ASTPrinter(output_file)
            ast_printer.print_ast(node=ast, show_comments=False)
        
        else:
            print("Failed!")

if __name__ == '__main__':
    main(None)