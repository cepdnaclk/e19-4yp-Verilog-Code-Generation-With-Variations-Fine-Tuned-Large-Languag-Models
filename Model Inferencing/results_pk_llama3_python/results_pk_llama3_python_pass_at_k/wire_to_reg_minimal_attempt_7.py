# Generated by Ollama Llama 3
# Task: wire_to_reg_minimal
# Attempt: 7
# Success: False
# Overall Score: 0.565

"""
Transform wire variables to reg variables

Args:
    -i, --input: Input Verilog file
    -o, --output: Output Verilog file
    
Example usage:
    python3 transform_wire_to_reg.py -i input.v -o output.v
"""

import pyverilog.parser as verilog_parser
from pyverilog.ast import *
from xform.framework.xforms import XFormBase

class TransformWireToReg(XFormBase):
    def __init__(self, *args, **kwargs):
        super(TransformWireToReg, self).__init__(*args, **kwargs)
        
    def run(self, input_file=None, output_file=None):
        if not input_file or not output_file:
            raise ValueError("Input and Output files are required.")
        try:
            with open(input_file) as f_in:
                content = f_in.read()
            
            ast_tree = verilog_parser.parse(content)
            wire_decl_list = self.get_wire_decls(ast_tree)

            for decl in wire_decl_list: 
                new_decl = Reg(decl.name, decl.size) if hasattr(decl, 'size') else Reg(decl.name)
                setattr(ast_tree, decl.__class__.__name__, new_decl)
            
        except Exception as e:
            raise ValueError("Error while processing the file: " + str(e))
        
        try:
            with open(output_file, 'w') as f_out:
                f_out.write(verilog_parser.dump(ast_tree))
        except Exception as e:
            raise ValueError("Error writing to output file: " + str(e))

    def get_wire_decls(self, ast):
        wire_list = []
        for decl in ast.declarations:
            if isinstance(decl, WireDecl): 
                wire_list.append(decl)
            elif hasattr(decl, 'declarations'):
                wire_list += self.get_wire_decls(decl)

        return wire_list

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input", help="Input Verilog file")
    parser.add_argument("-o", "--output", help="Output Verilog file")

    args = parser.parse_args()

    TransformWireToReg().run(args.input, args.output)