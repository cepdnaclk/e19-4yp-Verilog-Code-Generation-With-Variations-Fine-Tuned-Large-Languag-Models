# Generated by Ollama Llama 3
# Task: structure_type_conversion_rich
# Attempt: 5
# Success: False
# Overall Score: 0.552

from pyverilog.ast import *

import re


def find_struct(node):
    if isinstance(node, Node):
        # Check for struct declarations
        if isinstance(node, Decl):
            for item in node.list:
                if isinstance(item, Type) and \
                        (isinstance(item.type, Struct) or isinstance(item.type, Union)):
                    return True

        # Visit children
        for c in node.children():
            found = find_struct(c)
            if found:
                return True


class ConvertSignalVisitor(ExampleVisitor):
    def __init__(self, signal_name, target_type=None):
        super().__init__(signal_name)

        self.target_type = target_type

    def visit(self, node):

        # Check for signal declarations
        if isinstance(node, Decl):
            for item in node.list:
                if hasattr(item, "name") and item.name == self.signal_name:
                    struct_found = find_struct(item.type)
                    if struct_found:
                        members = []
                        found_members = False

                        # Find struct/union members
                        for child in item.type.children():
                            if isinstance(child, Member):
                                found_members = True
                                member = {}

                                # Get name and type
                                if hasattr(child, "name") and hasattr(child.expr, "type"):
                                    member["name"] = child.name
                                    member["type"] = child.expr

                                    members.append(member)

                        # Convert to struct/union type
                        item.type = Struct(members) \
                            if self.target_type == 'struct' else Union(members)
                        super().visit(node)

        # Visit children
        for c in node.children():
            super().visit(c)


def convert_signal(input_file, output_file, signal_name, target_type='struct'):
    with open(input_file, "r") as f:
        ast = parse(f.read())

    visitor = ConvertSignalVisitor(signal_name, target_type)
    visitor.visit(ast)

    # Perform regex transformations
    with open(input_file, 'r') as f:
        content = f.read()

    modified_content = re.sub(
        pattern=r'([a-zA-Z_][a-zA-Z0-9_]*)',
        replacement=f'({target_type} {signal_name})',
        string=content)

    # Write output
    with open(output_file, 'w') as f:
        f.write(modified_content)

    return True