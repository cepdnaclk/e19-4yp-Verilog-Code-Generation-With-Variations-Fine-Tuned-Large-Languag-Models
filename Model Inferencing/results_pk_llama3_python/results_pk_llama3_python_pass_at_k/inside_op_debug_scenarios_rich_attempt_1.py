# Generated by Ollama Llama 3
# Task: inside_op_debug_scenarios_rich
# Attempt: 1
# Success: False
# Overall Score: 0.255

import argparse
import re
from pyverilog.ast import *
from pyverilog.utils import *
from collections import OrderedDict

# Define constants
DEBUG = True
TEST_CASES = [
    # Verdi test case
    {"name": "Debug Test Case", 
     "description": "Generates value annotation and breakpoint test cases for Verdi debugging",
     "inputs": ["inside"],
     "outputs": [""],
     "code":[]
    },
    
    # Scountdriver scenario
    {
        "name": "Scountdriver Scenario", 
        "description": "Creates scountdriver (signal count driver) scenarios",
        "inputs": ["inside"],
        "outputs": [""],
        "code":[]
    },

    # SHDL XMR force test cases
    {"name": "SHDL XMRF Test Cases", 
     "description": "Generates SHDL XMR force test cases for debugging and testing",
     "inputs": ["inside"],
     "outputs": [""],
     "code":[]
    },
    
    # UCLI trace and VPI walker test scenarios
    {
        "name": "UCLI Trace & VPI Walker Test Scenarios", 
        "description": "Generates UCLI trace and VPI walker test cases for debugging and testing",
        "inputs": ["inside"],
        "outputs": [""],
        "code":[]
    }
]


def create_value_annotation_test_cases(node):
    """Create value annotation test cases for Verdi debugging

    Args:
        node (Node): The AST node to analyze

    Returns:
        List: A list of test case dictionaries
    """
    
    # Initialize the list of test cases
    tc_list = []

    # Loop through the inputs and outputs
    for input, output in zip(node.inputs, node.outputs):
        
        # Add a new dictionary to the list
        tc_dict = {
            "name": f"{input.name} Value Annotation Test Case",
            "description": f"Generates value annotation test case for Verdi debugging for {input.name}",
            "inputs": [""],
            "outputs": [f"{output.value}"],
            "code":[]
        }

        # Add the dictionary to the list
        tc_list.append(tc_dict)

    return tc_list


def create_trace_driver_load_test_cases(node):
    """Create trace driver/load functionality tests

    Args:
        node (Node): The AST node to analyze

    Returns:
        List: A list of test case dictionaries
    """
    
    # Initialize the list of test cases
    tc_list = []

    # Loop through the inputs and outputs
    for input, output in zip(node.inputs, node.outputs):
        
        # Add a new dictionary to the list
        tc_dict = {
            "name": f"{input.name} Trace Driver/Load Test Case",
            "description": f"Generates trace driver/load functionality test case for {input.name}",
            "inputs": [""],
            "outputs": [f"{output.value}"],
            "code":[]
        }

        # Add the dictionary to the list
        tc_list.append(tc_dict)

    return tc_list


def create_scountdriver_test_cases(node):
    """Create scountdriver (signal count driver) scenarios

    Args:
        node (Node): The AST node to analyze

    Returns:
        List: A list of test case dictionaries
    """
    
    # Initialize the list of test cases
    tc_list = []

    # Loop through the inputs and outputs
    for input, output in zip(node.inputs, node.outputs):
        
        # Add a new dictionary to the list
        tc_dict = {
            "name": f"{input.name} Scountdriver Test Case",
            "description": f"Creates scountdriver (signal count driver) scenario for {input.name}",
            "inputs": [""],
            "outputs": [f"{output.value}"],
            "code":[]
        }

        # Add the dictionary to the list
        tc_list.append(tc_dict)

    return tc_list


def create_shdl_xmr_test_cases(node):
    """Generates SHDL XMR force test cases for debugging and testing

    Args:
        node (Node): The AST node to analyze

    Returns:
        List: A list of test case dictionaries
    """
    
    # Initialize the list of test cases
    tc_list = []

    # Loop through the inputs and outputs
    for input, output in zip(node.inputs, node.outputs):
        
        # Add a new dictionary to the list
        tc_dict = {
            "name": f"{input.name} SHDL XMR Test Case",
            "description": f"Generates SHDL XMR force test case for debugging and testing for {input.name}",
            "inputs": [""],
            "outputs": [f"{output.value}"],
            "code":[]
        }

        # Add the dictionary to the list
        tc_list.append(tc_dict)

    return tc_list


def create_ucli_trace_vpi_test_cases(node):
    """Generates UCLI trace and VPI walker test cases for debugging and testing

    Args:
        node (Node): The AST node to analyze

    Returns:
        List: A list of test case dictionaries
    """
    
    # Initialize the list of test cases
    tc_list = []

    # Loop through the inputs and outputs
    for input, output in zip(node.inputs, node.outputs):
        
        # Add a new dictionary to the list
        tc_dict = {
            "name": f"{input.name} UCLI Trace & VPI Walker Test Case",
            "description": f"Generates UCLI trace and VPI walker test case for debugging and testing for {input.name}",
            "inputs": [""],
            "outputs": [f"{output.value}"],
            "code":[]
        }

        # Add the dictionary to the list
        tc_list.append(tc_dict)

    return tc_list


def create_test_cases(node):
    """Create a list of test case dictionaries for all supported scenarios

    Args:
        node (Node): The AST node to analyze

    Returns:
        List: A list of test case dictionaries
    """
    
    # Initialize the list of test cases
    tc_list = []

    # Loop through all supported scenarios
    for scenario in TEST_CASES:

        # Check if the scenario applies to the current node
        if not scenario["inputs"]:
            continue

        # Create a new dictionary for the current scenario
        tc_dict = {}

        # Set the name and description
        tc_dict["name"] = scenario["name"]
        tc_dict["description"] = scenario["description"]

        # Check if there are inputs specified
        if not scenario["inputs"]:
            tc_dict["inputs"] = [""]
        else:
            tc_dict["inputs"] = []

            # Loop through the inputs and create a new dictionary for each one
            for input in scenario["inputs"]:
                inp_dict = {
                    "name": f"{input.name}",
                    "description": f"Generates test case for {input.name}"
                }

                # Add the dictionary to the list of inputs
                tc_dict["inputs"].append(inp_dict)

        # Check if there are outputs specified
        if not scenario["outputs"]:
            tc_dict["outputs"] = [""]
        else:
            tc_dict["outputs"] = []

            # Loop through the outputs and create a new dictionary for each one
            for output in scenario["outputs"]:
                outp_dict = {
                    "value": f"{output.value}",
                    "description": f"Output value is {output.value}"
                }

                # Add the dictionary to the list of outputs
                tc_dict["outputs"].append(outp_dict)

        # Check if there are codes specified
        if not scenario["code"]:
            tc_dict["code"] = [""]
        else:
            tc_dict["code"] = []

            # Loop through the codes and create a new dictionary for each one
            for code in scenario["code"]:
                code_dict = {
                    "description": f"Code description",
                    "value": f"{code.value}"
                }

                # Add the dictionary to the list of codes
                tc_dict["code"].append(code_dict)

        # Add the current dictionary to the list of test cases
        tc_list.append(tc_dict)

    return tc_list


def create_value_annotation_test_cases_for_verdi_debugging(node):
    """Creates value annotation test cases for Verdi debugging

    Args:
        node (Node): The AST node to analyze

    Returns:
        List: A list of test case dictionaries
    """
    
    # Initialize the list of test cases
    tc_list = []

    # Loop through all inputs and outputs
    for input, output in zip(node.inputs, node.outputs):
        
        # Check if the current input has a name attribute
        if not hasattr(input, "name"):
            continue
        
        # Add a new dictionary to the list of test cases
        tc_dict = {
            "name": f"{input.name} Value Annotation Test Case",
            "description": f"Generates value annotation test case for Verdi debugging for {input.name}",
            "inputs": [""],
            "outputs": [f"{output.value}"],
            "code":[]
        }
        
        # Add the current dictionary to the list of test cases
        tc_list.append(tc_dict)

    return tc_list


def create_trace_driver_load_test_cases_for_node(node):
    """Creates trace driver/load functionality tests

    Args:
        node (Node): The AST node to analyze

    Returns:
        List: A list of test case dictionaries
    """
    
    # Initialize the list of test cases
    tc_list = []

    # Loop through all inputs and outputs
    for input, output in zip(node.inputs, node.outputs):
        
        #