# Generated by Ollama Llama 3
# Task: multi_signal_width_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.555

"""Transform multiple signals' bit widths at once"""
import pyverilog.ast as ast
from pyverilog.visitor import Visitor


class BitwidthTransformer(Visitor):
    """Bit width transformer that handles both packed and unpacked arrays"""

    def __init__(self, signal_names, new_widths):
        self.signal_names = signal_names
        self.new_widths = new_widths

    def visit(self, node):
        if isinstance(node, ast.Declaration) or \
            isinstance(node, ast.Parameter) or \
            isinstance(node, ast.Assignment):

            for sig_name in self.signal_names:
                if sig_name in node.name:
                    index = node.decls.index(sig_name)
                    # If the declaration is a packed array,
                    # update its size
                    if hasattr(node.decls[index], 'packed'):
                        node.decls[index].size = self.new_widths[sig_name]
                        continue

            return node

        elif isinstance(node, ast.Array) and len(self.signal_names) > 0:
            for sig_name in self.signal_names:
                # If the declaration is an unpacked array,
                # update its size
                if hasattr(node.decls[0], 'packed'):
                    index = node.decls.index(sig_name)
                    node.decls[index].size = self.new_widths[sig_name]

            return node

        else:
            for sig_name in self.signal_names:
                if sig_name in node.name:
                    # Update the width of the signal
                    index = node.decls.index(sig_name)
                    decl = node.decls[index]
                    decl.width = self.new_widths[sig_name]

            return node


def transform_bitwidth(args):
    """Transform a design's bit widths using xform"""

    if not args.design or not args.filename:
        print('Usage: python -m xforms <design> --filename=<filename>')
        return False

    from pyverilog.frontend import parse
    from pyverilog.ast_tools.codegen.xform import xform

    # Parse the design
    v_file = parse(args.design, filename=args.filename)
    ast_root = v_file.getAstRoot()

    signal_names = args.signal.split(',')
    new_widths = {}
    for sig_name in signal_names:
        if not (sig_name and len(sig_name.strip()) > 0):
            print('Invalid signal name: {}'.format(sig_name))
            return False

        if not (args.width[sig_name] and \
                len(args.width[sig_name].strip()) > 0):
            print('Invalid width for signal {}.'.format(sig_name))

        new_widths[sig_name] = int(args.width[sig_name])

    xform(ast_root, BitwidthTransformer(signal_names, new_widths))
    return True