# Generated by Ollama Llama 3
# Task: signal_width_change_minimal
# Attempt: 6
# Success: False
# Overall Score: 0.478

import sys
sys.path.append('../')
from verilog_ast import ASTNode, parse_file
import re

class ChangeSignalWidth(XForm):

    def transform(self):
        """Replace a signal's bit width specification."""
        
        self._logger.info("ChangeSignalWidth: Transforming %s" % self._filename)
        
        # Parse and analyze the Verilog file.
        parsed_ast = parse_file(self._filename, self._lib_path)

        # Find target elements.
        signal_nodes = find_elements(parsed_ast, "signal")

        # Perform text transformations using regex.
        new_width = int(self._args["width"])
        for node in signal_nodes:
            if not re.search("(\w+\s+)?(\[\w+\])?\s*:\s*(\d+)\s*", node.text):
                self._logger.error("Error: Node does not have the correct format.")
                return False
            else:
                reg_str = "(?P<width>\d+)"
                new_node_text = re.sub(reg_str, str(new_width), node.text)
                if new_node_text != node.text:
                    node.text = new_node_text

        # Generate new Verilog file.
        self._logger.info("ChangeSignalWidth: Writing %s" % self._filename)
        output_file.write(parsed_ast.to_string())

        return True


if __name__ == "__main__":
    ChangeSignalWidth().run()