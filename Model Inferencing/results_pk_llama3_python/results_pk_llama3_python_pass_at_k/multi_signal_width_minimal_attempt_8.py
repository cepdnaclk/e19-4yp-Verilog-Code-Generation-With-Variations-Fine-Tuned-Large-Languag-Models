# Generated by Ollama Llama 3
# Task: multi_signal_width_minimal
# Attempt: 8
# Success: False
# Overall Score: 0.492

import pyverilog.vparser.ast as ast
from pyverilog.vparser.ast import *
import re


class ChangeBitWidth(ast.NodeVisitor):
    def __init__(self, signal_list, new_width):
        self.signal_list = signal_list
        self.new_width = new_width

    def visit_Declaration(self, node):

        if isinstance(node, ast.Decl):  # unpacked arrays
            for decl in node.decls:
                for signal in self.signal_list:
                    if signal == decl.name and decl.width != self.new_width:
                        decl.width = self.new_width
        elif isinstance(node, ast.PackedDecl):  # packed arrays
            for packed_decl in node.decl:
                for signal in self.signal_list:
                    if signal == packed_decl.name and \
                            packed_decl.width != self.new_width:
                        packed_decl.width = self.new_width

        return self.generic_visit(node)

    def visit_Expression(self, node):
        # not sure what to do with expressions
        pass


def main():
    parser = argparse.ArgumentParser(
        description='Change the bit width of multiple signals at once')
    parser.add_argument('input_file', help="Input file name")
    parser.add_argument('--signals',
                        nargs="+",
                        required=True,
                        help="List of signal names to change width")
    parser.add_argument(
        '--new_width',
        type=int,
        required=True,
        help='New bitwidth for the signals')
    args = parser.parse_args()

    # parse input
    tree = ast.parse(open(args.input_file).read())
    visitor = ChangeBitWidth(args.signals, args.new_width)
    visitor.visit(tree)

    print("Success!")


if __name__ == '__main__':
    main()