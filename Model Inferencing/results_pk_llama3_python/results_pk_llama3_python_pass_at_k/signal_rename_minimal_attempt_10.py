# Generated by Ollama Llama 3
# Task: signal_rename_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.472

import pyverilog.ast.tools as vtools

from pyverilog.parser import parse
from pyverilog.utils import get_verilog_code

class RenameSignal(vtools.ASTVisitor):
    def __init__(self, old_name, new_name):
        self.old_name = old_name 
        self.new_name = new_name 

    def visit(self, node): 
        if isinstance(node, vtools.ModuleAST):
            for decl in node.declarations:
                if isinstance(decl, vtools.PortDeclAST) and decl.name == self.old_name: 
                    decl.name = self.new_name
                    return True

                elif isinstance(decl, vtools.DeclAST) and decl.name == self.old_name: 
                    decl.name = self.new_name
                    return True

            for stmt in node.statements:
                if isinstance(stmt, vtools.StatementAST):
                    stmt.accept(self)
        else:
            node.accept(self)

    def visit_decl(self, decl): 
        if decl.name == self.old_name: 
            decl.name = self.new_name
            return True
        
        elif decl.type == 'signal' and decl.value == self.old_name: 
            decl.value = self.new_name
            return True

        for expr in decl.init:
            expr.accept(self)

    def visit_statement(self, stmt): 
        if isinstance(stmt, vtools.AssignStatementAST):
            if stmt.rhs.expr.name == self.old_name: 
                stmt.rhs.expr.name = self.new_name
                return True

            elif isinstance(stmt.lhs, vtools.IdentifierExprAST) and stmt.lhs.name == self.old_name:
                stmt.lhs.name = self.new_name
                return True
        
        for expr in stmt.conditional:
            expr.accept(self)

    def visit_identifierexpr(self, expr): 
        if expr.name == self.old_name: 
            expr.name = self.new_name
            return True

def xform_renamesignal(old_name, new_name):
    code = get_verilog_code(sys.argv[1])
    ast = parse(code).top_level_module()

    result = RenameSignal(old_name, new_name).visit(ast)

    if result:
        print("Transformation successful!")
        print(ast.to_string())
    else:
        print("Transformation failed.")

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('old_name', help="Old signal name")
    parser.add_argument('new_name', help="New signal name")

    args = vars(parser.parse_args())

    xform_renamesignal(args['old_name'], args['new_name'])