# Generated by Ollama Llama 3
# Task: signal_width_change_minimal
# Attempt: 1
# Success: False
# Overall Score: 0.392

import sys 
sys.path.append('../') # add path to parent directory containing pyverilog.py

import argparse 
from pyverilog.ast import *
from pyverilog.parser import parse, parseFile
from pyverilog.astutils import *

parser = argparse.ArgumentParser(description="Transform signal width specification")
parser.add_argument("filename", type=str)
parser.add_argument("signal_name", type=str)
parser.add_argument("old_width", type=int)
parser.add_argument("new_width", type=int)

args = parser.parse_args()
file_path = args.filename
name = args.signal_name
old_width = args.old_width
new_width = args.new_width

def _transform(ast):
    new_ast = ast
    # find declaration node with signal name 
    for node in ast:
        if isinstance(node, DeclarationNode) and node.name == name: 
            # modify the declaration's width
            node.width = new_width
            break
    
    return new_ast 

if __name__ == "__main__":
    try:
        # parse file into AST
        ast = parseFile(file_path)
        
        # call transformation function
        transformed_ast = _transform(ast) 
        
        # print the transformed code 
        transformed_code = transformed_ast.toVerilog()
        print(transformed_code)

    except ParseException as e: 
        print(e)