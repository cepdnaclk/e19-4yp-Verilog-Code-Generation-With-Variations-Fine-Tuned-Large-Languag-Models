# Generated by Ollama Llama 3
# Task: add_enable_signal_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.428

import pyverilog.ast.tools as asttools
from pyverilog.parser import parse
import re

def addEnableSignal(inAst):
    """Add enable signal to control a counter"""
    
    # Initialize an empty list of statements 
    stmts = []
    
    # Identify 'always' and 'reg' blocks
    alwaysBlocks = [block for block in inAst if isinstance(block, asttools.Block) and (block.blockType == 'always')]
    regBlocks = [block for block in inAst if isinstance(block, asttools.Block) and (block.blockType == 'reg')]
    
    # Find all counter increment statements
    counterIncrements = [stmt for stmt in stmts if isinstance(stmt, asttools.Assignment) and (stmt.lhs.name == 'counter' and stmt.op == '=')]

    # Add enable signal as a new input port to the always blocks
    for block in alwaysBlocks:
        if isinstance(block, asttools.Block):
            inputs = [input for input in block.inputs]
            for input in inputs:
                if input.name not in ('clk', 'reset_n'):
                    block.inputs.append(asttools.Input('enable'))
    
    # Wrap counter increments with enable condition
    for stmt in counterIncrements:
        stmts.append(asttools.Assignment(stmt.lhs, stmt.op, asttools.TernaryOp('if (enable) ', asttools.BinaryOp('+', 'counter', 1), 'counter')))
    
    # Preserve existing sensitivity lists and reset logic
    for block in alwaysBlocks: 
        if isinstance(block, asttools.Block):
            sens_list = [sensitivity for sensitivity in block.sensList]
            reset_logic = [reset for reset in block.resetList]
            
            block.sensList = []
            block.resetList = []
        
            # Append the original sensitivity list
            for element in sens_list:
                block.sensList.append(element)
                
            # Append the original reset logic
            for element in reset_logic:
                block.resetList.append(element)

    # Return True if success, False otherwise
    return True

def main():
    """Main transformation function"""
    
    import argparse
    
    parser = argparse.ArgumentParser(description='Add enable signal to control a counter')
    parser.add_argument('-f', '--filename', help='The name of the Verilog file to be transformed.')
    args = parser.parse_args()
    
    if not (args.filename):
        print("No filename provided")
        exit(1)
        
    # Parse the input file
    inAst = parse(args.filename, full_ast=True).top()

    # Transform the AST
    result = addEnableSignal(inAst)

    # Check for errors
    if not result:
        print("Failed to transform the AST.")
        exit(1)
    
    # Generate a new Verilog file with transformed code
    outAst = asttools.to_verilog(inAst, filename=args.filename + '.sv')
    
    # Print the output
    print(outAst)

if __name__ == "__main__":
    main()