# Generated by Ollama Llama 3
# Task: structure_type_conversion_rich
# Attempt: 10
# Success: False
# Overall Score: 0.582

```python
import pyverilog.parser as parser
from pyverilog.ast import *


class StructVisitor(ExampleVisitor):
    """Transforms signals to use struct/union types"""

    def __init__(self, signal_name):
        self.struct_found = False
        super().__init__(signal_name)

    def visit(self, node):
        if isinstance(node, Node):
            # Find signal declarations
            if isinstance(node, Decl) and hasattr(node, "list"):
                for item in node.list:
                    if hasattr(item, "name") and item.name == self.signal_name:
                        self.struct_found = True

            # Visit children
            for c in node.children():
                self.visit(c)

        return super().visit(node)


def transform_struct(input_file, output_file):
    """Transform signals to use struct/union types"""

    # Parse AST
    ast, directives = parser.parse([input_file])

    # Apply visitor class
    visitor = StructVisitor("signal_name")
    visitor.visit(ast)

    if not visitor.struct_found:
        print(f"{input_file} does not contain {visitor.signal_name}")
        return False

    with open(input_file, "r") as f:
        content = f.read()

    # Create struct definition and add to AST
    def create_struct(node):
        name = node.name.split("_")[0] + "_struct"
        members = []
        for n in node.children():
            if isinstance(n, Decl) and hasattr(n, "list"):
                for m in n.list:
                    members.append(m)
            elif isinstance(n, Node):
                members.extend(create_struct(n))

        struct = Decl(name=name, type=Struct, list=members)

        return [struct] + create_struct(node)

    new_node = create_struct(ast)

    # Modify AST
    ast = Ast(decl=new_node)

    # Transform text
    def transform_text(node):
        if isinstance(node, Node) and hasattr(node, "name"):
            name = node.name.split("_")[0]
            struct_name = f"{name}_struct"

            # Convert to packed or unpacked struct
            if isinstance(node, RegDecl):
                packed = node.ispacked

            # Create struct definition
            decl_node = Decl(name=struct_name, type=Struct, list=node.list)

            # Replace original declaration with struct/union
            node.parent.replace_with(decl_node)
            new_reg_decl = RegDecl(ispacked=packed,
                                   name=name + "_reg",
                                   base_type=BaseType(type=BaseType.Type.reg))
            decl_node.append_child(new_reg_decl)

        return super().visit(node)

    transformed_ast = transform_text(ast)

    # Write output
    with open(output_file, "w") as f:
        f.write(transformed_ast.to_string())

    return True


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("input", help="Input verilog file")
    parser.add_argument("output", help="Output transformed verilog file")

    args = parser.parse_args()

    success = transform_struct(args.input, args.output)
    if not success:
        print(f"Error transforming {args.input}")
```