# Generated by Ollama Llama 3
# Task: queue_mda_conversion_minimal
# Attempt: 8
# Success: False
# Overall Score: 0.462

import pyverilog
from pyverilog.ast import *
import re


def convert_fixed_to_queue(ast, queue_dict):
    visitor = FixedArrayVisitor(queue_dict)
    pyverilog.visit(visitor, ast)

class FixedArrayVisitor(pyverilog.visitors.Visitor):

 def __init__(self, queue_dict):
  self.queue_dict = queue_dict

 def visit_Decls(self, decls):
  for d in decls.decls:
   if isinstance(d, Declarator):
    t = d.type
    if isinstance(t, FixedArray):
     q = self.create_queue(t)
     d.type = q
     
 def create_queue(self, array):

  # find dimensions
  dim_list = []
  for i in range(len(array.dim)):
   if array.dim[i].is_fixed():
    dim_list.append(array.dim[i])

  # create queue definition
  bound = [d.lower_bound for d in dim_list] + \
          [d.upper_bound for d in dim_list]
  q = Queue(['$'] * len(bound), bound)
  self.queue_dict[array.name] = q
  
  return q

class QueueVisitor(pyverilog.visitors.Visitor):

 def __init__(self, queue_dict):
  self.queue_dict = queue_dict

 def visit_Decls(self, decls):
  for d in decls.decls:
   if isinstance(d, Declarator):
    t = d.type
    if isinstance(t, Queue):
     q = self.queue_dict[t.name]
     d.type = q

if __name__ == '__main__':
 parser = argparse.ArgumentParser()
 parser.add_argument('filename')
 args = parser.parse_args()

 # parse file and create AST
 ast = pyverilog.parser.get_ast(args.filename)

 queue_dict = {}
 convert_fixed_to_queue(ast, queue_dict)
 convert_fixed_to_queue(ast, queue_dict)

 print("Queues:")
 for k in queue_dict:
  q = queue_dict[k]
  print(k + " : " + str(q))