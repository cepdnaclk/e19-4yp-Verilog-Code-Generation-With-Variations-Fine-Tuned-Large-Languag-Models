# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.588

import pyverilog.ast.tools as vtools

from pyverilog.parser import parse_file

class ResetConditionXform(object):

    def __init__(self):
        self.target = None

    def visit_Asgn(self, node):
        if isinstance(node.lhs, vtools.Term) and node.lhs.name == 'reset':
            # Find reset signal usage in if statements
            for cond in node.conds:
                if isinstance(cond.cond, vtools.Comp) and \
                        any(c.node.name == 'rst' for c in cond.cond):
                    self.target = node

    def transform(self):
        # Change if(rst) to if(!rst) or vice versa
        if self.target is not None:
            node = self.target
            if node.conds[0].cond.kind == vtools.NOT:
                new_cond = vtools.Comp(cond=node.conds[0].cond.cond)
                for cond in node.conds:
                    if isinstance(cond.cond, vtools.Comp) and \
                            any(c.node.name == 'rst' for c in cond.cond):
                        new_cond.append(cond.cond)
                node.conds = [vtools.Lit(True), new_cond]
            else:
                new_cond = vtools.Comp(cond=vtools.NOT(node.conds[0].cond.cond))
                for cond in node.conds:
                    if isinstance(cond.cond, vtools.Comp) and \
                            any(c.node.name == 'rst' for c in cond.cond):
                        new_cond.append(cond.cond)
                node.conds = [new_cond]
            # Update sensitivity lists (posedge to negedge)
            for edge in self.target.edges:
                edge.kind = vtools.NEGEDGE
        return True

def transform_reset_condition(ast, filename=None):
    xform = ResetConditionXform()
    parser = parse_file(filename)
    visitor = vtools.DefaultVisitor(xform)
    try:
        ast.visit(visitor)
    except Exception as e:
        print(e)
    if not xform.transform():
        print('Failed to transform %s' % filename)
    else:
        return xform.target

if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', type=str, help='input Verilog file')
    args = parser.parse_args()

    ast = parse_file(args.filename)
    result = transform_reset_condition(ast)