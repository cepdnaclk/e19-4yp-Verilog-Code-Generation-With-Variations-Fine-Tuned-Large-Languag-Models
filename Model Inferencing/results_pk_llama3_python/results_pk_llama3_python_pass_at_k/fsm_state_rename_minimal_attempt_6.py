# Generated by Ollama Llama 3
# Task: fsm_state_rename_minimal
# Attempt: 6
# Success: False
# Overall Score: 0.265

import sys
sys.path.append('../')
from verilog.ast import *
import re


def transform(self, root):
    self.visit(root)
    
    def __init__(self):
        pass
 
    def visit_AstNode(self, node): # base class
        for child in node.children:
            self.visit(child)

    def visit_Module(self, module):
        for decl in module.decls:
            if isinstance(decl, ParamDecl) and decl.name == 'old_prefix':
                old_prefix = str(decl.default_value)
            elif isinstance(decl, ParamDecl) and decl.name == 'new_prefix':
                new_prefix = str(decl.default_value)
        
        self.visit(module.body)

    def visit_Decl(self, decl):
        if (isinstance(decl, EnumDecl) or isinstance(decl, Params)) and re.match(r"^old_.*$", decl.name):
            decl.name = new_prefix + "_" + decl.name
            for item in decl.items:
                if isinstance(item, Item) and re.match(r"^(old_).*", str(item)):
                    item.value = new_prefix + "_" + item.value
        
        self.visit(decl.body)
 
    def visit_CaseItem(self, case_item):
        if isinstance(case_item, CaseItem) and re.match(r"^old_.*$", case_item.expr):
            case_item.expr = new_prefix + "_" + case_item.expr

    def visit_Assign(self, assign):
        if isinstance(assign, Assign) and re.match(r"^old_.*$", assign.lhs):
            assign.lhs = new_prefix + "_" + assign.lhs
        self.visit(assign.rhs)

    def visit_Compare(self, compare):
        for expr in compare.exprs:
            if isinstance(expr, CompareExpr) and re.match(r"^old_.*$", str(expr)):
                expr = new_prefix + "_" + str(expr)
