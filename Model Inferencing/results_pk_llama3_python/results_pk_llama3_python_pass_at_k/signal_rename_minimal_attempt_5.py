# Generated by Ollama Llama 3
# Task: signal_rename_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.525

"""Transform any signal throughout a Verilog module.

This transformation takes an old_name and new_name as parameters.
It finds all occurrences of the signal, replaces it in declarations,
assignments, and references. It ensures only whole word matches (not
partial).

Usage:

transform_signals --old_name=old_name --new_name=new_name

"""

import argparse
from pyverilog.ast import *
import re


def replace_signal(module, old_name, new_name):
    # get all occurences of the signal and replace with new name
    for node in module.nodes:
        if isinstance(node, Declaration) and \
            'signal' in node.attributes.keys():
            node.name = re.sub(r'\b{}\b'.format(old_name), new_name, 
                                node.name)
        elif isinstance(node, Assignment):
            node.assign = re.sub(r'\b{}\b'.format(old_name), new_name,
                                 node.assign)
        elif isinstance(node, Reference):
            node.ref = re.sub(r'\b{}\b'.format(old_name), new_name,
                              node.ref)


def transform_signals(ast_root, old_name, new_name):
    replace_signal(ast_root, old_name, new_name)

if __name__ == '__main__':
    # parse command-line arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('--old_name', help='Old signal name')
    parser.add_argument('--new_name', help='New signal name')

    args = parser.parse_args()

    # get the AST and perform the transformation 
    ast_root = PyVerilog.get_ast(args.old_name)
    transform_signals(ast_root, args.old_name, args.new_name)

    # write output to file
    with open(args.new_name, 'w') as f:
        f.write(str(ast_root))