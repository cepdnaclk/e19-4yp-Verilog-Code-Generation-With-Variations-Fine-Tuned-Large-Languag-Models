# Generated by Ollama Llama 3
# Task: inside_op_xmr_scenarios_rich
# Attempt: 6
# Success: False
# Overall Score: 0.352

```python
import os
from pyverilog.parser import parse
from pyverilog.ast.utils import *
from pyverilog.util import get_top_module_name, split_line


def find_test_cases(mod, name):
    # Find test case declarations in a module
    if isinstance(mod, Decl) and mod.name == "test":
        for item in mod.list:
            if hasattr(item, 'name') and item.name == name:
                return True

    # Search children
    for child in mod.children():
        find_test_cases(child, name)

def find_module_with_name(top_list, target_module):
    for top in top_list:
        if top.name == target_module:
            return top
        else: 
            continue

def generate_xmr_scenario(parent, target_module, name, interface_type):
    test_case = Decl(name)
    
    # Generate XMR scenario
    xmr_case = Decl("xmr_case")
    xmr_case.list.append(Decl(target_module))
    test_case.list.append(xmr_case)

    # Add interface and class declarations
    interface_decls = [Decl(interface) for interface in interface_type]
    test_case.list.extend(interface_decls)
    
    return parent, test_case

def generate_xmr_scenario_virtual_interface(parent, target_module, name):
    xmr_case = Decl("xmr_case")
    xmr_case.list.append(Decl(target_module))
    parent.children().append(xmr_case)

def generate_test_cases(top_list, target_module, interface_type): 
    # Find test case declarations in a module
    if isinstance(top_list, list):
        for top in top_list:
            find_test_cases(top, "xmr_case")

    # Generate XMR scenario
    parent = Decl("testbench")
    parent.children().append(Decl(target_module))

    for top in top_list: 
        generate_xmr_scenario(parent, target_module, "xmr_case", interface_type)

    return parent

def find_virtual_interface(top):
    if isinstance(top, InterfaceRef) and top.type == 'virtual':
        # Return the module name
        return top.name
    
    # Search children
    for child in top.children():
        find_virtual_interface(child)
    
def generate_test_cases_virtual_interface(top_list, target_module): 
    parent = Decl("testbench")
    parent.children().append(Decl(target_module))

    for top in top_list: 
        generate_xmr_scenario_virtual_interface(parent, target_module, "xmr_case")

def transform_xmr_scenarios(input_file, output_file):
    # Parse AST
    ast, directives = parse([input_file])

    # Get the top module name
    top_name = get_top_module_name(ast)

    # Find test case declarations in a module
    if find_test_cases(ast, "xmr_case"):
        generate_test_cases(ast.children(), top_name, ['uvm_reg'])
    elif find_virtual_interface(ast):
        generate_test_cases_virtual_interface(ast.children(), top_name)
    else:
        print("No XMR scenario found!")

def main():
    parser = argparse.ArgumentParser(description="Transform xmr scenarios")
    parser.add_argument("-i", "--input_file", type=str, help="Input file path")
    parser.add_argument("-o", "--output_file", type=str, help="Output file path")

    args = parser.parse_args()

    if not args.input_file or not args.output_file:
        print("Please provide input and output files!")
        return

    transform_xmr_scenarios(args.input_file, args.output_file)

if __name__ == "__main__":
    main()
```