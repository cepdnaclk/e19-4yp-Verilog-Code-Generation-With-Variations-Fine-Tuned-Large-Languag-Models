# Generated by Ollama Llama 3
# Task: associative_mda_conversion_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.552

import re
from pyverilog.ast import *

class ArrayToAssoc(ArrayVisitor):
    def visit_Assign(self, node):
        if isinstance(node.lhs, Array) and isinstance(node.rhs, Array):
            key_type = 'string'
            # TODO: find the correct key type from array declaration

            self.transform(node)
        
        return super().visit_Assign(node)

    def transform(self, node):
        lhs, rhs = node.lhs, node.rhs
        new_lhs = re.sub(r'\[(\w+)\]', lambda m: '[{}]'.format(key_type), str(lhs))
        new_rhs = re.sub(r'\[(\w+)\]', lambda m: '[{}]'.format(key_type), str(rhs))

        if not isinstance(new_lhs, ASTNode):
            node.lhs = None
        else:
            node.lhs = new_lhs

        if not isinstance(new_rhs, ASTNode):
            node.rhs = None
        else:
            node.rhs = new_rhs


def array_to_assoc():
    # TODO: add command-line interface (argparse)
    visitor = ArrayToAssoc()
    ast_list = PyVerilog.parse_file('file.v')
    
    try:
        for ast in ast_list:
            if not visitor.visit(ast):
                raise Exception("Failed to transform AST")
        
        return True
    except Exception as e:
        print(e)