```python
import pyverilog.ast as ast
from pyverilog.parser import parse
from pyverilog.ast.utils import *
from re import sub, findall
import argparse


class StructVisitor(ast.NodeVisitor):
    def __init__(self, signal_name):
        self.signal_name = signal_name
        self.changes_made = []
        self.struct_found = False

    def visit(self, node):
        if isinstance(node, ast.Decl):
            for item in node.list:
                if hasattr(item, "name") and item.name == self.signal_name:
                    self.struct_found = True
                    self.changes_made.append(f"Found {self.signal_name}")

        # Visit children
        for c in node.children():
            self.visit(c)


def transform_struct(input_file, output_file, signal_name):
    ast, directives = parse([input_file])

    visitor = StructVisitor(signal_name)
    visitor.visit(ast)

    with open(input_file, "r") as f:
        content = f.read()

    # Apply changes...
    modified_content = sub(
        r"(?P<signal>\b{}\b)(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?(\s+)?(\w+)?