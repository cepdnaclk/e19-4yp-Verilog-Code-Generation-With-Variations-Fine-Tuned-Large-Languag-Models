# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.585

import pyverilog as v
import re
from xform import XForm, TransformationFailure

class ResetConditionTransformer(XForm):
    """Transforms reset conditions from active-high to active-low or vice versa."""
    
    def __init__(self, args):
        super().__init__(args)
        self.reset_condition = args.reset_condition
        
    def visit_module(self, module):
        """Visits a Verilog module and performs the transformation on it."""
        # Iterate through all instances of if statements in the module
        for instance in v.iter_instances('if', module):
            self._transform_reset_condition(instance)
        
    def _transform_reset_condition(self, if_statement):
        """Transforms the reset condition of an if statement."""
        # Find the reset signal in the sensitivity list
        reset_signal = v.find_sensitivity_list('rst', if_statement)
        
        # Update the reset condition based on the user's preference
        if self.reset_condition == 'active-low':
            if_statement['if'] = re.sub(r'if\((.*)\)\s*;', r'if(!\1);', if_statement['if'])
            reset_signal.data[0] = '!{}'.format(reset_signal.data[0])
        elif self.reset_condition == 'active-high':
            if_statement['if'] = re.sub(r'if\((.*)\)\s*;', r'if(\1);', if_statement['if'])
            reset_signal.data[0] = '{}'.format(reset_signal.data[0])
        else:
            raise TransformationFailure('Invalid reset condition')
        
    def transform(self, module):
        """Performs the transformation on a Verilog module."""
        try:
            self.visit_module(module)
            return True
        except TransformationFailure as e:
            print(e)
            return False

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser()
    parser.add_argument('--reset-condition', choices=['active-high', 'active-low'], required=True)
    args = parser.parse_args()
    
    xform = ResetConditionTransformer(args)
    module = v.load('input.v')
    if xform.transform(module):
        print('Reset condition transformed successfully.')
    else:
        print('Error transforming reset condition.')