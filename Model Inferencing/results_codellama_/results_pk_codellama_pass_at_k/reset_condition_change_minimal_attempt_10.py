# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.375

```
import pyverilog
from pyverilog import *
import re
import argparse

class reset_cond(xform):
    def __init__(self,*args,**kwargs):
        super().__init__(*args,**kwargs)
        self.name = 'Reset Condition'
        self.description = 'Change reset condition from active-high to active-low or vice versa'

    def find_targets(self,ast,*args,**kwargs):
        targets = []
        for node in ast:
            if isinstance(node,IfStatement):
                if re.search('rst',node.condition):
                    targets.append(node)
        return targets

    def transform_targets(self,ast,*args,**kwargs):
        for target in self.find_targets(ast,*args,**kwargs):
            if re.search('rst',target.condition):
                old_cond = target.condition
                new_cond = '!rst'
                target.condition = new_cond
                target.sensitivity_list.extend(['negedge rst'])
            else:
                old_cond = target.condition
                new_cond = 'rst'
                target.condition = new_cond
                target.sensitivity_list.remove('posedge rst')
        return ast

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Reset Condition Transformation Tool')
    parser.add_argument('--file', required=True, help='Verilog file to transform')
    args = parser.parse_args()
    with open(args.file,'r') as f:
        ast = parse(f)
        result = reset_cond().transform(ast)
        if result:
            print('Reset condition successfully transformed')
        else:
            print('Error in transformation')
```