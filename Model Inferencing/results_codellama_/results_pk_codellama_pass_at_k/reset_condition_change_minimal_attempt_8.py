# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 8
# Success: False
# Overall Score: 0.395

```
from pyverilog import *
import re
import argparse

class ResetCondTransformation(Visitor):
    def __init__(self, args):
        self.args = args
        self.target_sigs = []

    def visit_module(self, module):
        super().visit_module(module)
        for sig in module.signals:
            if sig.name in self.target_sigs:
                # update sensitivity lists (posedge to negedge)
                for inst in module.instances:
                    for port in inst.ports:
                        if port.name == "rst":
                            port.sensitivities = ["negedge rst"]
                # change reset condition from active-high to active-low or vice versa
                for stmt in module.statements:
                    if isinstance(stmt, IfStatement):
                        if stmt.cond.name == "rst":
                            if self.args.reset_cond == "active-low":
                                stmt.cond = ~stmt.cond
                            elif self.args.reset_cond == "active-high":
                                stmt.cond = stmt.cond
                            else:
                                raise ValueError(f"Invalid reset condition: {self.args.reset_cond}")
        return module

    def visit_instance(self, instance):
        super().visit_instance(instance)
        for port in instance.ports:
            if port.name == "rst":
                self.target_sigs.append(port.connection.name)
        return instance

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--reset-cond", default="active-high", choices=["active-low", "active-high"])
    args = parser.parse_args()

    # parse and analyze Verilog file
    design = PyVerilog.read("design.v")
    design.analyze()

    # transform module to change reset condition
    ResetCondTransformation(args).visit_module(design)

    # write transformed Verilog file
    with open("design_reset_cond.v", "w") as f:
        f.write(design.to_verilog())
```
The above code defines a `ResetCondTransformation` class that inherits from the existing `Visitor` class in the xform framework. The `__init__` method takes an argument object `args` that contains the command-line arguments parsed by `argparse`. The `visit_module` and `visit_instance` methods are overridden to identify target signals (i.e., those with names matching the reset signal name) and update their sensitivity lists (from `posedge rst` to `negedge rst`) or change the reset condition from active-high to active-low or vice versa. The `main` function defines a command-line interface using `argparse` that takes an argument `--reset-cond` with default value "active-high". It then parses and analyzes the Verilog file, transforms the module using the transformation class, and writes the transformed Verilog file to disk.