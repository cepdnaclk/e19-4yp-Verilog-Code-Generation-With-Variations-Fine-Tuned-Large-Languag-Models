# Generated by Ollama Llama 3
# Task: inside_op_array_usage_minimal
# Attempt: 9
# Success: False
# Overall Score: 0.548


import pyverilog as v
import re
import argparse
from pathlib import Path

class ArrayInsideOperatorTransform(v.Visitor):
    def __init__(self, args):
        self.args = args
        self.regex_array_whole = r"(.*)\[.*\](.*)"
        self.regex_array_slice = r"(.*)\[(.*):(.*)\](.*)"
        self.regex_array_partselect = r"(.*)\[(.*)(?::(.*))?(:(.*))?\](.*)"
        self.regex_array_select = r"(.*)\[(.*)\](.*)"
        self.regex_array_func_call = r"(.*)\[(.*)(\((.*)\))?\](.*)"
        self.regex_const_index = r"(.*)\[([0-9]+)\](.*)"
        self.regex_var_index = r"(.*)\[(.*)\](.*)"
        self.visited_files = []

    def visit_module(self, m):
        for i in range(len(m.items)):
            item = m.items[i]
            if isinstance(item, v.ArrayVarDecl):
                self._handle_array_var_decl(item)
            elif isinstance(item, v.Instance):
                self._handle_instance(item)
        return False

    def _handle_array_var_decl(self, item):
        if re.search(self.regex_array_whole, item.name):
            self._generate_test_case(item, "whole")
        elif re.search(self.regex_array_slice, item.name):
            self._generate_test_case(item, "slice")
        elif re.search(self.regex_array_partselect, item.name):
            self._generate_test_case(item, "partselect")
        elif re.search(self.regex_array_select, item.name):
            self._generate_test_case(item, "select")
        elif re.search(self.regex_array_func_call, item.name):
            self._generate_test_case(item, "function_call")
        elif re.search(self.regex_const_index, item.name):
            self._generate_test_case(item, "constant_index")
        elif re.search(self.regex_var_index, item.name):
            self._generate_test_case(item, "variable_index")

    def _handle_instance(self, item):
        if re.search(self.regex_array_whole, item.instance_name):
            self._generate_test_case(item, "whole")
        elif re.search(self.regex_array_slice, item.instance_name):
            self._generate_test_case(item, "slice")
        elif re.search(self.regex_array_partselect, item.instance_name):
            self._generate_test_case(item, "partselect")
        elif re.search(self.regex_array_select, item.instance_name):
            self._generate_test_case(item, "select")
        elif re.search(self.regex_array_func_call, item.instance_name):
            self._generate_test_case(item, "function_call")
        elif re.search(self.regex_const_index, item.instance_name):
            self._generate_test_case(item, "constant_index")
        elif re.search(self.regex_var_index, item.instance_name):
            self._generate_test_case(item, "variable_index")

    def _generate_test_case(self, item, test_type):
        if test_type == "whole":
            new_name = re.sub(self.regex_array_whole, r"\1\2", item.name) + "_" + test_type + ".v"
            new_item = v.ArrayVarDecl(new_name, item.data_type, item.dimensions)
        elif test_type == "slice":
            new_name = re.sub(self.regex_array_slice, r"\1\4\5", item.name) + "_" + test_type + ".v"
            new_item = v.ArrayVarDecl(new_name, item.data_type, item.dimensions)
        elif test_type == "partselect":
            new_name = re.sub(self.regex_array_partselect, r"\1\3\4\5", item.name) + "_" + test_type + ".v"
            new_item = v.ArrayVarDecl(new_name, item.data_type, item.dimensions)
        elif test_type == "select":
            new_name = re.sub(self.regex_array_select, r"\1\3", item.name) + "_" + test_type + ".v"
            new_item = v.ArrayVarDecl(new_name, item.data_type, item.dimensions)
        elif test_type == "function_call":
            new_name = re.sub(self.regex_array_func_call, r"\1\3", item.name) + "_" + test_type + ".v"
            new_item = v.ArrayVarDecl(new_name, item.data_type, item.dimensions)
        elif test_type == "constant_index":
            new_name = re.sub(self.regex_const_index, r"\1", item.name) + "_" + test_type + ".v"
            new_item = v.ArrayVarDecl(new_name, item.data_type, item.dimensions)
        elif test_type == "variable_index":
            new_name = re.sub(self.regex_var_index, r"\1", item.name) + "_" + test_type + ".v"
            new_item = v.ArrayVarDecl(new_name, item.data_type, item.dimensions)
        else:
            return False
        self.visited_files.append(str(Path(self.args.output_dir).joinpath(new_name)))
        with open(str(Path(self.args.output_dir).joinpath(new_name)), "w") as f:
            f.write("module {}\n".format(new_item.name))
            f.write("  input clk;\n")
            f.write("  input [31:0] arr[] = new[{};\n".format(len(item.dimensions)-1))
            for i in range(len(item.dimensions)-1):
                f.write("      [{}:{}] ".format(i, i+1))
            f.write("];\n")
            if test_type == "whole" or test_type == "slice":
                f.write("  assign arr = {arr};\n")
            elif test_type == "partselect":
                f.write("  assign arr = {{arr[{}:{}]}};\n".format(item.dimensions[-2]-1, item.dimensions[-2]-1+len(item.dimensions[-1])-1))
            elif test_type == "select":
                f.write("  assign arr[0] = {arr[0]};\n")
            elif test_type == "function_call":
                f.write("  assign arr = {new{}};\n")
            elif test_type == "constant_index":
                f.write("  assign arr[{}] = {arr[{}]};\n".format(item.dimensions[-1]-1, item.dimensions[-1]-1))
            elif test_type == "variable_index":
                f.write("  assign arr[{}] = {arr[{}]};\n".format(self.args.index, self.args.index))
            f.write("endmodule")
        return True

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("-i", "--input_dir", help="Path to directory containing input Verilog files", type=str, required=True)
    parser.add_argument("-o", "--output_dir", help="Path to directory where output Verilog files will be saved", type=str, required=True)
    args = parser.parse_args()
    for file in Path(args.input_dir).glob("*.v"):
        print("Processing {}...".format(file))
        with open(str(file), "r") as f:
            src = f.read()
        ast = v