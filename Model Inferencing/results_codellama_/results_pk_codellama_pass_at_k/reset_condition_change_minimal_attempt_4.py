# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.422

```python
import argparse
import re
from pyverilog import *
from pyverilog.vparser import parse
from pyverilog.tools.xforms import XForm, XFormPass

class ResetToActiveLow(XForm):
    """Transform reset condition from active-high to active-low"""
    def __init__(self):
        super().__init__()
        self.sensitivity = ["posedge"]

    def visit_always(self, node):
        if "rst" in node.sensitivity:
            new_sensitivity = []
            for item in node.sensitivity:
                if item == "rst":
                    new_sensitivity.append("!rst")
                else:
                    new_sensitivity.append(item)
            node.sensitivity = new_sensitivity
        super().visit_always(node)

    def visit_if_statement(self, node):
        if "rst" in node.condition:
            node.condition = re.sub("rst", "!rst", node.condition)
        super().visit_if_statement(node)

def transform(module, args=None):
    """Main transformation function"""
    if args and args.reset_to_active_low:
        xform = ResetToActiveLow()
        return xform.apply(module)
    else:
        return False

if __name__ == "__main__":
    # Command-line interface
    parser = argparse.ArgumentParser()
    parser.add_argument("--reset-to-active-low", action="store_true", help="Transform reset condition from active-high to active-low")
    args = parser.parse_args()
    with open(args.input, "r") as f:
        module = parse(f.read(), strict=True)
        result = transform(module, args)
        if result:
            print("Transformation successful")
        else:
            print("No reset signal usage found in the input file")
```
This code uses `pyverilog` and `re` to parse and analyze the AST of a Verilog module. It also defines a `ResetToActiveLow` visitor class that inherits from `XForm`, which is responsible for changing the reset condition from active-high to active-low. The `visit_always` method is used to update the sensitivity list, and the `visit_if_statement` method is used to change the condition of any if statements that use the reset signal.

The `transform` function takes a module as input and returns True/False depending on whether the transformation was successful or not. The `--reset-to-active-low` argument can be passed in through the command line, which will trigger the transformation. If no arguments are passed, the transformation will not be performed.

Note that this code is a basic example of how to use `pyverilog` and `re` for AST analysis and text manipulation, and may need to be modified or extended depending on the specific requirements of your project.