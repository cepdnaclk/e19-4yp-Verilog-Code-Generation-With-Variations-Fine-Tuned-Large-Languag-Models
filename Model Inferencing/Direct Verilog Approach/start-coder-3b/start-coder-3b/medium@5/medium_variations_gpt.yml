- code: |
    module ha_8(s, ca, a, b);
    input a, b;
    output s, ca;

    logic [1:0][1:0][1:0][1:0] vec4D;

    specify
        specparam dl1 = 1;
        specparam dl2 = dl1 + 1;
        (a, b *> s) = dl1;
        (a, b *> ca) = dl2;
    endspecify

    xor (s, a, b);
    and (ca, a, b);

    always_comb begin
        bit match = 1;
        int i, j, k, l;  // Declare loop indices
        foreach (vec4D[i][j][k][l]) begin
            if (!(vec4D[i][j][k][l] inside {[0:1]}))
                match = 0;
        end
        if (match)
            $display("vec4D inside range");
    end
    endmodule

- code: |
    `timescale 1ns/100ps
    module ShiftRegister8 (input sl, sr, clk, input [7:0] ParIn, input [1:0] m, output reg [7:0] ParOut);
    logic [1:0][3:0] packed_array;
    logic matched;
    always @(negedge clk) begin
        case (m)
            0: ParOut <= ParOut;
            1: ParOut <= {sl, ParOut[7:1]};
            2: ParOut <= {ParOut[6:0], sr};
            3: ParOut <= ParIn;
            default: ParOut <= 8'bX;
        endcase
        matched = packed_array[1] inside {[4'b0000:4'b1111]};
    end
    endmodule

- code: |
    module example7_4(D, Clock, Q1, Q2);
    input D, Clock;
    output reg Q1, Q2;

    logic [3:0] values[0:2];
    integer idx;

    initial begin
        values[0] = 4'hA;
        values[1] = 4'hB;
        values[2] = 4'hC;
        idx = 0;
    end

    always @(posedge Clock) begin
        Q1 <= D;
        Q2 <= Q1;

        // Use for-loop to avoid potential infinite loop
        for (int i = idx; i < 3; i++) begin
            if (!(values[i] inside {[4'h0:4'hF]}))
                break;
            idx++;
        end
    end
    endmodule

- code: |
    module FA;
      logic [3:0] arr;
      always @(*) begin
        if (arr[1:0] inside {2'b10, 2'b11}) begin
          $display("Match found");
        end
      end
    endmodule

    module Ripple_Add;
        FA fa0();
        FA fa1();
        FA fa2();
        FA fa3();
    endmodule

- code: |
    module nor3NMOS(in1,in2,in3,b);
      output b;
      input in1,in2,in3;
      supply0 a;
      wire b;
      nmos (b, a, in1);
      nmos (b, a, in2);
      nmos (b, a, in3);
      pullup (b);
      function int index();
        return 1;
      endfunction
      always_comb begin
        case (index())
          1: if ({in1, in2} inside {2'b00, 2'b01}) $display("Inside");
        endcase
      end
    endmodule

- code: |
    module jkEdgeFF (
    output reg q,
    input clock, j, k, preset, clear
    );
        always @(posedge clock or posedge preset or posedge clear) begin
            if (clear) q <= 0;
            else if (preset) q <= 1;
            else if (j & ~k) q <= 1;
            else if (~j & k) q <= 0;
            else if (j & k) q <= ~q;
        end
    endmodule

    module m555(output logic clk);
        // Simple oscillator stub for simulation purposes
        initial begin
            clk = 0;
            forever #5 clk = ~clk;
        end
    endmodule

    module test_k;
        logic [1:0][3:0] arr2D;
        wire q, clock, preset, clear;
        reg j, k;

        assign preset = 0;
        assign clear = 0;

        jkEdgeFF jk(q, clock, j, k, preset, clear);

        initial begin
            arr2D[0] = 4'd6;
            j = (arr2D[0] inside {4'd5, 4'd6}); // Now the width matches (4 bits)
        end

        m555 timer(clock);
    endmodule

- code: |
    module clock_gen_forever;
    reg clk, en;
    logic [2:0] dyn_arr [0:2]; // Fix: array of 3-bit values

    function int idx_func();
        return 1;
    endfunction

    always @(posedge en)
        for (int i = 0; i < 3; i++)
            if (dyn_arr[idx_func()] inside {3'b010, 3'b011})
                clk = ~clk;

    initial begin
        clk = 1'b0;
        en = 1'b0;
        dyn_arr[0] = 3'b001;
        dyn_arr[1] = 3'b010; // will match
        dyn_arr[2] = 3'b100;
    end

    initial $monitor("clk=%b, t=%0d, en=%b", clk, $time, en);
    endmodule

- code: |
    module contres(output logic o, input i1, i2);

    always_comb begin
        // resolve value explicitly; e.g., logical OR
        o = i1 | i2;
    end

    initial begin
        logic [7:0] arr = 8'b01010101;
        if (arr inside {[8'b00000000:8'b11111111]})
            $display("Inside full array range");
    end

    endmodule

- code: |
    // 2-to-4 decoder (behavioral)
    module dec2_4beh(output logic [3:0] o, input logic [1:0] i);
        always_comb begin
            o = 4'b0000;
            case (i)
                2'b00: o[0] = 1;
                2'b01: o[1] = 1;
                2'b10: o[2] = 1;
                2'b11: o[3] = 1;
            endcase
        end
    endmodule

    // Testbench
    module tst_dec2_4beh();
    wire [3:0] o;
    reg [1:0] i;

    dec2_4beh dec(o, i);

    always @(*) begin
        if (o[2:1] inside {2'b10, 2'b11})
            $display("Inside part select: o[2:1] = %b", o[2:1]);
    end

    initial begin
        i = 2'b00;
        i = 2'b01;
        i = 2'b10;
        i = 2'b11;
        i = 2'b00;
        $stop;
    end

    initial $monitor($time, " o = %b, i = %b", o, i);
    endmodule

- code: |
    module dec2_4beh(output reg [3:0] o, input [1:0] i);
    always @(*) begin
        o = 4'b0000;
        case (i)
            2'b00: o = 4'b0001;
            2'b01: o = 4'b0010;
            2'b10: o = 4'b0100;
            2'b11: o = 4'b1000;
        endcase
    end
    endmodule


    module tst_dec2_4beh;
        wire [3:0] o;
        reg [1:0] i;

        dec2_4beh dec(o, i);

        always @(*) begin
            // o[2:1] is 2 bits, so compare against 2-bit values
            if (o[2:1] inside {2'b10, 2'b11})
                $display("Inside part select: o[2:1] = %b", o[2:1]);
        end

        initial begin
            $monitor($time, " o = %b, i = %b", o, i);
            i = 2'b00;
            #1 i = 2'b01;
            #1 i = 2'b10;
            #1 i = 2'b11;
            #1 i = 2'b00;
            #1 $stop;
        end
    endmodule

- code: |
    module reg4 (
    input  [3:0] D,
    input        Clock,
    input        Resetn,
    output reg [3:0] Q
    );

        logic [2:0] dyn_arr [0:3];  // Array of 4 elements, each 3 bits
        integer idx;

        initial begin
            dyn_arr[0] = 3'b000;
            dyn_arr[1] = 3'b001;
            dyn_arr[2] = 3'b010;
            dyn_arr[3] = 3'b011;
            idx = 0;
        end

        always @(posedge Clock or negedge Resetn) begin
            if (!Resetn)
                Q <= 4'b0000;
            else begin
                Q <= D;
                if (dyn_arr[idx] inside {3'b001, 3'b010})
                    Q[0] <= 1'b1;
                idx <= (idx + 1) % 4;
            end
        end

    endmodule

- code: |
    module aoi2(g,a,b,c,d);
    output g;
    input a,b,c,d;
    wire e,f,g1;
    assign e = a && b;
    assign f = c && d;
    assign g1 = e || f;
    assign g = ~g1;
    initial begin
      logic [1:0][1:0] mat;
      if (mat[1][0] inside {1'b1}) $display("Inside");
    end
    endmodule

- code: |
    module maj3 (a, b, c, y);
    input a, b, c;
    output y;
    wire im1, im2, im3;

    // Use single delay (Verilator only supports one delay value)
    and #(2) (im1, a, b);
    and #(2) (im2, b, c);
    and #(2) (im3, c, a);
    or  #(3) (y, im1, im2, im3);

    // Declare slice outside always block
    wire [3:0] slice = {a, b, c, 1'b0};

    always @* begin
        if (slice[2:1] inside {2'b10})
            $display("Inside logic slice");
    end
    endmodule

- code: |
    module tst_wand1;
    reg i1, i2;
    reg o;  // must be reg if assigned in always block

    logic [3:0] array_2D[1:0][3:0];  // Correct 2D array holding 4-bit elements

    // Dummy 'wand1' module placeholder â€“ define it properly if needed
    // module wand1(input a, input b, output y);
    //     assign y = a & b;
    // endmodule

    always @(*) begin
        // Flattened check for all array elements
        if ((array_2D[0][0] inside {[4'd0:4'd15]}) ||
            (array_2D[0][1] inside {[4'd0:4'd15]}) ||
            (array_2D[0][2] inside {[4'd0:4'd15]}) ||
            (array_2D[0][3] inside {[4'd0:4'd15]}) ||
            (array_2D[1][0] inside {[4'd0:4'd15]}) ||
            (array_2D[1][1] inside {[4'd0:4'd15]}) ||
            (array_2D[1][2] inside {[4'd0:4'd15]}) ||
            (array_2D[1][3] inside {[4'd0:4'd15]}))
            o = 1;
        else
            o = 0;
    end

    initial begin
        i1 = 0; i2 = 0;
        array_2D[0][0] = 4'd1; array_2D[0][1] = 4'd2;
        array_2D[0][2] = 4'd3; array_2D[0][3] = 4'd4;
        array_2D[1][0] = 4'd5; array_2D[1][1] = 4'd6;
        array_2D[1][2] = 4'd7; array_2D[1][3] = 4'd8;
    end

    initial $monitor($time, " i1=%b, i2=%b, o=%b", i1, i2, o);
    initial #8 $stop;
    endmodule

- code: |
    module mux21b (
    input wire a , b , s ,
    output reg y
    );
    logic [3:0][1:0] part_vec;
    always @(*) begin
      y = (s == 0) ? a : b;
      y = part_vec[2][1] inside {1'b0, 1'b1};
    end
    endmodule

- code: |
    `timescale 1ns/100ps
    module ALU8 (input [7:0] left, right, input [1:0] mode, output reg [7:0] ALUout);
    function automatic [7:0] get_array_val();
      return 8'hFF;
    endfunction
    always @(left, right, mode) begin
        case (mode)
            0: ALUout = left + right;
            1: ALUout = left - right;
            2: ALUout = left & right;
            3: ALUout = left | right;
            default: ALUout = 8'bX;
        endcase
        if (get_array_val() inside {[8'h00:8'hFF]})
          ALUout = 8'hAA;
    end
    endmodule

- code: |
    module mux24b(
    input wire [3:0] a,
    input wire [3:0] b,
    input wire s,
    output reg [3:0] y
    );
    logic [3:0][7:0] arr;
    always @(*) begin
      y = s ? b : a;
      if (arr[2] inside {[8'h10:8'h20]})
        y = 4'hF;
    end
    endmodule

- code: |
    module mux41b (
    input wire [3:0] c ,
    input wire [1:0] s ,
    output wire z
    );
    logic [1:0][3:0] a2D;
    assign z = ~s[1] & ~s[0] & c[0]
             | ~s[1] & s[0] & c[1]
             | s[1] & ~s[0] & c[2]
             | s[1] & s[0] & c[3];
    initial begin
      if (a2D[1] inside {[4'b0001:4'b1111]})
        $display("Inside range");
    end
    endmodule

- code: |
    `timescale 1ns/100ps
    module maj3_p (input a, b, c, output y);
        wire im1, im2, im3;
        parameter tplh1 = 2, tphl1 = 4, tplh2 = 3, tphl2 = 5;

        /* verilator lint_off RISEFALLDLY */
        and #(tplh1, tphl1) (im1, a, b), (im2, b, c), (im3, c, a);
        or  #(tplh2, tphl2) (y, im1, im2, im3);
        /* verilator lint_on RISEFALLDLY */

        logic [2:0] vec = {a, b, c};

        initial begin
            logic match;
            match = vec inside {[3'b000:3'b111]};
        end
    endmodule

- code: |
    module counter (
    input wire clk, rst,
    output reg [3:0] count
    );
        logic [3:0][7:0] arr;

        always @(posedge clk or posedge rst) begin
            if (rst)
                count <= 4'b0000;
            else begin
                count <= count + 1;
                if (arr[1] inside {[8'h01:8'h0A]})
                    count <= 4'd1;
            end
        end
    endmodule

- code: |
    module Chap1Counter (Clk, Reset, Count);
    input Clk, Reset;
    output [3:0] Count;
    reg [3:0] Count;
    logic [3:0] packed_array;
    always @(posedge Clk) begin
        if(Reset)
          Count = 0;
        else begin
          Count = Count + 1;
          if (packed_array[2:1] inside {2'b10})
            Count = 4'hF;
        end
    end
    endmodule

- code: |
    module NMOSinv (output out, input in);
    assign out = ~in;
    endmodule

    module tst_nm_in();
        reg in; 
        wire out;
        NMOSinv nmv(out, in);
        logic [3:0] a;

        initial begin
            a = 4'd7; // Initialize a
            if (a inside {[4'd0:4'd15]})
                in = 1'b0;
        end

        initial begin
            $monitor($time , " in = %b, output = %b ", in, out);
            #15 $stop;
        end
    endmodule

- code: |
    module nil;
    reg a, b;
    logic [1:0][3:0] mda;
    initial begin
      if (mda[0][2:1] inside {2'b01, 2'b10})
        a = 1;
    end
    initial
      $monitor("t=%0t monitor: a = %b, b = %b", $time, a, b);
    endmodule

- code: |
    module RAM (output[7:0] Obus, input[7:0] Ibus, input[3:0] Adr, input Clk, Read);
    reg[7:0] Storage[15:0];
    reg[7:0] ObusReg;
    assign #1 Obus = ObusReg;
    initial begin
      if (Storage[3] inside {[8'h00:8'hFF]})
        ObusReg = 8'hA5;
    end
    always @(posedge Clk)
      if (Read==1'b0)
          Storage[Adr] <= Ibus;
      else
          ObusReg <= Storage[Adr];
    endmodule

- code: |
    module dff_p(output reg q, input d, clk);
    always @(posedge clk)
        q <= d;
    endmodule

    module tst_dff_p_b();
        reg di, clk;
        wire dout;

        dff_p d1(dout, di, clk);

        final begin
            logic [3:0] val = 4'b1010;  // assign to avoid uninitialized use
            if (val[3:1] inside {3'b100, 3'b101})
                $display("Inside final block range");
        end

        initial begin
            clk = 0;
            di = 1'b0;
            #35 $stop;
        end

        always #3 clk = ~clk;
        always #5 di = ~di;

        initial $display("%m: Top-level testbench module");
        initial $monitor($time, " clk=%b, di=%b, dout=%b", clk, di, dout);
    endmodule

- code: |
    module example7_5(x1, x2, x3, Clock, f, g);
    input x1, x2, x3, Clock;
    output f, g;
    reg f, g;
    logic [3:0] arr;
    always @(posedge Clock) begin
        f = x1 & x2;
        g = f | x3;
        while (arr[2:1] inside {2'b00, 2'b01}) begin
          f = ~f;
        end
    end
    endmodule

- code: |
    module example5(x1, x2, x3, f);
    input x1, x2, x3;
    output f;
    reg f;
    logic [7:0] arr;
    always @(x1 or x2 or x3) begin
        if (x2 == 1)
            f = x1;
        else
            f = x3;
        if (arr[4:1] inside {4'b1000, 4'b1001})
          f = ~f;
    end
    endmodule

- code: |
    module aoi_gate(o,a1,a2,b1,b2);
    input a1,a2,b1,b2;
    output o;
    wire o1,o2;
    and g1(o1,a1,a2);
    and g2(o2,b1,b2);
    nor g3(o,o1,o2);
    logic [1:0][3:0] A;
    integer idx = 1;
    initial begin
      if (A[idx] inside {[4'd5:4'd10]})
        $display("Inside nested if range");
    end
    endmodule

- code: |
    module aoibeh2(o,a,b);
    output o;
    input[1:0]a,b;
    wire a1,b1;
    reg o;
    and g1(a1,a[1],a[0]), g2(b1,b[1],b[0]);
    always@(a1 or b1) begin
      case (1)
        (a1 | b1): if ({a1, b1} inside {2'b01, 2'b10}) o = 1;
        default: o = ~(a1 || b1);
      endcase
    end
    endmodule

- code: |
    module muxdff(D0, D1, Sel, Clock, Q);
    input D0, D1, Sel, Clock;
    output Q;
    reg Q;
    logic [1:0][3:0] arr;
    always @(posedge Clock)
        if (!Sel)
            Q <= D0;
        else begin
            Q <= D1;
            if (arr[0] inside {[4'd0:4'd7]})
              Q <= 1'b0;
        end
    endmodule

- code: |
    module dff_with_reset(data, clock, r, out);
    input clock, r, data;
    output out;
    reg out;
    final begin
      logic [3:0] vec;
      if (vec inside {4'd1, 4'd2}) out = 1;
    end
    always @(posedge clock or posedge r)
    begin
      if (r) out = 0;
      else out = data;
    end
    endmodule

- code: |
    module EventCtlPart (output xPart, yPart, input a, b, c);
    reg xReg, yReg;
    assign xPart = xReg;
    assign yPart = yReg;
    logic [1:0][1:0][1:0] arr;

    always @(a, b) begin: PartList
        if (arr[1][0] inside {2'b01})  // Now the widths match (2-bit comparison)
            xReg <= a & b & c;
        yReg <= (b | c) ^ a;
    end
    endmodule

- code: |
    module dff(dout, di, clk);
    output reg dout;
    input di, clk;

    function [3:0] get_val();
        get_val = 4'd5;
    endfunction

    logic [3:0] arr[3:0];  // 4 elements, each 4 bits wide

    always @(negedge clk) begin
        dout = di;
        if (arr[get_val()[1:0]] inside {[4'd0:4'd8]})
            dout = ~di;
    end
    endmodule

- code: |
    module CMOSsw1(output out, input in, con);
    assign out = con ? in : 1'bz;
    endmodule

    module tst_CMOSsw1;
        reg in, con;
        wire out;

        CMOSsw1 cmsw(out, in, con);

        reg [3:0] arr [1:0];  // Proper declaration: 2D packed array (unpacked)

        wire trigger_cond;
        assign trigger_cond = (arr[0] inside {[4'd1:4'd3]});

        initial begin
            arr[0] = 4'd2;
            arr[1] = 4'd5;
        end

        always #5 in = trigger_cond;  // Only one place where `in` is assigned
        always #3 con = ~con;

        initial begin
            con = 1'b1;
        end

        initial $monitor($time , " in = %b , con = %b , output = %b ", in, con, out);
        initial #20 $stop;
    endmodule

- code: |
    module gates4 (
    input  wire [3:0] x,
    output wire and4_,
    output wire or4_,
    output wire xor4_
    );
        assign and4_ = &x;
        assign or4_  = |x;
        assign xor4_ = ^x;
    endmodule

    module gates4_top (
        input  wire [3:0] sw,
        output wire [2:0] ld
    );
        gates4 U1 (
            .x(sw),
            .and4_(ld[2]),
            .or4_(ld[1]),
            .xor4_(ld[0])
        );

        logic [3:0] arr;

        always_comb begin
            priority case (1)
                1: if (arr[2:1] inside {2'b10})
                    $display("Inside priority range");
            endcase
        end
    endmodule