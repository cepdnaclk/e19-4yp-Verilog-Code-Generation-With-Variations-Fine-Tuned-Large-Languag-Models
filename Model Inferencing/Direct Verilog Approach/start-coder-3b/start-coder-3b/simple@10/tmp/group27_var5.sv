#include <systemc.h>
#include <time.h>
#include "ha_9.h"
//
// Generated by Synopsys Cordic 15.5.1 Standard Edition
// #2021-04-05 18:49:12
//

int sc_main(int argc, char* argv[]) {
  struct {
    sc_uint<1> a,b,s,ca;
  } packed_data;
  sc_clock clk_10M("clk_10M",10,SC_NS);
  sc_signal<sc_uint<1> > a_9_in_10;
  sc_signal<sc_uint<1> > b_9_in_10;
  sc_signal<sc_uint<1> > s_9_out_10;
  sc_signal<sc_uint<1> > ca_9_out_10;
  ha_9 ha_9_inst("ha_9_inst");
  sc_trace_file* tf_;
  tf_ = sc_create_vcd_trace_file("tstha_9");
  tf_->set_time_unit(1, SC_NS);
  sc_trace(tf_, clk_10M, "clk_10M");
  sc_trace(tf_, a_9_in_10, "a_9_in_10");
  sc_trace(tf_, b_9_in_10, "b_9_in_10");
  sc_trace(tf_, s_9_out_10, "s_9_out_10");
  sc_trace(tf_, ca_9_out_10, "ca_9_out_10");
  a_9_in_10.write(0);
  b_9_in_10.write(0);
  sc_start();
  a_9_in_10.write(0);
  b_9_in_10.write(1);
  sc_start();
  a_9_in_10.write(1);
  b_9_in_10.write(0);
  sc_start();
  a_9_in_10.write(0);
  b_9_in_10.write(0);
  sc_start();
  a_9_in_10.write(1);
  b_9_in_10.write(1);
  sc_start();
  a_9_in_10.write(0);
  b_9_in_10.write(0);
  sc_start();
  a_9_in_10.write(1);
  b_9_in_10.write(0);
  sc_start();
  a_9_in_10.write(0);
  b_9_in_10.write(1);
  sc_start();
  sc_stop();
  sc_close_vcd_trace_file(tf_);
  return 0;
}
// Generated by Synopsys Cordic 15.5.1 Standard Edition
// #2021-04-05 18:50:16
//
#line 1 "ha_9.v"
module ha_9(output reg s, output reg ca, input a, input b); 
#line 22 "ha_9.v"
wire s2; 
#line 23 "ha_9.v"
wire ca2; 
#line 24 "ha_9.v"
assign ca = ca2; 
#line 25 "ha_9.v"
assign s = s2; 
#line 26 "ha_9.v"
assign s2 = ((a==b)&&ca)? 1 : 0;  
#line 27 "ha_9.v"
assign ca2 = (((a==b)&&ca)? 1 : 0) | (a^b);  
#line 28 "ha_9.v"
endmodule
#line 29 "ha_9.v"
module tstha_9(); 
#line 31 "ha_9.v"
reg a,b; 
#line 32 "ha_9.v"
wire s,ca; 
#line 33 "ha_9.v"
ha_9 hh(s,ca,a,b); 
#line 34 "ha_9.v"
initial begin a=0;b=0; end 
#line 35 "ha_9.v"
always begin #5 a=1;b=0; #5 a=0;b=1; #5 a=1;b=1; #5 a=0;b=0; end 
#line 36 "ha_9.v"
initial $monitor($time, " a = %b, b = %b,out carry = %b, outsum = %b ",a,b,ca,s); 
#line 37 "ha_9.v"
initial #30 $stop; 
#line 38 "ha_9.v"
endmodule
s.v"
reg a,b;
#line 32 "ha_9.v"
wire s,ca;
#line 33 "ha_9.v"
ha_9 hh(s,ca,a,b);
#line 34 "ha_9.v"
initial begin a=0;b=0; end
#line 35 "ha_9.v"
always begin #5 a=1;b=0; #5 a=0;b=1; #5 a=1;b=1; #5 a=0;b=0; end
#line 36 "ha_9.v"
initial $monitor($time," a = %b, b = %b,out carry = %b, outsum = %b ",a,b,ca,s);
#line 37 "ha_9.v"
initial $stop;
#line 38 "ha_9.v"
endmodule
#line 1 "tstha_9.v"
module tstha_9();
#line 22 "tstha_9.v"
reg a,b;
#line 23 "tstha_9.v"
wire s,ca;
#line 24 "tstha_9.v"
ha_9 hh(s,ca,a,b);
#line 25 "tstha_9.v"
initial begin a=0;b=0; end
#line 26 "tstha_9.v"
always begin #5 a=1;b=0; #5 a=0;b=1; #5 a=1;b=1; #5 a=0;b=0; end
#line 27 "tstha_9.v"
initial $monitor($time," a = %b, b = %b,out carry = %b, outsum = %b ",a,b,ca,s);
#line 28 "tstha_9.v"
initial $stop;
#line 29 "tstha_9.v"
endmodule
#line 30 "tstha_9.v"
module ha_9(output reg s, output reg ca, input a, input b);
#line 22 "ha_9.v"
wire s2;
#line 23 "ha_9.v"
wire ca2;
#line 24 "ha_9.v"
assign ca = ca2;
#line 25 "ha_9.v"
assign s = s2;
#line 26 "ha_9.v"
assign s2 = ((a==b)&&ca)?1:0;
#line 27 "ha_9.v"
assign ca2 = (((a==b)&&ca)?1:0) | (a^b);
#line 28 "ha_9.v"
endmodule
#line 29 "ha_9.v"
module tstha_9();
#line 31 "ha_9.v"
reg a,b;
#line 32 "ha_9.v"
wire s,ca;
#line 33 "ha_9.v"
ha_9 hh(s,ca,a,b);
#line 34 "ha_9.v"
initial begin a=0;b=0; end
#line 35 "ha_9.v"
always begin #5 a=1;b=0; #5 a=0;b=1; #5 a=1;b=1; #5 a=0;b=0;