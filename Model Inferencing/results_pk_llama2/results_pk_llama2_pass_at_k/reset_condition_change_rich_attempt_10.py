# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 10
# Success: False
# Overall Score: 0.518

Here is a transformation module for the xform framework that performs the task of changing the reset condition from active-high to active-low or vice versa:
```python
import pyverilog
from pyverilog.ast import Node, Decl
from pyverilog.directives import Directive
from re import sub
from argparse import ArgumentParser

class ResetVisitor(pyverilog.visitors.ExampleVisitor):
    def __init__(self, signal_name, reset_direction):
        super().__init__(signal_name)
        self.reset_direction = reset_direction

    def visit(self, node):
        if isinstance(node, Node):
            # Find reset signal usage in if statements
            for child in node.children():
                if isinstance(child, Decl):
                    if hasattr(child, "name") and child.name == self.signal_name:
                        # Check direction of reset
                        if self.reset_direction == "active-high":
                            # Change if(rst) to if(!rst)
                            node.replace(child, f"if (!{self.signal_name})")
                        else:
                            # Change if(rst) to if(rst)
                            node.replace(child, f"if ({self.signal_name})")

            # Visit children
            for c in node.children():
                self.visit(c)

def transform_reset(input_file, output_file, signal_name, reset_direction):
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    visitor = ResetVisitor(signal_name, reset_direction)
    visitor.visit(ast)

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    modified_content = sub(pattern, replacement, content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True

def main():
    parser = ArgumentParser(description="Transform reset condition")
    parser.add_argument("--input", "-i", required=True, help="Input file")
    parser.add_argument("--output", "-o", required=True, help="Output file")
    parser.add_argument("--signal", "-s", required=True, help="Reset signal name")
    parser.add_argument("--direction", "-d", required=True, help="Reset direction (active-high or active-low)")

    args = parser.parse_args()

    transform_reset(args.input, args.output, args.signal, args.direction)

if __name__ == "__main__":
    main()
```
Explanation:

1. The `ResetVisitor` class inherits from the existing `ExampleVisitor` class in the xform framework. It has a single attribute `reset_direction` that specifies the direction of the reset signal (active-high or active-low).
2. The `visit` method is overridden to handle the specific task of finding reset signal usage in if statements and changing the condition accordingly.
3. The `sub` function is used to perform the actual text transformations.
4. The `transform_reset` function takes care of applying the visitor to the AST, performing the regex transformations, and writing the modified content to the output file.
5. The `main` function creates an argument parser and uses it to parse the command-line arguments. It then calls the `transform_reset` function with the appropriate arguments.
6. The `if __name__ == "__main__":` block is used to ensure that the main function is only executed when the script is run directly, and not when it is imported as a module.