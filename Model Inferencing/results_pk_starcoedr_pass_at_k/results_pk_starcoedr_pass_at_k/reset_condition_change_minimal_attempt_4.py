# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.422


"""

import pyverilog.vparser.ast as ast
from pyverilog import vparse


class ResetVisitor(ast.ASTVisitor):
    def __init__(self, context):
        self._context = context

    def visit_Always(self, node):
        if not isinstance(node.statement[0], ast.Assign):
            return

        assign = node.statement[0]
        lhs = assign.left
        rhs = assign.right
        if (isinstance(lhs, ast.Identifier) and
                isinstance(rhs, ast.Identifier) and
                lhs._text == 'rst'):

            # Found a reset signal, now change it to its inverse
            self._context["found"] += 1
            assign_stmt = pyverilog.ast.Assign([pyverilog.ast.Identifier('!rst')],
                                              rhs).to_code()[:-2]

        else:
            return

        for i in node.sensitive[0]:
            if isinstance(i, ast.Posedge):
                node.sensitive[0][node.sensitive[0].index(i)] = \
                    pyverilog.ast.Negedge(i._text)
        self._context["visitor"].add_statement(assign_stmt)


def transform(file):
    """Transform the file in-place"""

    # Parse and analyse the file
    ast_tree, _ = vparse.parse(file.read(), filename=file.name)

    visitor = ResetVisitor(context={"found": 0})
    pyverilog.ast.ASTWalker().walk(visitor, ast_tree)

    if (not visitor._context["found"]):
        return False

    file.seek(0)
    # Re-write the file with the transformed statements
    for stmt in visitor._context["visitor"].statements:
        file.write('%s\n' % stmt)

    file.truncate()
    print("Reset transformation successful")


def main():
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument(
            'filename', metavar='FILE', type=argparse.FileType('r+'))

    args = parser.parse_args()
    transform(file=args.filename)
