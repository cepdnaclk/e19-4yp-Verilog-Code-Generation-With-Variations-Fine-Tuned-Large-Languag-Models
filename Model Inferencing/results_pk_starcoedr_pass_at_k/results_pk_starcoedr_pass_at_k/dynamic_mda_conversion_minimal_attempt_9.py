# Generated by Ollama Llama 3
# Task: dynamic_mda_conversion_minimal
# Attempt: 9
# Success: False
# Overall Score: 0.432


"""
import argparse, pyverilog, re, os
from pathlib import Path


class Array2DVisitor(pyverilog.ast.NodeVisitor):
    """
    This is a pattern that matches fixed array declarations and converts them to dynamic multi-dimensional arrays.

    The purpose of this pattern is to convert fixed array syntax like this:
        `reg [7:0] my_array[8];`
    To look like this: 
        `reg my_array[8][9]`
    """

    def __init__(self):
        self._arrays = []
        super().__init__()

    @pyverilog.ast.match_fixed()
    def visit_Fixed(self, node):

        # Find all fixed array declarations and convert them to dynamic multi-dimensional arrays
        # 1. Create a new name for the dynamic array (e.g., my_array2)
        # 2. Append a 2nd dimension to the array size based on the original size of the array from step 3.
        #     This is because we need to keep track of how many levels of arrays we have in each level.
        # 3. Update the new name with the existing array name (e.g., my_array[8][9])

        # Get the original name for the fixed array and a list of its dimensions (e.g., [7:0] or [7:4][2], etc.)
        baseName = node.array_name.name
        oldDims = node._get_dimension_list()

        # Check to see if this node is already transformed by checking the name of the new array for 2D syntax.
        #   This could be done differently, but in this example I want to demonstrate how to find a pattern.
        nameFound = False 
        for oldName in self._arrays:
            nameFound = baseName == oldName
            if nameFound is True:
                break

        # If not transformed yet... 
        if nameFound is False:
            # Update the name to include 2D syntax based on its original dimensions.
            newDims = str(oldDims).replace(':', ',') # Convert list of dimensions to a string that looks like "[8,9]"
            newArrayName = baseName + '[%s]' %newDims
            
            # Replace the fixed array declaration with a dynamic multi-dimensional array.
            node._set_fixed_array_name(pyverilog.ast.FixedName(newArrayName))

            # Add the original array name to our list of transformed array names so we don't transform it again. 
            self._arrays.append(baseName)


def main():

    # Get the input files from the command line
    parser = argparse.ArgumentParser()
    parser.add_argument('--files', nargs='+')
    args = parser.parse_args()

    for file in args.files:

        # Load the Verilog/SystemVerilog files and parse them into an AST
        verilog_file = pyverilog.parser.VerilogReader(file)
        ast = pyverilog.parser.parse(verilog_file, debug=True).ast

        # Initialize a visitor object that will find fixed array declarations 
        arrayVisitor2D = Array2DVisitor()
        
        # Visit the AST with our visitor and check for the pattern (fixed arrays).
        #   This is where we transform the fixed array declaration syntax to dynamic multi-dimensional array. 
        arrayVisitor2D.visit(ast)

        # Write out the transformed files back to disk.
        pyverilog.writer.write_to_file(str(Path(file)), ast, debug=True)


if __name__ == "__main__":
    main()