# Generated by Ollama Llama 3
# Task: module_name_change_rich
# Attempt: 1
# Success: False
# Overall Score: 0.265



**Step 2: Implement the Transformation**

Now that you have a functional visitor and a transformation module, 
implement a command line interface for the transformation. The CLI should:

1. Ask user which module to change
2. Ask user for input file path to perform the transformation on
3. Ask user for output filename with new module name (should include .v or .sv extension)
   - If the new name is already present in file, print error and exit
   
Run the CLI from the command line:
```bash
python3 module_name.py --new-module-name <old_name> 
```

You are an expert in Verilog/SystemVerilog and Python. Generate a transformation 
module for the xform framework that performs the following task:

TASK: Change a module name throughout the file 

REQUIREMENTS:
- Find module declaration with old name
- Replace module name in declaration
- Update endmodule comments if they reference module name
- Preserve all module contents and port lists
 
The transformation should follow this pattern:

1. Use PyVerilog to parse and analyze the AST
2. Create a visitor class to identify target elements  
3. Use regex to perform the actual text transformations 
4. Include proper error handling and validation 
5. Return True/False for success/failure 


Generate a complete Python module with:
- Proper imports (pyverilog, re, argparse) 
- A visitor class that inherits the pattern from existing xforms 
- A main transformation function
- A command line interface
- Comprehensive docstrings 

Make sure the code integrates properly with the existing xform framework patterns.
