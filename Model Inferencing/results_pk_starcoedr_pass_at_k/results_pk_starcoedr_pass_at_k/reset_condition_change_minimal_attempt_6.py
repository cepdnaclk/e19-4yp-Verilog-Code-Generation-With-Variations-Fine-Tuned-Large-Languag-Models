# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 6
# Success: False
# Overall Score: 0.505


"""
from pyverilog import VerilogModule,VerilogIfStatement,VerilogSynchronousReset
import re


class Reset_Transform():

    def __init__(self):
        # self.filename = filename
        pass
    
    @staticmethod
    def transform(filename):

        with open(filename,'r') as f:
            text = ''.join([line for line in f])
        
        # Replace the reset signal name in a synchronous reset
        text = re.sub('reset\s*\(\s*[^\s]+',lambda m : m.group().replace('reset','rst'),text)

        # Check if there is a synchronous reset pattern in if statements 
        # and replace reset signal with !rst in all the if statements  
        try:
            reset_if = VerilogIfStatement(text)
        except ValueError as e: 
            print(e,'in file {}'.format(filename))
        
        for reset in reset_if.reset_list : 
            reset._signal = '!{}'.format(reset._signal)

        # Replace reset signal with !rst in all the sensitivity lists 
        for i in reset_if.sensitivity_list :
            for j,sens in enumerate(i):
                if sens == 'reset' or sens == 'rst':
                    i[j] = "!{}".format(sens)
        
        return text
        
if __name__=='__main__':
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-f',type=str,help='Specify the filename')
    args = parser.parse_args()
    
    if 'filename' not in args.__dict__:
        print('Please specify a file name using -f <file name>')
        exit(-1)

    text = Reset_Transform().transform(args.filename)
    print(text)