# Generated by Ollama Llama 3
# Task: module_name_change_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.438


"""

import re
from pyverilog import VerilogModule, VerilogAnalyzer, VerilogTextReader
from .xform_base import Transformation

class ChangeModuleName(Transformation):

    # regex for a module declaration
    _mod_decl = re.compile('module\s+(.+)\s+\((.+)\)')

    def __init__(self, oldname, newname):
        self._oldname = oldname
        self._newname = newname

    @staticmethod
    def description():
        return 'change module name'

    # override the analyze_top method from TransformBase to avoid parsing
    # all modules in the file when we need just one.
    def analyze_top(self, verilog):

        m = self._mod_decl.match(verilog)
        if not m:
            return False

        # match module name 
        modname = m.group(1).strip()
        oldnames = [self._oldname]
        
        if self._oldname in modname or modname == 'default':
            # search for all modules with old name 
            oldnames += [x[0].lower() for x in re.findall('module\s+([a-zA-Z_][a-zA-Z0-9_.$]*)', verilog)]

        # match and replace all module names with newname
        for oldname in oldnames:
            verilog = re.sub(oldname, self._newname, verilog)

        # match module comments 
        m = re.findall('module\s+(.+)\s+\((.+)\)', verilog)[0]
        modtype = m[1].strip()
        newmoddecl = ' '.join(['module',self._newname,'(',modtype,')'])

        # replace old module name declaration with new one 
        verilog = re.sub(oldname, newmoddecl, verilog)
        return True

