# Generated by Ollama Llama 3
# Task: structure_type_conversion_rich
# Attempt: 9
# Success: False
# Overall Score: 0.245



```

The transformation should be called `struct_xform` and should work as follows:

1. The user will supply a signal name to convert (e.g., `signal_name = "foo"`)
   - This is the signal that will be transformed in the AST
   - The signal must be declared in the top level module
     - In embedded applications, this will be the top level `module` block
2. The user will supply an output file name to write the resulting text (e.g., 
   `output_file = "example_struct"`) 
3. If no input file is supplied, then the user will be prompted for a filename
   - This will default to `input_file = "input.v"`
4. The user will supply a flag that determines whether the transformation is run
   as a dry-run (i.e., no changes are made) or not
   - This should be called with `-d`, `--dry`
   - If this flag is omitted, then it defaults to `dry = False` 
   - If the flag is present in the command line arguments when calling struct_xform
     then the transformation will actually perform the text transformations
5. The user may supply a regular expression string that defines a pattern of
   signals that should be transformed (e.g., `pattern = r"(bar|foo)"`)
   - This will search for signals that match this regex in the input file and convert them to structs
     - It is not necessary but recommended that the pattern include a capture group to capture the signal name
       so that it can be used as the `struct_name` value when generating new struct member definitions 
   - If no pattern is supplied, then the user will get an error message explaining how to supply one and exit
6. The user may supply a replacement string for converting signal declarations
   - This should follow the pattern of a Verilog `reg` declaration
     - Make sure that the data type and bit width are appropriate for the signal being converted
     - For example, `replacement = "typedef struct { reg foo; } foo;"`, then this will convert all instances
       of `foo` in the input file to: 
       ```
         typedef struct { reg foo; } foo_struct;
         foo_struct.foo; // This is the signal declaration
       ```
   - The replacement string should be wrapped in a single quote (e.g., `'` and `'`)
     - Make sure that this matches the syntax of the Verilog `typedef` declaration
7. If no pattern or replacement strings are supplied, then struct_xform will prompt for them and exit 
   - These will default to: 
     - pattern = r"(bar|foo)"
     - replacement = "`typedef struct { reg bar; } bar;"
   - If a pattern is supplied in the arguments but not a replacement string, then struct_xform will prompt for one
8. The user will be prompted to confirm that they want to perform the transformation 
   - This should follow this pattern: 
     ```
       Are you sure you want to convert 'foo' into a struct? (Y/N)
     ```
   - If the user answers `Y` or `y`, then the transformation is carried out; otherwise, it exits
9. The user will be prompted for the name of the new struct type 
   - This will follow this pattern: 
     ```
       What would you like to call your new struct?
     ```
   - If no input file is provided on the command line when calling struct_xform then the user should be prompted for a filename
10. The user will be asked whether they want to use a custom type prefix 
    - This will follow this pattern: 
      ```
        Do you have a custom prefix? (Y/N)
      ```
    - If yes, ask them what it is and write it out in the output file
    - Otherwise, don't include anything
11. The user will be asked whether they want to use a custom type suffix 
    - This will follow this pattern: 
      ```
        Do you have a custom suffix? (Y/N)
      ```
    - If yes, ask them what it is and write it out in the output file
    - Otherwise, don't include anything
12. The user will be asked whether they want to use a bit width override for the struct type 
    - This will follow this pattern: 
      ```
        Do you have an override? (Y/N)
      ```
    - If yes, ask them what it is and write out in the output file as a comment at the top of the struct
    - Otherwise, don't include anything
13. The user will be asked whether they want to use a bit width override for each member
    - This will follow this pattern: 
      ```
        Do you have an override? (Y/N)
      ```
    - If yes, ask them what it is and write out in the output file as a comment within each struct member definition
    - Otherwise, don't include anything
14. The user may supply a module name that will be included at the top of every generated struct
   - This will follow this pattern: 
     ```
       What would you like to call your top level module?
     ```
   - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
15. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
16. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
17. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
18. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
19. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
20. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
21. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
22. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
23. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
24. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
25. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
26. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file is provided on the command line when calling struct_xform, then the user should be prompted for one
27. The user may supply an output path that will be used as a working directory for the generated files
    - This will follow this pattern: 
      ```
        What would you like to call your top level module?
      ```
    - If no input file