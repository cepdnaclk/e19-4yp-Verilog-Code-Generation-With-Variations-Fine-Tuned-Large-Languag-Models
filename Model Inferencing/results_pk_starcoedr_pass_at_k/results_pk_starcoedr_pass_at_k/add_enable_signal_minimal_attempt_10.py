# Generated by Ollama Llama 3
# Task: add_enable_signal_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.498



"""

# Imports
import pyverilog.vparser as vparse
from argparse import ArgumentParser, FileType


# Globals

class AddEnable(object):
    def __init__(self) -> None:
        pass

    @staticmethod
    def visit_stmt(ctx : pyverilog.ast.statements.VerilogStmt) -> bool:

        # Check for counter <= counter + 1 pattern
        try:
            lhs = ctx[0]
            rhs = ctx[-1]
            if isinstance(lhs, pyverilog.ast.exprs.Identifier):
                if isinstance(rhs, pyverilog.ast.exprs.BinOp) \
                and len(rhs) == 3 \
                    and isinstance(rhs[2], pyverilog.ast.exprs.UnaryOp):

                    # Verify the pattern is incrementing (not decrementing or resetting)
                    op = rhs[1]
                    if not ((isinstance(op, pyverilog.ast.exprs.BinOp) and op.args == [3]) \
                            or isinstance(op, pyverilog.ast.exprs.UnaryOp)):
                        return False

                    # Check for counter <= counter + 1 pattern
                    lhs_id = lhs.name
                    rhs_id = rhs[0].name

                    if lhs_id != rhs_id:

                        # Find the sensitivity list in RHS
                        slist = rhs[2][-3:-1]
                        assert isinstance(slist, pyverilog.ast.statements.SensList)

                        # Add a new input port to RHS
                        ena = pyverilog.ast.exprs.Identifier('ena')
                        port_sig = pyverilog.ast.exprs.Port(ena, 1)
                        rhs[2][-3:-1].args += [port_sig]

                        # Wrap RHS increment with enable condition
                        r_op = pyverilog.ast.exprs.UnaryOp(0)
                        r_op.args += [rhs[-1]]
                        ena_stmt = pyverilog.ast.statements.Assign([ena], r_op, 'assign')
                        ena_list = pyverilog.ast.statements.SensList(ena)

                        # Add new sensitivity list with enable port to RHS
                        slist[0].args += [ena]

                        # Insert Enable statement before first sensitivity
                        slist[0][-1:-2].args += [ena_stmt]
                        slist[-3:-2].args = [ena_list]

                        # Return True for success
                        return True

        except pyverilog.ast.ASTError as e:
            print(e)

        finally:

            # Return False if not detected
            return False

# CLI Function


def add_enable() -> None:
    parser = ArgumentParser('xform')

    parser.add_argument('-f', '--filein', type=FileType(), default='-')
    parser.add_argument('-o', '--fileout', type=FileType())

    parser.add_argument('--show_ast', action="store_true")


    # Parse the arguments, run the transformation on each file, and return the results
    args = parser.parse_args()
    filename = args.filein.name if args else '-' 
    print("File: {}".format(filename))

    with open(filename) as f:

        # Parse the Verilog file
        try:
            verilog = vparse.parse(f, custom_classes=[AddEnable])
        except pyverilog.vparser.VParseError as e:

            # Return error message and exit status 1 for errors
            print("Error parsing {}".format(filename))
            return 1

        # Optionally display the AST
        if args.show_ast: 
            print('AST:')
            vparse.dumpAST(verilog)

        # Apply the transformation to each statement
        try:

            # Create a new file with transformed Verilog code
            with open(args.fileout, 'w') as f2:
                pyverilog = vparse.generate(verilog, filename=filename, fp=f2)
                print('Wrote {}'.format(pyverilog))

        except pyverilog.vparser.VParseError as e:

            # Return error message and exit status 1 for errors
            print("Error generating {}".format(args.fileout.name if args else '-'))
            return 1

    # Exit with success code
    return 0


if __name__ == '__main__':
    
    # Main function
    add_enable()
    pass
