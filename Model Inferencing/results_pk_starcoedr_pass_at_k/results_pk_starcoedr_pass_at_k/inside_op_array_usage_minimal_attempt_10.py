# Generated by Ollama Llama 3
# Task: inside_op_array_usage_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.518


"""

import re, argparse
from pyverilog import VerilogModule, verilog_parser


class TestArrayVisitor(VerilogModule):
    def __init__(self):
        super().__init__()
        self.index_array = []
        self.array_range  = False
        self.single_index = True

    def visit_Index(self, index):
        #print(type(index), index)

        # check for array_range
        try:
            if isinstance(index[0], int):
                if not isinstance(index[-1][-2], str):
                    self.array_range  = True
        except IndexError:
            print(f'Index {index} not supported.')
            return

        # check for index_array
        try: 
            self.index_array.append(self._get_index(index))
        except TypeError:  
            pass

    def _get_index(self, index): 
        try:
            return [i[0] for i in index][-1]
        except TypeError as e:   
            print(f'Index {e} not supported.')

    @staticmethod
    def get_pattern():   
        # index_array
        return (re.compile(r'\[.*\]'), ['Index', 'Range']),

def main():
    # parse arguments and call transformation function here
    parser = argparse.ArgumentParser()
    parser.add_argument('filename')
    args = parser.parse_args()

    try: 
        filename = args.filename
    except AttributeError as e:
        print(f'No argument provided, exiting {e}')
        exit(-1)
    
    try:   
        with open(filename,'r') as f:
            text = f.read()
            ast  = verilog_parser.parse(text)
            arr  = TestArrayVisitor()
            arr.visit(ast)

    except FileNotFoundError as e:  
        print(f'Cannot find file {e}')
        exit(-1)

    #print(arr.array_range, len(arr.index_array), arr.single_index)


if __name__ == '__main__':
    main()
