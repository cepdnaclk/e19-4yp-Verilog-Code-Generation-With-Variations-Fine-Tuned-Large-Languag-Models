# Generated by Ollama Llama 3
# Task: inside_op_xmr_scenarios_rich
# Attempt: 10
# Success: False
# Overall Score: 0.518

Here is a Python module that performs the task of creating test cases for inside operator with cross-module references:
```python
import pyverilog
import re
import argparse
from pyverilog.ast import *

class XmrVisitor(pyverilog.ast.NodeVisitor):
    def __init__(self, signal_name):
        self.signal_name = signal_name
        self.changes_made = []
        self.module_references = []

    def visit(self, node):
        if isinstance(node, ModuleDecl):
            for port in node.ports:
                if port.direction == "input" and port.name == self.signal_name:
                    self.changes_made.append(f"Found {self.signal_name} as input port")
                    self.module_references.extend(port.modules)
                elif port.direction == "output" and port.name == self.signal_name:
                    self.changes_made.append(f"Found {self.signal_name} as output port")
                    self.module_references.extend(port.modules)

            for child in node.children():
                self.visit(child)

def transform_xmr(input_file, output_file, signal_name):
    # Parse AST
    ast = pyverilog.parse_file(input_file)

    # Apply visitor
    visitor = XmrVisitor(signal_name)
    visitor.visit(ast)

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    modified_content = re.sub(r"(\bmodule\s+[^;]+)\s*\[.*\]\s*inside\s*" + signal_name + r"\)", r"\1", content)

    # Apply changes...
    for module in visitor.module_references:
        modified_content = re.sub(r"(\bmodule\s+" + module + r"\)[^\]]*\]", r"\1\[inside " + signal_name + "]\]", modified_content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="XMR transformation")
    parser.add_argument("input_file", help="Input Verilog file")
    parser.add_argument("output_file", help="Output Verilog file")
    parser.add_argument("--signal-name", required=True, help="Signal name to transform")

    args = parser.parse_args()

    if not transform_xmr(args.input_file, args.output_file, args.signal_name):
        print("Transformation failed!")
```
This module defines a `XmrVisitor` class that inherits from PyVerilog's `NodeVisitor`. The visitor traverses the AST and collects information about modules that reference the target signal. It also collects input/output ports where the signal is used.

The `transform_xmr` function takes an input file, output file, and signal name as arguments. It parses the input file using PyVerilog, applies the visitor to the AST, and then performs regex transformations on the original content to insert inside operator references.

The command-line interface uses the `argparse` module to parse command-line options. The main function checks if the transformation was successful before printing a success message.

You can integrate this module with the existing xform framework by including it in the framework's package and importing it as needed.