# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 5
# Success: False
# Overall Score: 0.565

Here is a Python module that implements the transformation you requested:

```python
import pyverilog.parse
import re
from argparse import ArgumentParser, RawTextHelpFormatter

class ResetTransformer(pyverilog.parse.ParseVisitor):
    def __init__(self, direction='low'):
        self.direction = direction
        if self.direction == 'high':
            self.transform = lambda x: f'if({x})'
        elif self.direction == 'low':
            self.transform = lambda x: f'if(!{x})'
        else:
            raise ValueError('Invalid direction. Choose "high" or "low".')

    def visit_statement_if(self, node):
        if re.search(r'rst\(', node.text):
            new_text = self.transform('rst')
            return pyverilog.parse.ParseStatementIf(new_text)
        return node

    def visit_netdecl(self, node):
        for attr in node.attributes:
            if 'POSEDGE' in attr or 'NEGEDGE' in attr and 'rst' in attr:
                if self.direction == 'low':
                    new_edge = re.sub(r'posedge', 'negedge', str(attr))
                    return pyverilog.parse.ParseNetDecl(node.name, node.width, new_edge)
                elif self.direction == 'high':
                    new_edge = re.sub(r'negedge', 'posedge', str(attr))
                    return pyverilog.parse.ParseNetDecl(node.name, node.width, new_edge)
        return node

def transform_xform(file_name, direction='low'):
    try:
        with open(file_name, 'r') as f:
            verilog_code = f.read()
    except FileNotFoundError:
        print(f"Error: File '{file_name}' not found.")
        return False
    ast = pyverilog.parse.ParseVerilogFile(verilog_code)
    transformer = ResetTransformer(direction)
    new_ast = pyverilog.parse.ParseVisitor.transform(ast, transformer)
    if new_ast:
        with open(file_name + '.xform', 'w') as f:
            f.write(str(new_ast))
        return True
    else:
        print(f"Error: Failed to transform '{file_name}'.")
        return False

def main():
    parser = ArgumentParser(description='Reset Condition Transformer for xform',
                             formatter_class=RawTextHelpFormatter)
    parser.add_argument('file', help='Verilog file name')
    parser.add_argument('-d', '--direction', choices=['high', 'low'], default='low',
                         help='Reset condition direction (default: low)')
    args = parser.parse_args()
    if transform_xform(args.file, args.direction):
        print(f"Transformation successful. Result saved to '{args.file}.xform'.")

if __name__ == '__main__':
    main()

"""
Usage:
python reset_transformer.py <verilog_file> [-d|--direction <high|low>]
Example: python reset_transformer.py my_module.v -d high
"""

```

This code defines a `ResetTransformer` class that inherits from the `pyverilog.parse.ParseVisitor`. The transformer visits if statements and net declarations, checking for occurrences of 'rst' in the text. It then applies the transformation specified by the direction parameter.

The `transform_xform` function reads the input file, parses it using PyVerilog, creates a transformer instance with the desired direction, and transforms the AST. If the transformation is successful, it writes the result to a new file with the same name but with a '.xform' extension.

In the main function, we define an ArgumentParser for parsing command-line options. We add a 'file' argument for specifying the input Verilog file and an optional '--direction' or '-d' flag for choosing whether to change the reset condition from active-high to active-low (default) or vice versa.

Please note that this code is just a starting point, and you may need to modify it based on your specific requirements.