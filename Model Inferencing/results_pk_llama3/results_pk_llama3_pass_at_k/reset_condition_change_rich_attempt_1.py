# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 1
# Success: False
# Overall Score: 0.518

Here is a Python module for the xform framework that performs the task of changing reset condition from active-high to active-low or vice versa:
```python
import pyverilog
import re
import argparse

class ResetVisitor(pyverilog.visitors.Visitor):
    def __init__(self, direction):
        self.direction = direction
        self.changes_made = []
        self.signal_found = False

    def visit(self, node):
        if isinstance(node, pyverilog.ast.IfStatement):
            for cond in node.cond:
                if isinstance(cond, pyverilog.ast.PinExpression) and cond.expr == 'rst':
                    if self.direction == 'low':
                        new_cond = f"!{cond.expr}"
                    elif self.direction == 'high':
                        new_cond = cond.expr
                    else:
                        raise ValueError("Invalid direction")
                    node.cond[0] = pyverilog.ast.PinExpression(new_cond)
                    self.changes_made.append(f"Changed reset condition from {self.signal_found} to {new_cond}")

        for c in node.children():
            self.visit(c)

def transform_reset(input_file, output_file, direction):
    # Parse AST
    ast, directives = pyverilog.parse([input_file])

    # Apply visitor
    visitor = ResetVisitor(direction)
    visitor.visit(ast)

    # Update sensitivity lists
    for module in ast.modules:
        for process in module.processes:
            for posedge in process.posedge:
                if posedge.expr == 'rst':
                    process.negedge.append(posedge.expr)
                    process.posedge.remove(posedge.expr)
                    self.changes_made.append(f"Updated reset sensitivity from posedge to negedge")

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    pattern = r"rst\(\)"
    replacement = f"!rst()" if direction == 'low' else f"rst()"
    modified_content = re.sub(pattern, replacement, content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Transform reset condition")
    parser.add_argument("-i", "--input_file", help="Input Verilog file")
    parser.add_argument("-o", "--output_file", help="Output Verilog file")
    parser.add_argument("-d", "--direction", choices=['low', 'high'], help="Direction of the reset change (active-low or active-high)")

    args = parser.parse_args()

    if not transform_reset(args.input_file, args.output_file, args.direction):
        print("Transformation failed!")
```
This module defines a `ResetVisitor` class that inherits from the existing xform pattern. The visitor identifies if statements and changes the reset condition accordingly. It also updates the sensitivity lists for processes.

The main transformation function, `transform_reset`, takes three arguments: input file, output file, and direction (active-low or active-high). It parses the AST using PyVerilog, applies the visitor, and then performs regex transformations to update the reset condition in the code. Finally, it writes the modified content to the output file.

The command-line interface is implemented using the `argparse` library, which allows for easy parsing of command-line arguments. The script can be run from the command line with the following syntax:
```
python xform_reset.py -i input_file.v -o output_file.v -d low/high
```
Note that this code assumes that the reset signal is named `rst`. If your Verilog code uses a different name for the reset signal, you'll need to modify the visitor accordingly.