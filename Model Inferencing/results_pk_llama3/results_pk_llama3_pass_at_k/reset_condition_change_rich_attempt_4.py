# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 4
# Success: False
# Overall Score: 0.485

Here is a Python module that performs the task of changing reset condition from active-high to active-low or vice versa:
```python
import pyverilog.ast as ast
import re
import argparse

class ResetVisitor(ast.ASTVisitor):
    def __init__(self, reset_signal_name, direction):
        self.reset_signal_name = reset_signal_name
        self.direction = direction
        self.changes_made = []
        self.signal_found = False

    def visit(self, node):
        if isinstance(node, ast.IfStmt):
            # Check for reset condition
            if node.cond and node.cond.name == self.reset_signal_name:
                if self.direction == 'low':
                    new_cond = f'!{node.cond}'
                else:
                    new_cond = node.cond
                node.cond = ast.Expr(new_cond)
                self.changes_made.append(f"Changed reset condition {self.reset_signal_name} to {'!' if self.direction == 'low' else ''}{self.reset_signal_name}")

        # Visit children
        for c in node.children():
            self.visit(c)

def transform(input_file, output_file, reset_signal_name, direction):
    # Parse AST
    ast, directives = parse([input_file])

    # Apply visitor
    visitor = ResetVisitor(reset_signal_name, direction)
    visitor.visit(ast)

    # Perform regex transformations (not needed in this case)
    with open(input_file, "r") as f:
        content = f.read()

    # Update sensitivity lists (posedge to negedge) for asynchronous resets
    if direction == 'low':
        pattern = r'posedge\s+({})'.format(reset_signal_name)
        replacement = rf'negedge\({}\)'.format(reset_signal_name)
    else:
        pattern = r'negedge\s+({})'.format(reset_signal_name)
        replacement = rf'posedge\({}\)'.format(reset_signal_name)

    content, _ = re.subn(pattern, replacement, content, 0, re.MULTILINE)

    # Write output
    with open(output_file, "w") as f:
        f.write(content)

    return True

def main():
    parser = argparse.ArgumentParser(description='Change reset condition from active-high to active-low or vice versa')
    parser.add_argument('input_file', help='Input Verilog file')
    parser.add_argument('output_file', help='Output Verilog file')
    parser.add_argument('-r', '--reset_signal_name', required=True, help='Reset signal name (e.g. rst)')
    parser.add_argument('-d', '--direction', choices=['low', 'high'], default='low', help='Direction of reset condition change (default: low)')

    args = parser.parse_args()

    success = transform(args.input_file, args.output_file, args.reset_signal_name, args.direction)

    if not success:
        print("Transformation failed!")

if __name__ == '__main__':
    main()
```
This module provides a `ResetVisitor` class that inherits from `ast.ASTVisitor`. The visitor identifies if statements and checks if the condition is the reset signal. If it is, it changes the condition to use the opposite logic (i.e., `!rst` instead of `rst`). It also updates sensitivity lists for asynchronous resets.

The main transformation function, `transform`, takes in the input file, output file, reset signal name, and direction as arguments. It parses the AST, applies the visitor, and then performs any necessary regex transformations to update sensitivity lists.

The `main` function provides a command-line interface using `argparse`. It parses the input file, output file, reset signal name, and direction from the command line and calls the `transform` function with these arguments.