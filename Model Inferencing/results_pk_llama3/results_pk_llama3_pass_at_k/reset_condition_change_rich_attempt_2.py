# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 2
# Success: False
# Overall Score: 0.552

Here's a Python module named `reset_transform.py` that implements the requested transformation:

```python
import pyverilog.parse.ast as ast
import re

class ResetTransformer(ast.ASTVisitor):
    def __init__(self, direction):
        self.direction = direction
        self.changes_made = []
        self.signal_found = False

    def visit(self, node):
        if isinstance(node, ast.IfStatement):
            for condition in node.cond:
                if isinstance(condition, ast.BinaryOp) and condition.op == 'eq':
                    if isinstance(condition.left, ast.Identifier) and condition.left.name == 'rst':
                        if self.direction == 'low':
                            node.cond = [ast.BinaryOp('neq', ast.Identifier('rst'), None)]
                        elif self.direction == 'high':
                            node.cond = [ast.BinaryOp('eq', ast.Identifier('rst'), None)]
        for c in node.children():
            self.visit(c)

def transform(input_file, output_file, direction):
    try:
        # Parse AST
        ast_node, directives = parse([input_file])

        # Apply visitor
        visitor = ResetTransformer(direction)
        visitor.visit(ast_node)

        # Perform regex transformations
        with open(input_file, "r") as f:
            content = f.read()

        if direction == 'low':
            pattern = r'posedge.*rst'
            replacement = 'negedge rst'
        elif direction == 'high':
            pattern = r'negedge.*rst'
            replacement = 'posedge rst'

        modified_content = re.sub(pattern, replacement, content)

        # Write output
        with open(output_file, "w") as f:
            f.write(modified_content)

        return True

    except Exception as e:
        print(f"Error: {str(e)}")
        return False

def main():
    import argparse
    parser = argparse.ArgumentParser(description='Reset direction transformer')
    parser.add_argument('input_file', help='Input Verilog file')
    parser.add_argument('output_file', help='Output Verilog file')
    parser.add_argument('--direction', choices=['low', 'high'], default='low', help='Direction of reset (default: low)')
    args = parser.parse_args()
    if transform(args.input_file, args.output_file, args.direction):
        print(f"Transformation successful. Output written to {args.output_file}")
    else:
        print("Transformation failed.")

if __name__ == "__main__":
    main()

# Example usage:
# python reset_transform.py my_module.v transformed_module.v --direction high
```

This module defines a `ResetTransformer` class that inherits from the `ast.ASTVisitor`. It has an initializer method that takes a direction parameter, which can be either 'low' or 'high'. The visitor iterates through the AST and checks if it encounters an IfStatement node. If it does, it checks if the condition is an equality check involving the rst signal. If it is, it changes the condition to the opposite direction (i.e., from high to low or vice versa).

The module also defines a `transform` function that takes an input file, an output file, and a direction parameter. It parses the AST, applies the visitor, performs regex transformations on the source code, and writes the modified code to the output file.

Finally, the module includes a `main` function that uses the argparse library to parse command-line arguments and calls the `transform` function with the specified input and output files.

You can run this script from the command line like so:
```
python reset_transform.py my_module.v transformed_module.v --direction high
```