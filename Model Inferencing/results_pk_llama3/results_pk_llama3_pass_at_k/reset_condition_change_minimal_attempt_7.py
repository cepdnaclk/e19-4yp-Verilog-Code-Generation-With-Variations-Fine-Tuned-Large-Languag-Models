# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 7
# Success: False
# Overall Score: 0.375

Here's a Python module for performing the transformation:

```python
import re
from pyverilog.vparser.parser import VerilogParser
from pyverilog.ast import *

class ResetConditionTransformer(XForm):
    def __init__(self, direction='low'):
        self.direction = direction

    def visit(self, node):
        if isinstance(node, IfStatement):
            for cond in node.conds:
                if isinstance(cond, FuncCall) and cond.funcname == 'rst':
                    new_cond = re.sub(r'rst\(', f'!{self.direction}rst(' if self.direction == 'low' else '!(!{self.direction}rst(', 1)
                    node.conds[cond] = AstNode( IfStatement, [new_cond] )
        return node

    def transform(self, ast):
        visitor = SelfVisitor(ast, self)
        ast.accept(visitor)
        return ast

class SelfVisitor(ParseTreeVisitor):
    def __init__(self, node, transformer):
        self.node = node
        self.transformer = transformer

    def visit(self, node):
        if isinstance(node, ModuleDef):
            for child in node.stmts:
                if isinstance(child, IfStatement):
                    self.visit_if_statement(child)
        return node

    def visit_if_statement(self, node):
        visitor = SelfVisitor(node.cond, self.transformer)
        node.cond.accept(visitor)
        return node

def main():
    parser = argparse.ArgumentParser(description='Change reset condition from active-high to active-low or vice versa')
    parser.add_argument('input_file', type=str, help='Verilog file name')
    parser.add_argument('output_file', type=str, help='Output Verilog file name')
    parser.add_argument('-d', '--direction', choices=['high', 'low'], default='low', help='Direction of the reset condition (default: low)')
    args = parser.parse_args()

    with open(args.input_file, 'r') as f:
        verilog_code = f.read()

    ast = VerilogParser().parse(verilog_code)

    transformer = ResetConditionTransformer(direction=args.direction)
    transformed_ast = transformer.transform(ast)

    with open(args.output_file, 'w') as f:
        f.write(str(transformed_ast))

if __name__ == '__main__':
    main()
```

Here's a brief explanation of the code:

1. The `ResetConditionTransformer` class is an XForm that inherits from the existing xform framework pattern. It takes an optional `direction` parameter to specify whether the reset condition should be changed from active-high to active-low or vice versa.
2. The `visit` method identifies if statements and checks for the presence of a `rst` function call as a condition. If found, it uses regular expressions to replace the `rst` call with its negated counterpart (e.g., `!rst` becomes `!(!rst`) depending on the direction.
3. The `transform` method creates an instance of the visitor class and applies it to the abstract syntax tree (AST) to perform the transformation.
4. The `SelfVisitor` class is a custom visitor that recursively traverses the AST, visiting each node and applying the transformation as needed.
5. The `main` function uses the `argparse` library to parse command-line arguments, reads the input Verilog file, applies the transformation using the `ResetConditionTransformer`, and writes the transformed code to an output file.

To use this module, save it to a file (e.g., `reset_transformer.py`) and run it from the command line:
```bash
python reset_transformer.py -d high input.v output.v
```
This will transform the Verilog code in `input.v` to change the reset condition from active-high to active-low, writing the result to `output.v`.