# Generated by Ollama Llama 3
# Task: reset_condition_change_minimal
# Attempt: 4
# Success: False
# Overall Score: 0.332

Here is a Python module that performs the task of changing reset condition from active-high to active-low or vice versa:
```python
import pyverilog.ast as ast
import re
from argparse import ArgumentParser
from xforms import XForm, PatternVisitor

class ResetConditionTransformer(XForm):
    """
    Changes reset condition from active-high to active-low or vice versa.
    """

    def __init__(self, direction: str = 'low'):
        self.direction = direction

    def apply(self, module: ast.Module) -> bool:
        visitor = ResetConditionVisitor(module, self.direction)
        return visitor.visit()

class ResetConditionVisitor(PatternVisitor):
    """
    Visitor class to identify and transform reset condition.
    """

    def __init__(self, module: ast.Module, direction: str):
        self.module = module
        self.direction = direction

    def visit_statement(self, statement: ast.Statement) -> None:
        if isinstance(statement, ast.IfStatement):
            self.visit_if_statement(statement)

    def visit_if_statement(self, statement: ast.IfStatement) -> None:
        for cond in statement.cond_list:
            if isinstance(cond, ast.BinaryExpression) and \
               cond.op == 'eq' and cond.left.id == 'rst':
                if self.direction == 'low':
                    new_cond = ast.BinaryExpression('neq', cond.left, '1')
                else:
                    new_cond = ast.BinaryExpression('eq', cond.left, '1')
                statement.cond_list[0] = new_cond
        return

    def visit_task(self, task: ast.Task) -> None:
        if self.direction == 'low':
            for sensitivity in task.sensitivity:
                if sensitivity.type == 'posedge':
                    sensitivity.type = 'negedge'
                elif sensitivity.type == 'negedge':
                    sensitivity.type = 'posedge'
        return

def main():
    parser = ArgumentParser(description='Reset Condition Transformer')
    parser.add_argument('--direction', choices=['high', 'low'], default='low')
    args = parser.parse_args()

    module_str = """
module tb;
  input rst, clk;
  initial
    $display("Initial");
  always @(posedge clk)
    if (rst) begin
      $display("Reset");
    end
  else begin
      $display("Not Reset");
    end

  task reset_task;
    if (!rst) $display("Not Reset");
    else $display("Reset");
  endtask
endmodule
"""

    module = ast.parse(module_str)
    transformer = ResetConditionTransformer(args.direction)

    success = transformer.apply(module)

    if success:
        print("Transformation successful!")
    else:
        print("Transformation failed!")

if __name__ == '__main__':
    main()
```
Here's a breakdown of the code:

1. The `ResetConditionTransformer` class inherits from `XForm` and defines an `apply` method that takes a `Module` object as input.
2. The `visit_statement` method is overridden to visit `IfStatement` instances, which are then processed in the `visit_if_statement` method.
3. In `visit_if_statement`, we check if the condition is an equality comparison involving the `rst` signal. If so, we create a new condition with the opposite reset polarity (e.g., from `eq(rst, 1)` to `neq(rst, 1)` or vice versa).
4. The `visit_task` method updates the sensitivity lists for tasks that use the `posedge` or `negedge` clocking events.
5. In the `main` function, we create an instance of the transformer with the desired direction (default is `low`) and apply it to a sample module string.

To use this transformation in the xform framework, you would need to integrate it into your existing workflow. For example, you could add this code as a new Python file and then include it in your build process. The xform framework provides various tools for managing and applying transformations; consult their documentation for more information.