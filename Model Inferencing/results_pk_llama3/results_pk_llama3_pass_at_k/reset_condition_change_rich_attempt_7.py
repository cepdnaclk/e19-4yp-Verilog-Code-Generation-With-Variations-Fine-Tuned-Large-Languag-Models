# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 7
# Success: False
# Overall Score: 0.518

Here's a Python module for your task:

```python
import pyverilog.parser as verilog_parser
import re
import argparse

class ResetConditionTransformer:
    def __init__(self, reset_name):
        self.reset_name = reset_name
        self.changes_made = []
        self.signal_found = False

    def visit(self, node):
        if isinstance(node, verilog_parser.IfStatement):
            for condition in node.condition:
                if isinstance(condition, verilog_parser.BinaryExpression) and \
                   condition.operator == verilog_parser.BinaryOperator.EQ and \
                   condition.right.value.name == self.reset_name:
                    if not self.signal_found:
                        self.signal_found = True
                        self.changes_made.append(f"Found {self.reset_name}")
                    if condition.right.value.value == "1":
                        condition.right.value.value = "0"
                    else:
                        condition.right.value.value = "1"

        for c in node.children():
            self.visit(c)

def transform_reset(input_file, output_file):
    # Parse AST
    ast, directives = verilog_parser.parse([input_file])

    # Apply visitor
    transformer = ResetConditionTransformer("rst")
    transformer.visit(ast)

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    # Update sensitivity lists (posedge to negedge)
    if not transformer.signal_found:
        return False

    modified_content = re.sub(r"posedge\s*\(" + transformer.reset_name + r"\)", "negedge(" + transformer.reset_name + ")", content)
    modified_content = re.sub(r"posedge\s*[" + transformer.reset_name + "]", "negedge[" + transformer.reset_name + "]", modified_content)

    # Update sensitivity lists (negedge to posedge)
    if not transformer.signal_found:
        return False

    modified_content = re.sub(r"negedge\s*\(" + transformer.reset_name + r"\)", "posedge(" + transformer.reset_name + ")", content)
    modified_content = re.sub(r"negedge\s*[" + transformer.reset_name + "]", "posedge[" + transformer.reset_name + "]", modified_content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Transform reset condition from active-high to active-low or vice versa.")
    parser.add_argument("-i", "--input-file", help="Input Verilog file")
    parser.add_argument("-o", "--output-file", help="Output Verilog file")
    args = parser.parse_args()

    if not transform_reset(args.input_file, args.output_file):
        print("Transformation failed.")
```

You can run this script from the command line like so:

```bash
python reset_condition_transformer.py -i input.v -o output.v
```

This will transform the reset condition in your Verilog file.