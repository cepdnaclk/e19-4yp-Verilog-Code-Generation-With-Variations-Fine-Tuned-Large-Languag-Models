# Generated by Ollama Llama 3
# Task: reset_condition_change_rich
# Attempt: 10
# Success: False
# Overall Score: 0.455

Here is a Python module that performs the required transformation:

```python
import pyverilog.ast as ast
import re
from argparse import ArgumentParser

class ResetConditionTransformer(ast.ASTVisitor):
    def __init__(self, direction):
        self.direction = direction
        self.changes_made = []

    def visit(self, node):
        if isinstance(node, ast.IfStatement):
            for condition in node.conditions:
                if condition.operator == 'rst':
                    if self.direction == 'low':
                        condition.expression = f'!{condition.expression}'
                        self.changes_made.append(f"Changed reset condition from high to low")
                    elif self.direction == 'high':
                        condition.expression = f'{condition.expression}'
                        self.changes_made.append(f"Changed reset condition from low to high")

        for c in node.children():
            self.visit(c)

def transform(input_file, output_file, direction):
    # Parse AST
    ast_tree, _ = ast.ast_from_file(input_file)

    # Apply visitor
    transformer = ResetConditionTransformer(direction)
    transformer.visit(ast_tree)

    # Perform regex transformations
    with open(input_file, 'r') as f:
        content = f.read()

    modified_content = re.sub(r'posedge (.*)rst', r'negedge \1!rst', content)
    modified_content = re.sub(r'negedge (.*)rst', r'posedge \1 rst', content)

    # Write output
    with open(output_file, 'w') as f:
        f.write(modified_content)

    return True

if __name__ == "__main__":
    parser = ArgumentParser(description='Transform Verilog code to change reset condition')
    parser.add_argument('-i', '--input-file', type=str, required=True, help='Input Verilog file')
    parser.add_argument('-o', '--output-file', type=str, required=True, help='Output Verilog file')
    parser.add_argument('-d', '--direction', type=str, choices=['high', 'low'], required=True, help='Direction of reset condition change (high or low)')

    args = parser.parse_args()

    if transform(args.input_file, args.output_file, args.direction):
        print('Transformation successful!')
    else:
        print('Transformation failed!')