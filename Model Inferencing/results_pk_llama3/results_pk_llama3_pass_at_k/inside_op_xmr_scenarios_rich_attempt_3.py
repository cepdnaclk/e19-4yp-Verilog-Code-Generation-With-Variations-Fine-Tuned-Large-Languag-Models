# Generated by Ollama Llama 3
# Task: inside_op_xmr_scenarios_rich
# Attempt: 3
# Success: False
# Overall Score: 0.552

Here is a complete Python module for creating test cases for inside operator with cross-module references:

```python
import pyverilog.ast as ast
import re
import argparse

class XMRTestVisitor(ast.NodeVisitor):
    def __init__(self, signal_name):
        self.signal_name = signal_name
        self.changes_made = []
        self.module_found = False

    def visit(self, node):
        if isinstance(node, ast.Module):
            for decl in node.decls:
                if isinstance(decl, ast.PortDecl):
                    if decl.name == self.signal_name:
                        self.module_found = True
                        self.changes_made.append(f"Found {self.signal_name} in module")
                elif isinstance(decl, ast.ModuleItem):
                    self.visit(decl.item)

        # Visit children
        for c in node.children():
            self.visit(c)

def transform_xmr(input_file, output_file, signal_name):
    # Parse AST
    ast_module = ast.parse_file(input_file)

    # Apply visitor
    visitor = XMRTestVisitor(signal_name)
    visitor.visit(ast_module)

    # Perform regex transformations
    with open(input_file, "r") as f:
        content = f.read()

    modified_content = re.sub(r"inside\(([^)]+)\)", r"\1", content)

    # Write output
    with open(output_file, "w") as f:
        f.write(modified_content)

    return True

def main():
    parser = argparse.ArgumentParser(description="XMR Test Case Transformer")
    parser.add_argument("-i", "--input-file", help="Input Verilog file")
    parser.add_argument("-o", "--output-file", help="Output transformed file")
    parser.add_argument("-s", "--signal-name", help="Signal name to search for")

    args = parser.parse_args()

    if not args.input_file or not args.output_file or not args.signal_name:
        print("Error: Missing required arguments.")
        return False

    success = transform_xmr(args.input_file, args.output_file, args.signal_name)
    if success:
        print(f"Transformed file written to {args.output_file}")
    else:
        print("Transformation failed.")

if __name__ == "__main__":
    main()
```

This module defines a visitor class `XMRTestVisitor` that inherits from the pattern provided. It identifies modules, port declarations, and inside operators in the AST. The transformation function `transform_xmr` applies this visitor to the input file, performs regex transformations on the content, and writes the output to the specified file.

The main function provides a command-line interface using argparse, allowing users to specify the input file, output file, and signal name as arguments. It then calls the transformation function with these arguments and prints success or failure messages accordingly.

This module should integrate properly with the existing xform framework patterns.