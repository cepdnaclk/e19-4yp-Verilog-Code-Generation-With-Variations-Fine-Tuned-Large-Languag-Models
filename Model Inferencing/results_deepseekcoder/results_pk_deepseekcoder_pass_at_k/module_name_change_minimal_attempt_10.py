# Generated by Ollama Llama 3
# Task: module_name_change_minimal
# Attempt: 10
# Success: False
# Overall Score: 0.305

Here is a Python module for your requirement using PyVerilog and argparse to create a CLI tool that changes all occurrences of `old_module` in files into new names, while preserving port declarations along other aspects as per requirements mentioned above (i.e., changing the name everywhere including endmodules).
You can use this module by running it from command line and specifying old & new modules'名称: 
```python
import argparse
from pyverilog import PyVerilog, VerilogASTNodeKinds as Kinds ,PyVObject    # Importing necessary classes/functions.  
    
class ChangeModuleNameTransformer(object):      // Define your visitor class here.      
  def __init__(self) -> None:             // Initializer function        
        self._old_name = ''               // Declare variables inside initialiser         
        self._new_name=''               
    
   # Add visit_* methods for all nodes you want to process (e.g., ModuleDecl, Identifier)      
  def visit___ModuleDecl___(self, node: 'pyvAstNode'):      // Define method name according your requirement       
         self._old_name = str(node['lhs'])          // Extract old and new names from the AST nodes. If not given in command line arguments then prompt user for input      
  # Add visit_* methods if you want to handle other node types    (e.g., CallExpr, StrLit)       
         print(f'Old name: {self._old_name}, New Name :{node['lhs']}')          // Print changes made in console    
   def transform() -> 'bool':              // Function to run the transformation      
      parser = PyVerilog('input.v', debug=True)  /* Initialize your verilog instance, you can use command line arguments for input file */    # Load Verilog source code       
     if not self._old_name or not re.match("^[a-zA-Z0-9_\.]+$",self._new_module):          // Input validation      
         print('Please provide old and new module names')           /* If no inputs provided, prompt user for input */      return False     # Return false on fail  ```  This is a basic implementation of the requirement. You may need to expand it according your needs especially regarding parsing Verilog into an AST then using visitor pattern in this case and also handle comments changes properly by yourself as per requirements mentioned above (i.e., updating endmodules if they reference module name).
