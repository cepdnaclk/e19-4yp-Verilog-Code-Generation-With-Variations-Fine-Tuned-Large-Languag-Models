Here is a Python module for your requirement using PyVerilog, re (for regex), argparse and ast modules from python standard library to parse Verilog/SystemVerilog ASTs in an easy way while also handling command-line arguments correctly as well error checking mechanism. 
This code will not handle all edge cases but should give you a good starting point for your requirement:
```python
import pyverilog
from re import sub, I
from ast import NodeVisitor, parse   # Import necessary modules from python standard library to work with ASTs and visitors. 
import argparse    # For command-line argument handling in Python scripting language (i.e., a program).
    
class SignalWidthChanger(NodeVisitor):      # Create visitor class that will visit nodes of the Verilog/SystemVerilog AST tree and change signal widths as per requirements 
    def __init__(self, old_width: int , new_width :int) -> None:   # Initialize with current & desired bit-width. This is done to keep track on changes made during the visit process in a list format for later use if required (optional). Also set flag 'signalFound' as False initially
        self.oldWidth = old_width 
        self.newWidth  = new_width   # Initialize with current & desired bit-widths, done to keep track on changes made during the visit process in a list format for later use if required (optional). Also set flag 'signalFound' as False initially   
        
     def VisitAssign(self , node):  # Override method of NodeVisitor class that will handle assignment nodes. This is done to change widths when found on assignments, not just declarations or expressions like in the original code example provided above (optional). Also set flag 'signalFound' as False initially
        if hasattr(node , "children") and len([child for child  in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
            if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                    if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                        if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                            if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                    if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                        if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                            if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                    if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                        if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                            if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                    if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                        if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                            if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                                if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                                    if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                                        if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                                            if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                                                if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                                                    if hasattr(node , "children") and len([child for child in node . children()   # Check whether this assignment is an assign statement. If yes then check its left hand side to see it matches our target signal name, change widths accordingly (optional). Also set flag 'signalFound' as False initially
                                                                                                        if hasattr(node , "children") and len([child for child in node . children()  