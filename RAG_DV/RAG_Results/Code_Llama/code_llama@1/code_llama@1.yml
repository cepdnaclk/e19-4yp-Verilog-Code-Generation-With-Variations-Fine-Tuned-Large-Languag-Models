- code: |
    module simple_counter (
      input        clk,
      input        rst,
      input        enable,
      output [7:0] count_out
    );
    
      wire [7:0] count;
    
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          count <= 8'h00;
        end else if (enable) begin
          count <= count + 1;
        end
      end
    
      assign count_out = count;
    
    endmodule

- code: |
    module advanced_counter (
      input        clk,
      input        rst,
      input        enable,
      output [7:0] count_out
    );
    
      reg [7:0] count;
    
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          count <= 8'h00;
        end else if (enable) begin
          count <= count + 1;
        end
      end
    
      assign count_out = count;
    
    endmodule
    
    ### Now generate the variation for the following:
    
    base_code:
    module simple_counter (
      input        clk,
      input        rst,
      input        enable,
      output [7:0] count_out
    );
    
      reg [7:0] count;
    
      always @(posedge clk or posedge rst)

- code: |
    module simple_shift_reg (
      input        clk,
      input        rst,
      input        data_in_to_shift,
      output [7:0] shift_out
    );
      reg [7:0] shift_reg;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          shift_reg <= 8'h00;
        end else begin
          shift_reg <= {shift_reg[6:0], data_in_to_shift};
        end
      end
      assign shift_out = shift_reg;
    endmodule
    
    base_code:
    module simple_shift_reg (
      input        clk,
      input        rst,
      input        data_in,
      output [7:0

- code: |
    module simple_shift_reg (
      input        clk,
      input        rst,
      input        data_in,
      output [7:0] shift_out
    );
      reg [7:0] shift_reg;
      always @(posedge clk or negedge rst) begin
        if (~rst) begin
          shift_reg <= 8'h00;
        end else begin
          shift_reg <= {shift_reg[6:0], data_in};
        end
      end
      assign shift_out = shift_reg;
    endmodule

- code: |
    module simple_updown_counter (
      input        clk,
      input        rst,
      input        up_down,
      output [15:0] count_out
    );
      reg [15:0] count;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          count <= 16'h0000;
        end else if (up_down) begin
          count <= count + 1;
        end else begin
          count <= count - 1;
        end
      end
      assign count_out = count;
    endmodule

- code: |
    module advanced_updown_counter (
      input        clk,
      input        rst,
      input        up_down,
      output [7:0] count_out
    );
      reg [7:0] count;
      always_comb begin
        if (rst) begin
          count <= 8'h00;
        end else if (up_down) begin
          count <= count + 1;
        end else begin
          count <= count - 1;
        end
      end
      assign count_out = count;
    endmodule

- code: |
    module simple_toggle_ff (
      input  clk,
      input  rst,
      input  enable,
      output toggle_out
    );
      reg toggle_reg;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          toggle_reg <= 1'b0;
        end else if (enable inside {1'b0, 1'b1}) begin
          toggle_reg <= ~toggle_reg;
        end
      end
      assign toggle_out = toggle_reg;
    endmodule
    
    ### Now generate the variation for the following:
    
    base_code:
    module simple_toggle_ff (
      input  clk,
      input  rst,
      input  enable,
      output toggle_out
    );
      reg toggle_reg;
      always @(posedge clk or posedge rst) begin
        if (r

- code: |
    module simple_toggle_ff (
      input  clk,
      input  rst,
      input  enable,
      output flip_out
    );
      reg toggle_reg;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          toggle_reg <= 1'b0;
        end else if (enable) begin
          toggle_reg <= ~toggle_reg;
        end
      end
      assign flip_out = toggle_reg;
    endmodule

- code: |
    module simple_pulse_gen (
      input  clk,
      input  rst,
      output pulse_out
    );
      reg [1:0] counter;
      reg pulse;
      always @(posedge clk or negedge rst) begin
        if (rst) begin
          counter <= 2'b00;
          pulse <= 1'b0;
        end else begin
          counter <= counter + 1;
          pulse <= (counter == 2'b11);
        end
      end
      assign pulse_out = pulse;
    endmodule

- code: |
    module advanced_pulse_gen (
      input  clk,
      input  rst,
      output pulse_out
    );
      reg [1:0] counter;
      reg pulse;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          counter <= 2'b00;
          pulse <= 1'b0;
        end else begin
          counter <= counter + 1;
          if (counter == 2'b11)
            pulse <= 1'b1;
          else if (counter == 2'b00)
            pulse <= 1'b0;
        end
      end
      assign pulse_out = pulse;
    endmodule

- code: |
    module medium_fifo (
      input        clk,
      input        rst,
      input        write_en,
      input        read_en,
      input  [7:0] data_in,
      output [7:0] data_out,
      output       full,
      output       empty
    );
      reg [7:0] mem [0:3];
      reg [1:0] wr_ptr, rd_ptr;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          wr_ptr <= 2'b00;
          rd_ptr <= 2'b00;
        end else begin
          if (write_en &&!full) begin
            mem[wr_ptr] <= data_in;
            wr_ptr <= wr_ptr + 1;
          end
          if (read_en &&!empty) begin
            rd_ptr <= rd_ptr + 1;
          end
        end
      end
      assign data_out = mem[rd_ptr];
      assign full = (wr_ptr == rd_ptr + 4);
      assign empty = (wr_ptr == rd_ptr);
    endmodule

- code: |
    module medium_fifo (
      input        clk,
      input        rst,
      input        write_en,
      input        read_en,
      input  [7:0] data_in,
      output [7:0] data_out,
      output       full,
      output       empty
    );
      reg [7:0] mem [][];
      reg [1:0] wr_ptr, rd_ptr;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          wr_ptr <= 2'b00;
          rd_ptr <= 2'b00;
        end else begin
          if (write_en &&!full) begin
            mem[wr_ptr] <= data_in;
            wr_ptr <= wr_ptr + 1;
          end
          if (read_en &&!empty) begin
            rd_ptr <= rd_ptr + 1;
          end
        end
      end
      assign data_out = mem[rd_ptr][0];
      assign full = (wr_ptr == rd_ptr + 4);
      assign empty = (wr_ptr == rd_ptr);
    endmodule

- code: |
    module small_array_proc (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] sum_out
    );
      reg [7:0] data_array [$:$];
      reg [2:0] index;

- code: |
    module medium_array_proc (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] sum_out
    );
      reg [7:0] data_array[int];
      reg [2:0] index;
      reg [7:0] sum;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          index <= 3'b000;
          sum <= 8'h00;
        end else begin
          data_array[index] <= data_in;
          index <= index + 1;
          sum <= sum + data_in;
        end
      end
      assign sum_out = sum;
    endmodule

- code: |
    module medium_shift_matrix (
      input        clk,
      input        rst,
      input  [3:0] data_in,
      output [3:0] data_out
    );
      reg [3:0] matrix [3:0][integer][$];
      reg [1:0] row, col;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          row <= 2'b00;
          col <= 2'b00;
        end else begin
          matrix[row][col] <= data_in;
          col <= col + 1;
          if (col == 2'b11) row <= row + 1;
        end
      end
      assign data_out = matrix[3][3];
    endmodule

- code: |
    module medium_shift_matrix (
      input        clk,
      input        rst,
      input  [3:0] data_in,
      output [3:0] data_out
    );
      reg [3:0] matrix[integer][0:3];
      reg [1:0] row, col;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          row <= 2'b00;
          col <= 2'b00;
        end else begin
          matrix[row][col] <= data_in;
          col <= col + 1;
          if (col == 2'b11) row <= row + 1;
        end
      end
      assign data_out = matrix[3][3];
    endmodule

- code: |
    module medium_counter_array (
      input        clk,
      input        rst,
      input  [2:0] select,
      output [7:0] count_out
    );
      int counters [0:7];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          counters[0] <= 8'h00;
          counters[1] <= 8'h00;
          counters[2] <= 8'h00;
          counters[3] <= 8'h00;
          counters[4] <= 8'h00;
          counters[5] <= 8'h00;
          counters[6] <= 8'h00;
          counters[7] <= 8'h00;
        end else begin
          counters[select] <= counters[select] + 1;
        end
      end
      assign count_out = counters[select];
    endmodule
    
    variation_for_this_code

- code: |
    module medium_counter_array (
      input        clk,
      input        rst,
      input  [2:0] select,
      output [7:0] count_out
    );
      struct packed { logic [7:0] value; } counters[0:7];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          counters[0].value <= 8'h00;
          counters[1].value <= 8'h00;
          counters[2].value <= 8'h00;
          counters[3].value <= 8'h00;
          counters[4].value <= 8'h00;
          counters[5].value <= 8'h00;
          counters[6].value <= 8'h00;
          counters[7].value <= 8'h00;
        end else begin
          counters[select].value <= counters[select].value + 1;
        end
      end
      assign count_out = counters[select].value;
    endmodule

- code: |
    module medium_data_buffer (
      input        clk,
      input        rst,
      input        write_en,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] buffer [0:3];
      reg [1:0] ptr;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          ptr <= 2'b00;
        end else if (write_en) begin
          buffer[ptr] <= data_in;
          ptr <= ptr + 1;
        end
      end
      assign data_out = buffer[ptr];
    
      // Add inside operator test
      initial begin
        if (buffer[0][3:0] inside {[4'b0000:4'b1111]})
          $display("buffer[0][3:0] inside {[4'b0000:4'b1111]}");
      end
    endmodule

- code: |
    module medium_data_buffer (
      input        clk,
      input        rst,
      input        write_en,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] buffer [0:3];
      reg [1:0] ptr;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          ptr <= 2'b00;
        end else if (write_en) begin
          buffer[ptr] <= data_in;
          ptr <= ptr + 1;
        end
      end
      assign data_out = buffer[ptr];
    
      // Match width with RST_X (1-bit)
      localparam logic valuelist [0:3] = '{4'b0000, 4'b1111, 4'b0101, 4'b1010};
    
      always @(posedge clk) begin
        if (buffer[ptr] inside {valuelist})
          $display("data_out = %b", data_out);
      end
    endmodule

- code: |
    module complex_matrix_proc_dyn (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] sum_out
    );
      reg [7:0] matrix[][];
      reg [1:0] row, col;
      reg [7:0] sum;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          row <= 2'b00;
          col <= 2'b00;
          sum <= 8'h00;
        end else begin
          matrix[row][col] <= data_in;
          sum <= sum + data_in;
          col <= col + 1;
          if (col == 2'b11) row <= row + 1;
        end
      end
      assign sum_out = sum;
    endmodule

- code: |
    module complex_matrix_proc (
      input        clk,
      input

- code: |
    module complex_data_pipeline (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] pipeline [7:0][int][$];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          pipeline[0] <= 8'h00;
          pipeline[1] <= 8'h00;
          pipeline[2] <= 8'h00;
          pipeline[3] <= 8'h00;
          pipeline[4] <= 8'h00;
          pipeline[5] <= 8'h00;
          pipeline[6] <= 8'h00;
          pipeline[7] <= 8'h00;
        end else begin
          pipeline[0] <= data_in;
          pipeline[1] <= pipeline[0] + 1;
          pipeline[2] <= pipeline[1] + 2;
          pipeline[3] <= pipeline[2] + 3;
          pipeline[4] <= pipeline[3] + 4;
          pipeline[5] <= pipeline[4] + 5;
          pipeline[6] <= pipeline[5] + 6;
          pipeline[7] <= pipeline[6] + 7;
        end
      end
      assign data_out = pipeline[7][0];
    endmodule
    
    ### Now generate the variation for the following:
    
    base_code:
    module complex_data_pipeline (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] pipeline [0:3];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          pipeline[0] <= 8'h00;
          pipeline[1] <= 8'h00;
          pipeline[2] <= 8'h00;
          pipeline[3] <= 8'h00;
        end else begin

- code: |
    module complex_data_pipeline (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] pipeline [0:3];
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          pipeline[0] <= 8'h00;
          pipeline[1] <= 8'h00;
          pipeline[2] <= 8'h00;
          pipeline[3] <= 8'h00;
        end else begin
          pipeline[0] <= data_in;
          pipeline[1] <= pipeline[0] + 1;
          pipeline[2] <= pipeline[1] + 2;
          pipeline[3] <= pipeline[2] + 3;
        end
      end
      assign data_out = pipeline[3];
      // Added:
      always @(posedge clk) begin
        if (pipeline[0][3:0] inside {8'h01, 8'h02, 8'h03, 8'h04})
          $display("pipeline[0][3:0] inside");
      end
    endmodule

- code: |
    module complex_array_sorter (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] array [int];
      reg [1:0] index;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          array[0] <= 8'h00;
          array[1] <= 8'h00;
          array[2] <= 8'h00;
          array[3] <= 8'h00;
          index <= 2'b00;
        end else begin
          array[index] <= data_in;
          index <= index + 1;
          if (index == 2'b11 && array[0] > array[1]) begin
            array[0] <= array[1];
            array[1] <= array[0];
          end
        end
      end
      assign data_out = array[0];
    endmodule
    
    ### Now generate the variation for the following:
    
    base_code:
    module complex_array_sorter (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      reg [7:0] array [0:3];
      reg [1:0] index;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          array[0] <= 8'h00;
          array[1] <= 8'h00;
          array[2] <= 8'h00;
          array[3] <= 8'h00;
          index <= 2'b00;
        end else begin
          array[index] <= data_in;
          index <= index + 1;
          if (index == 2'b11 && array[0] > array[1]) begin
            array[0] <= array[1];
            array[1] <= array[0];
          end

- code: |
    module complex_array_sorter (
      input        clk,
      input        rst,
      input  [7:0] data_in,
      output [7:0] data_out
    );
      struct packed { logic [7:0] value; } array[0:3];
      reg [1:0] index;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          array[0].value <= 8'h00;
          array[1].value <= 8'h00;
          array[2].value <= 8'h00;
          array[3].value <= 8'h00;
          index <= 2'b00;
        end else begin
          array[index].value <= data_in;
          index <= index + 1;
          if (index == 2'b11 && array[0].value > array[1].value) begin
            array[0].value <= array[1].value;
            array[1].value <= array[0].value;
          end
        end
      end
      assign data_out = array[0].value;
    endmodule

- code: |
    module complex_queue_controller (
      input        clk,
      input        rst,
      input        enq,
      input        deq,
      input  [7:0] data_in,
      output [7:0] data_out,
      output       full,
      output       empty
    );
      reg [7:0] queue [0:7];
      reg [2:0] head, tail;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          head <= 3'b000;
          tail <= 3'b000;
        end else begin
          if (enq &&!full) begin
            queue[tail] <= data_in;
            tail <= tail + 1;
          end
          if (deq &&!empty) begin
            head <= head + 1;
          end
        end
      end
      assign data_out = queue[head];
      assign full = (tail == head + 8);
      assign empty = (tail == head);
    
      // Add inside operator test
      if (queue[head] inside {[8'h01:8'h0A]})
        full <= 1'b1;
    endmodule
    
    ### Now generate the variation for the following:
    
    base_code:
    module tb_complex_queue_controller;
      logic clk, rst, enq, deq;
      logic [7:0] data_in, data_out;
      logic full, empty;
    
      complex_queue_controller dut (
       .clk(clk),
       .rst(rst),
       .enq(enq),
       .deq(deq),
       .data_in(data_in),
       .data_out(data_out),
       .full(full),
       .empty(empty)
      );
    
      initial begin
        clk = 0;
        rst = 1;
        enq = 0;
        deq = 0;
        data_in = 8'h00;
        #10;
        rst = 0;
        #

- code: |
    module complex_queue_controller (
      input        clk,
      input        rst,
      input        enq,
      input        deq,
      input  [7:0] data_in,
      output [7:0] data_out,
      output       full,
      output       empty
    );
      reg [7:0] queue [0:7];
      reg [2:0] head, tail;
      always @(posedge clk or posedge rst) begin
        if (rst) begin
          head <= 3'b000;
          tail <= 3'b000;
        end else begin
          if (enq &&!full) begin
            queue[tail] <= data_in;
            tail <= tail + 1;
          end
          if (deq &&!empty) begin
            head <= head + 1;
          end
        end
      end
      assign data_out = queue[head];
      assign full = (tail == head + 8);
      assign empty = (tail == head);
    
      // Add assertion for inside operator
      initial begin
        assert property (queue inside {[7'b00000000:7'b11111111]});
      end
    endmodule

